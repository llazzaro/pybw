/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Python.h has to appear first */
#include <Python.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *self, PyObject *func)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyInstanceMethod_New(func);
#else
  return NULL;
#endif
}

#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(ptr, type, flags)
#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, (char *) msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, (char*) name, obj);
  Py_DECREF(obj);                            
}

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    register Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      register int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData* data)
{
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
} SwigPyObject;

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", name, v);
  if (v->next) {
#ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
#else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
#endif
#if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
#else
    PyString_ConcatAndDel(&repr,nrep);
#endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_print(SwigPyObject *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char *str;
#ifdef METH_NOARGS
  PyObject *repr = SwigPyObject_repr(v);
#else
  PyObject *repr = SwigPyObject_repr(v, NULL);
#endif
  if (repr) {
    str = SWIG_Python_str_AsChar(repr); 
    fputs(str, fp);
    SWIG_Python_str_DelForPy3(str);
    Py_DECREF(repr);
    return 0; 
  } else {
    return 1; 
  }
}

SWIGRUNTIME PyObject *
SwigPyObject_str(SwigPyObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->ty->name, sizeof(result)) ?
    SWIG_Python_str_FromChar(result) : 0;
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  if( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) )
    res = Py_True;
  else
    res = Py_False;
  Py_INCREF(res);
  return res;  
}


SWIGRUNTIME PyTypeObject* _PySwigObject_type(void);

SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigObject_type();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporary object to carry the destroy operation */
	PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#else
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
_PySwigObject_type(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";
  
  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;  
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp
      = {
	/* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
	PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else    
	PyObject_HEAD_INIT(NULL)
	0,				    /* ob_size */
#endif
	(char *)"SwigPyObject",		    /* tp_name */
	sizeof(SwigPyObject),		    /* tp_basicsize */
	0,			            /* tp_itemsize */
	(destructor)SwigPyObject_dealloc,   /* tp_dealloc */
	(printfunc)SwigPyObject_print,	    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
	(getattrfunc)SwigPyObject_getattr,  /* tp_getattr */ 
#else
	(getattrfunc)0,			    /* tp_getattr */ 
#endif
	(setattrfunc)0,			    /* tp_setattr */ 
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
	(cmpfunc)SwigPyObject_compare,	    /* tp_compare */
#endif
	(reprfunc)SwigPyObject_repr,	    /* tp_repr */    
	&SwigPyObject_as_number,	    /* tp_as_number */
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */
	(hashfunc)0,			    /* tp_hash */
	(ternaryfunc)0,			    /* tp_call */
	(reprfunc)SwigPyObject_str,	    /* tp_str */
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigobject_doc, 	            /* tp_doc */        
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	(richcmpfunc)SwigPyObject_richcompare,           /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	swigobject_methods,		    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0,	                            /* tp_free */	   
	0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    swigpyobject_type = tmp;
    /* for Python 3 we already assigned ob_type in PyVarObject_HEAD_INIT() */
#if PY_VERSION_HEX < 0x03000000
    swigpyobject_type.ob_type = &PyType_Type;
#endif
    type_init = 1;
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* _PySwigPacked_type(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigPacked_type();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == _PySwigPacked_type()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
_PySwigPacked_type(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;  
  if (!type_init) {
    const PyTypeObject tmp
      = {
    /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
    PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
	PyObject_HEAD_INIT(NULL)
    0,				    /* ob_size */	
#endif
	(char *)"SwigPyPacked",		    /* tp_name */	
	sizeof(SwigPyPacked),		    /* tp_basicsize */	
	0,				    /* tp_itemsize */	
	(destructor)SwigPyPacked_dealloc,   /* tp_dealloc */	
	(printfunc)SwigPyPacked_print,	    /* tp_print */   	
	(getattrfunc)0,			    /* tp_getattr */ 	
	(setattrfunc)0,			    /* tp_setattr */ 	
#if PY_VERSION_HEX>=0x03000000
    0, /* tp_reserved in 3.0.1 */
#else
    (cmpfunc)SwigPyPacked_compare,	    /* tp_compare */
#endif
	(reprfunc)SwigPyPacked_repr,	    /* tp_repr */
	0,	                            /* tp_as_number */
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */
	(hashfunc)0,			    /* tp_hash */
	(ternaryfunc)0,			    /* tp_call */
	(reprfunc)SwigPyPacked_str,	    /* tp_str */
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigpacked_doc, 	            /* tp_doc */
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	0,                                  /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	0,		                    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0, 	                            /* tp_free */	   
        0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
 	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    swigpypacked_type = tmp;
    /* for Python 3 the ob_type already assigned in PyVarObject_HEAD_INIT() */
#if PY_VERSION_HEX < 0x03000000
    swigpypacked_type.ob_type = &PyType_Type;
#endif
    type_init = 1;
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  if (SwigPyObject_Check(pyobj)) {
    return (SwigPyObject *) pyobj;
  } else {
    PyObject *obj = 0;
#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
    if (PyInstance_Check(pyobj)) {
      obj = _PyInstance_Lookup(pyobj, SWIG_This());      
    } else {
      PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
      } else {
#ifdef PyWeakref_CheckProxy
	if (PyWeakref_CheckProxy(pyobj)) {
	  PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	  return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
	}
#endif
	obj = PyObject_GetAttr(pyobj,SWIG_This());
	if (obj) {
	  Py_DECREF(obj);
	} else {
	  if (PyErr_Occurred()) PyErr_Clear();
	  return 0;
	}
      }
    }
#else
    obj = PyObject_GetAttr(pyobj,SWIG_This());
    if (obj) {
      Py_DECREF(obj);
    } else {
      if (PyErr_Occurred()) PyErr_Clear();
      return 0;
    }
#endif
    if (obj && !SwigPyObject_Check(obj)) {
      /* a PyObject is called 'this', try to get the 'real this'
	 SwigPyObject from it */ 
      return SWIG_Python_GetSwigThis(obj);
    }
    return (SwigPyObject *)obj;
  }
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  if (!obj) return SWIG_ERROR;
  if (obj == Py_None) {
    if (ptr) *ptr = 0;
    return SWIG_OK;
  } else {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (own)
      *own = 0;
    while (sobj) {
      void *vptr = sobj->ptr;
      if (ty) {
	swig_type_info *to = sobj->ty;
	if (to == ty) {
	  /* no type cast needed */
	  if (ptr) *ptr = vptr;
	  break;
	} else {
	  swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
	  if (!tc) {
	    sobj = (SwigPyObject *)sobj->next;
	  } else {
	    if (ptr) {
              int newmemory = 0;
              *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
              if (newmemory == SWIG_CAST_NEW_MEMORY) {
                assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
                if (own)
                  *own = *own | SWIG_CAST_NEW_MEMORY;
              }
            }
	    break;
	  }
	}
      } else {
	if (ptr) *ptr = vptr;
	break;
      }
    }
    if (sobj) {
      if (own)
        *own = *own | sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
	sobj->own = 0;
      }
      return SWIG_OK;
    } else {
      int res = SWIG_ERROR;
      if (flags & SWIG_POINTER_IMPLICIT_CONV) {
	SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
	if (data && !data->implicitconv) {
	  PyObject *klass = data->klass;
	  if (klass) {
	    PyObject *impconv;
	    data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
	    impconv = SWIG_Python_CallFunctor(klass, obj);
	    data->implicitconv = 0;
	    if (PyErr_Occurred()) {
	      PyErr_Clear();
	      impconv = 0;
	    }
	    if (impconv) {
	      SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
	      if (iobj) {
		void *vptr;
		res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
		if (SWIG_IsOK(res)) {
		  if (ptr) {
		    *ptr = vptr;
		    /* transfer the ownership to 'ptr' */
		    iobj->own = 0;
		    res = SWIG_AddCast(res);
		    res = SWIG_AddNewMask(res);
		  } else {
		    res = SWIG_AddCast(res);		    
		  }
		}
	      }
	      Py_DECREF(impconv);
	    }
	  }
	}
      }
      return res;
    }
  }
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = PyBaseObject_Type.tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    PyObject_SetAttr(inst, SWIG_This(), swig_this);
    Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
#else
    PyObject *dict = PyDict_New();
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst;
  PyObject *dict = PyDict_New();
  PyDict_SetItem(dict, SWIG_This(), swig_this);
  inst = PyInstance_NewRaw(data->newargs, dict);
  Py_DECREF(dict);
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args,(char*)"swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  if (!ptr) {
    return SWIG_Py_Void();
  } else {
    int own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
    PyObject *robj = SwigPyObject_New(ptr, type, own);
    SwigPyClientData *clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
    if (clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
      PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
      if (inst) {
	Py_DECREF(robj);
	robj = inst;
      }
    }
    return robj;
  }
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
SWIG_Python_DestroyModule(void *vptr)
{
  swig_module_info *swig_module = (swig_module_info *) vptr;
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} };/* Sentinel */

#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				   swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
  } else {
    swig_module_info *swig_module = SWIG_Python_GetModule();
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : (char*)"";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}


#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_BWAPI__AIModule swig_types[0]
#define SWIGTYPE_p_BWAPI__Bitmap swig_types[1]
#define SWIGTYPE_p_BWAPI__BitmapProxy swig_types[2]
#define SWIGTYPE_p_BWAPI__Bullet swig_types[3]
#define SWIGTYPE_p_BWAPI__BulletType swig_types[4]
#define SWIGTYPE_p_BWAPI__Color swig_types[5]
#define SWIGTYPE_p_BWAPI__DamageType swig_types[6]
#define SWIGTYPE_p_BWAPI__Error swig_types[7]
#define SWIGTYPE_p_BWAPI__Event swig_types[8]
#define SWIGTYPE_p_BWAPI__ExplosionType swig_types[9]
#define SWIGTYPE_p_BWAPI__Force swig_types[10]
#define SWIGTYPE_p_BWAPI__Game swig_types[11]
#define SWIGTYPE_p_BWAPI__GameType swig_types[12]
#define SWIGTYPE_p_BWAPI__Order swig_types[13]
#define SWIGTYPE_p_BWAPI__Player swig_types[14]
#define SWIGTYPE_p_BWAPI__PlayerType swig_types[15]
#define SWIGTYPE_p_BWAPI__Position swig_types[16]
#define SWIGTYPE_p_BWAPI__Race swig_types[17]
#define SWIGTYPE_p_BWAPI__TechType swig_types[18]
#define SWIGTYPE_p_BWAPI__TilePosition swig_types[19]
#define SWIGTYPE_p_BWAPI__Unit swig_types[20]
#define SWIGTYPE_p_BWAPI__UnitCommand swig_types[21]
#define SWIGTYPE_p_BWAPI__UnitCommandType swig_types[22]
#define SWIGTYPE_p_BWAPI__UnitSizeType swig_types[23]
#define SWIGTYPE_p_BWAPI__UnitType swig_types[24]
#define SWIGTYPE_p_BWAPI__UpgradeType swig_types[25]
#define SWIGTYPE_p_BWAPI__WeaponType swig_types[26]
#define SWIGTYPE_p_BWTA__BaseLocation swig_types[27]
#define SWIGTYPE_p_BWTA__Chokepoint swig_types[28]
#define SWIGTYPE_p_BWTA__Region swig_types[29]
#define SWIGTYPE_p_BulletType swig_types[30]
#define SWIGTYPE_p_Chokepoint swig_types[31]
#define SWIGTYPE_p_EventType__Enum swig_types[32]
#define SWIGTYPE_p_GameType swig_types[33]
#define SWIGTYPE_p_Key swig_types[34]
#define SWIGTYPE_p_ListWrapperT_BWAPI__Force_p_t swig_types[35]
#define SWIGTYPE_p_ListWrapperT_BWAPI__Player_p_t swig_types[36]
#define SWIGTYPE_p_ListWrapperT_BWAPI__Unit_p_t swig_types[37]
#define SWIGTYPE_p_ListWrapperT_BWTA__BaseLocation_p_t swig_types[38]
#define SWIGTYPE_p_ListWrapperT_BWTA__Chokepoint_p_t swig_types[39]
#define SWIGTYPE_p_ListWrapperT_BWTA__Region_p_t swig_types[40]
#define SWIGTYPE_p_ListWrapper_PtrNextT_BWAPI__Position_t swig_types[41]
#define SWIGTYPE_p_ListWrapper_PtrNextT_BWAPI__TilePosition_t swig_types[42]
#define SWIGTYPE_p_ListWrapper_PtrNextT_BWAPI__UnitType_t swig_types[43]
#define SWIGTYPE_p_MouseButton swig_types[44]
#define SWIGTYPE_p_PlayerType swig_types[45]
#define SWIGTYPE_p_Position swig_types[46]
#define SWIGTYPE_p_Race swig_types[47]
#define SWIGTYPE_p_RectangleArrayT_double_t swig_types[48]
#define SWIGTYPE_p_Region swig_types[49]
#define SWIGTYPE_p_SetWrapperT_BWAPI__Force_p_t swig_types[50]
#define SWIGTYPE_p_SetWrapperT_BWAPI__Player_p_t swig_types[51]
#define SWIGTYPE_p_SetWrapperT_BWAPI__Unit_p_t swig_types[52]
#define SWIGTYPE_p_SetWrapperT_BWTA__BaseLocation_p_t swig_types[53]
#define SWIGTYPE_p_SetWrapperT_BWTA__Chokepoint_p_t swig_types[54]
#define SWIGTYPE_p_SetWrapperT_BWTA__Region_p_t swig_types[55]
#define SWIGTYPE_p_SetWrapper_PtrNextT_BWAPI__Position_t swig_types[56]
#define SWIGTYPE_p_SetWrapper_PtrNextT_BWAPI__TilePosition_t swig_types[57]
#define SWIGTYPE_p_SetWrapper_PtrNextT_BWAPI__UnitType_t swig_types[58]
#define SWIGTYPE_p_TechType swig_types[59]
#define SWIGTYPE_p_TilePosition swig_types[60]
#define SWIGTYPE_p_UnitCommand swig_types[61]
#define SWIGTYPE_p_UnitCommandType swig_types[62]
#define SWIGTYPE_p_UpgradeType swig_types[63]
#define SWIGTYPE_p_allocator_type swig_types[64]
#define SWIGTYPE_p_char swig_types[65]
#define SWIGTYPE_p_difference_type swig_types[66]
#define SWIGTYPE_p_p_PyObject swig_types[67]
#define SWIGTYPE_p_size_type swig_types[68]
#define SWIGTYPE_p_std__invalid_argument swig_types[69]
#define SWIGTYPE_p_std__listT_BWAPI__Event_t swig_types[70]
#define SWIGTYPE_p_std__listT_BWAPI__Force_p_t swig_types[71]
#define SWIGTYPE_p_std__listT_BWAPI__Player_p_t swig_types[72]
#define SWIGTYPE_p_std__listT_BWAPI__Position_t swig_types[73]
#define SWIGTYPE_p_std__listT_BWAPI__TilePosition_t swig_types[74]
#define SWIGTYPE_p_std__listT_BWAPI__UnitType_t swig_types[75]
#define SWIGTYPE_p_std__listT_BWAPI__Unit_p_t swig_types[76]
#define SWIGTYPE_p_std__listT_BWTA__BaseLocation_p_t swig_types[77]
#define SWIGTYPE_p_std__listT_BWTA__Chokepoint_p_t swig_types[78]
#define SWIGTYPE_p_std__listT_BWTA__Region_p_t swig_types[79]
#define SWIGTYPE_p_std__mapT_BWAPI__TilePosition_double_t swig_types[80]
#define SWIGTYPE_p_std__pairT_BWAPI__TilePosition_double_t swig_types[81]
#define SWIGTYPE_p_std__setT_BWAPI__BulletType_t swig_types[82]
#define SWIGTYPE_p_std__setT_BWAPI__Bullet_p_t swig_types[83]
#define SWIGTYPE_p_std__setT_BWAPI__DamageType_t swig_types[84]
#define SWIGTYPE_p_std__setT_BWAPI__Error_t swig_types[85]
#define SWIGTYPE_p_std__setT_BWAPI__ExplosionType_t swig_types[86]
#define SWIGTYPE_p_std__setT_BWAPI__Force_p_t swig_types[87]
#define SWIGTYPE_p_std__setT_BWAPI__GameType_t swig_types[88]
#define SWIGTYPE_p_std__setT_BWAPI__Order_t swig_types[89]
#define SWIGTYPE_p_std__setT_BWAPI__PlayerType_t swig_types[90]
#define SWIGTYPE_p_std__setT_BWAPI__Player_p_t swig_types[91]
#define SWIGTYPE_p_std__setT_BWAPI__Position_t swig_types[92]
#define SWIGTYPE_p_std__setT_BWAPI__Race_t swig_types[93]
#define SWIGTYPE_p_std__setT_BWAPI__TechType_t swig_types[94]
#define SWIGTYPE_p_std__setT_BWAPI__TilePosition_t swig_types[95]
#define SWIGTYPE_p_std__setT_BWAPI__UnitCommandType_t swig_types[96]
#define SWIGTYPE_p_std__setT_BWAPI__UnitSizeType_t swig_types[97]
#define SWIGTYPE_p_std__setT_BWAPI__UnitType_t swig_types[98]
#define SWIGTYPE_p_std__setT_BWAPI__Unit_p_t swig_types[99]
#define SWIGTYPE_p_std__setT_BWAPI__UpgradeType_t swig_types[100]
#define SWIGTYPE_p_std__setT_BWAPI__WeaponType_t swig_types[101]
#define SWIGTYPE_p_std__setT_BWTA__BaseLocation_p_t swig_types[102]
#define SWIGTYPE_p_std__setT_BWTA__Chokepoint_p_t swig_types[103]
#define SWIGTYPE_p_std__setT_BWTA__Region_p_t swig_types[104]
#define SWIGTYPE_p_std__setT_BaseLocation_p_t swig_types[105]
#define SWIGTYPE_p_std__setT_Chokepoint_p_t swig_types[106]
#define SWIGTYPE_p_std__setT_Position_t swig_types[107]
#define SWIGTYPE_p_std__setT_Region_p_t swig_types[108]
#define SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t swig_types[109]
#define SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t__allocator_type swig_types[110]
#define SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t__value_type swig_types[111]
#define SWIGTYPE_p_std__vectorT_BWAPI__TilePosition_std__allocatorT_BWAPI__TilePosition_t_t swig_types[112]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[113]
#define SWIGTYPE_p_unsigned_char swig_types[114]
#define SWIGTYPE_p_value_type swig_types[115]
#define SWIGTYPE_p_void swig_types[116]
static swig_type_info *swig_types[118];
static swig_module_info swig_module = {swig_types, 117, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _pybw_swig.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__pybw_swig

#else
#  define SWIG_init    init_pybw_swig

#endif
#define SWIG_name    "_pybw_swig"

#define SWIGVERSION 0x020001 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        Py_XINCREF(_obj);
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <string>


#include <iostream>


#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>
#include <stdexcept>

  
namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <stdexcept>


#include <algorithm>


#include <vector>


#include "stdpair_wrapper.h"
#include "stdmap_wrapper.h"
#include "stdset_wrapper.h"
#include "stdlist_wrapper.h"
//#include "vector_wrapper.h"




SWIGINTERNINLINE PyObject *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


#include "BWAPI.h"

using namespace BWAPI;


namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>: public binary_function<PyObject *, PyObject *, bool>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>: public binary_function<swig::SwigPtr_PyObject, swig::SwigPtr_PyObject, bool>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>: public binary_function<swig::SwigVar_PyObject, swig::SwigVar_PyObject, bool>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);

    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    size_t ssize = jj - ii;
    if (ssize <= v.size()) {
      typename Sequence::iterator sb = self->begin();
      typename InputSeq::const_iterator vmid = v.begin();
      std::advance(sb,ii);
      std::advance(vmid, jj - ii);
      self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
    } else {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
      self->insert(sb, v.begin(), v.end());
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }
}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    int _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


  namespace swig {
    template <>  struct traits<BWAPI::Position > {
      typedef pointer_category category;
      static const char* type_name() { return"BWAPI::Position"; }
    };
  }


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	if (::SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_NewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((int)size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<BWAPI::Position, std::allocator< BWAPI::Position > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "BWAPI::Position" "," "std::allocator< BWAPI::Position >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_BWAPI_Position_Sg__iterator(std::vector< BWAPI::Position > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_BWAPI_Position_Sg____nonzero__(std::vector< BWAPI::Position > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_BWAPI_Position_Sg____bool__(std::vector< BWAPI::Position > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< BWAPI::Position >::size_type std_vector_Sl_BWAPI_Position_Sg____len__(std::vector< BWAPI::Position > const *self){
      return self->size();
    }

SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}

SWIGINTERN std::vector< BWAPI::Position >::value_type std_vector_Sl_BWAPI_Position_Sg__pop(std::vector< BWAPI::Position > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<BWAPI::Position,std::allocator< BWAPI::Position > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< BWAPI::Position,std::allocator< BWAPI::Position > > *std_vector_Sl_BWAPI_Position_Sg____getslice__(std::vector< BWAPI::Position > *self,std::vector< BWAPI::Position >::difference_type i,std::vector< BWAPI::Position >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_BWAPI_Position_Sg____setslice__(std::vector< BWAPI::Position > *self,std::vector< BWAPI::Position >::difference_type i,std::vector< BWAPI::Position >::difference_type j,std::vector< BWAPI::Position,std::allocator< BWAPI::Position > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_BWAPI_Position_Sg____delslice__(std::vector< BWAPI::Position > *self,std::vector< BWAPI::Position >::difference_type i,std::vector< BWAPI::Position >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_BWAPI_Position_Sg____delitem____SWIG_0(std::vector< BWAPI::Position > *self,std::vector< BWAPI::Position >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< BWAPI::Position,std::allocator< BWAPI::Position > > *std_vector_Sl_BWAPI_Position_Sg____getitem____SWIG_0(std::vector< BWAPI::Position > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_BWAPI_Position_Sg____setitem____SWIG_0(std::vector< BWAPI::Position > *self,PySliceObject *slice,std::vector< BWAPI::Position,std::allocator< BWAPI::Position > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_BWAPI_Position_Sg____delitem____SWIG_1(std::vector< BWAPI::Position > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< BWAPI::Position >::value_type const &std_vector_Sl_BWAPI_Position_Sg____getitem____SWIG_1(std::vector< BWAPI::Position > const *self,std::vector< BWAPI::Position >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_BWAPI_Position_Sg____setitem____SWIG_1(std::vector< BWAPI::Position > *self,std::vector< BWAPI::Position >::difference_type i,std::vector< BWAPI::Position >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_BWAPI_Position_Sg__append(std::vector< BWAPI::Position > *self,std::vector< BWAPI::Position >::value_type const &x){
      self->push_back(x);
    }

#include "BWTA.h"

using namespace BWTA;



#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


  #define SWIG_From_double   PyFloat_FromDouble 


    SetWrapper<BWTA::Region*>* TA_getRegions()
    {
        return new SetWrapper<BWTA::Region*>( BWTA::getRegions() );
    }
    SetWrapper<BWTA::Chokepoint*>* TA_getChokepoints()
    {
        return new SetWrapper<BWTA::Chokepoint*>( BWTA::getChokepoints() );
    }
    SetWrapper<BWTA::BaseLocation*>* TA_getBaseLocations()
    {
        return new SetWrapper<BWTA::BaseLocation*>( BWTA::getBaseLocations() );
    }
    SetWrapper<BWTA::BaseLocation*>* TA_getStartLocations()
    {
        return new SetWrapper<BWTA::BaseLocation*>( BWTA::getStartLocations() );
    }



#include "helper.h"

using namespace BWTA;



// Define our own init function, with a simple declaration.
// Declare SWIG_init because it's not declared yet.
#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void);

void python_wrap_init()
{
	SWIG_init();
}


// Used for event-dispatcher callbacks
PyObject* _getSwigUnit(BWAPI::Unit* unit)
{
  return SWIG_NewPointerObj(SWIG_as_voidptr(unit), SWIGTYPE_p_BWAPI__Unit, 0 );
}

PyObject* _getSwigPlayer(BWAPI::Player* player)
{
  return SWIG_NewPointerObj(SWIG_as_voidptr(player), SWIGTYPE_p_BWAPI__Player, 0 );
}

PyObject* _getSwigPosition(BWAPI::Position* position)
{
  return SWIG_NewPointerObj(SWIG_as_voidptr(position), SWIGTYPE_p_BWAPI__Position, 0 );
}




	#include "BWAPI/AIModule.h"
	#include "BWAPI/Bitmap.h"
	#include "BWAPI/Bullet.h"
	#include "BWAPI/BulletType.h"
	#include "BWAPI/Client.h"
	#include "BWAPI/Color.h"
	#include "BWAPI/Constants.h"
	#include "BWAPI/CoordinateType.h"
	#include "BWAPI/DamageType.h"
	#include "BWAPI/Error.h"
	#include "BWAPI/Event.h"
	#include "BWAPI/EventType.h"
	#include "BWAPI/ExplosionType.h"
	#include "BWAPI/Flag.h"
	#include "BWAPI/Force.h"
	#include "BWAPI/Game.h"
	#include "BWAPI/GameType.h"
	#include "BWAPI/Input.h"
	#include "BWAPI/Latency.h"
	#include "BWAPI/Order.h"
	#include "BWAPI/Player.h"
	#include "BWAPI/PlayerType.h"
	#include "BWAPI/Position.h"
	#include "BWAPI/Race.h"
	#include "BWAPI/TechType.h"
	#include "BWAPI/TilePosition.h"
	#include "BWAPI/Unit.h"
	#include "BWAPI/UnitCommand.h"
	#include "BWAPI/UnitCommandType.h"
	#include "BWAPI/UnitSizeType.h"
	#include "BWAPI/UnitType.h"
	#include "BWAPI/UpgradeType.h"
	#include "BWAPI/WeaponType.h"


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
  if (PyUnicode_Check(obj))
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    PyBytes_AsStringAndSize(obj, &cstr, &len);
    if(alloc) *alloc = SWIG_NEWOBJ;
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
        #if PY_VERSION_HEX>=0x03000000
        assert(0); /* Should never reach here in Python 3 */
        #endif
	*cptr = SWIG_Python_str_AsChar(obj);
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (PyObject * obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_short  (unsigned short value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      return PyUnicode_FromStringAndSize(carray, static_cast< int >(size));
#else
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  if (s.size()) {
    return SWIG_FromCharPtrAndSize(s.data(), s.size());
  } else {
    return SWIG_FromCharPtrAndSize(s.c_str(), 0);
  }
}

SWIGINTERN SetWrapper< BWAPI::Player * > *BWAPI_Force_getPlayers(BWAPI::Force *self){
        return new SetWrapper<BWAPI::Player*>( self->getPlayers() );
    }



SWIGINTERN SetWrapper< BWAPI::Unit * > *BWAPI_Game_getAllUnits(BWAPI::Game *self){
        return new SetWrapper<BWAPI::Unit*>( self->getAllUnits() );
    }
SWIGINTERN SetWrapper< BWAPI::Unit * > *BWAPI_Game_getMinerals(BWAPI::Game *self){
        return new SetWrapper<BWAPI::Unit*>( self->getMinerals() );
    }
SWIGINTERN SetWrapper< BWAPI::Unit * > *BWAPI_Game_getGeysers(BWAPI::Game *self){
        return new SetWrapper<BWAPI::Unit*>( self->getGeysers() );
    }
SWIGINTERN SetWrapper< BWAPI::Unit * > *BWAPI_Game_getNeutralUnits(BWAPI::Game *self){
        return new SetWrapper<BWAPI::Unit*>( self->getNeutralUnits() );
    }
SWIGINTERN SetWrapper< BWAPI::Unit * > *BWAPI_Game_getStaticMinerals(BWAPI::Game *self){
        return new SetWrapper<BWAPI::Unit*>( self->getStaticMinerals() );
    }
SWIGINTERN SetWrapper< BWAPI::Unit * > *BWAPI_Game_getStaticGeysers(BWAPI::Game *self){
        return new SetWrapper<BWAPI::Unit*>( self->getStaticGeysers() );
    }
SWIGINTERN SetWrapper< BWAPI::Unit * > *BWAPI_Game_getStaticNeutralUnits(BWAPI::Game *self){
        return new SetWrapper<BWAPI::Unit*>( self->getStaticNeutralUnits() );
    }
SWIGINTERN SetWrapper< BWAPI::Unit * > *BWAPI_Game_getSelectedUnits(BWAPI::Game *self){
        return new SetWrapper<BWAPI::Unit*>( self->getSelectedUnits() );
    }
SWIGINTERN SetWrapper< BWAPI::Player * > *BWAPI_Game_getPlayers(BWAPI::Game *self){
        return new SetWrapper<BWAPI::Player*>( self->getPlayers() );
    }
SWIGINTERN SetWrapper< BWAPI::Force * > *BWAPI_Game_getForces(BWAPI::Game *self){
        return new SetWrapper<BWAPI::Force*>( self->getForces() );
    }
SWIGINTERN SetWrapper< BWAPI::Unit * > *BWAPI_Game_unitsOnTile(BWAPI::Game *self,int x,int y){
        return new SetWrapper<BWAPI::Unit*>( self->unitsOnTile(x, y) );
    }
SWIGINTERN SetWrapper_PtrNext< BWAPI::TilePosition > *BWAPI_Game_getStartLocations(BWAPI::Game *self){
        return new SetWrapper_PtrNext<BWAPI::TilePosition>( self->getStartLocations() );
    }
SWIGINTERN bool BWAPI_Game_canBuildHere(BWAPI::Game *self,BWAPI::Unit *builder,BWAPI::TilePosition position,BWAPI::UnitType type){
        return self->canBuildHere(builder, position, type);
    }
SWIGINTERN SetWrapper< BWAPI::Unit * > *BWAPI_Player_getUnits(BWAPI::Player *self){
        return new SetWrapper<BWAPI::Unit*>( self->getUnits() );
    }
SWIGINTERN BWAPI::Race BWAPI_Player_getRace(BWAPI::Player *self){
        return self->getRace();
    }
SWIGINTERN BWAPI::TilePosition BWAPI_Player_getStartLocation(BWAPI::Player *self){
        return self->getStartLocation();
    }
SWIGINTERN int BWAPI_Position_getX(BWAPI::Position *self){
        return self->x();
    }
SWIGINTERN int BWAPI_Position_getY(BWAPI::Position *self){
        return self->y();
    }
SWIGINTERN int BWAPI_TilePosition_getX(BWAPI::TilePosition *self){
        return self->x();
    }
SWIGINTERN int BWAPI_TilePosition_getY(BWAPI::TilePosition *self){
        return self->y();
    }
SWIGINTERN SetWrapper< BWAPI::Unit * > *BWAPI_Unit_getLoadedUnits(BWAPI::Unit *self){
        return new SetWrapper<BWAPI::Unit*>( self->getLoadedUnits() );
    }
SWIGINTERN ListWrapper_PtrNext< BWAPI::UnitType > *BWAPI_Unit_getTrainingQueue(BWAPI::Unit *self){
        return new ListWrapper_PtrNext<BWAPI::UnitType>( self->getTrainingQueue() );
    }
SWIGINTERN BWAPI::UnitType *BWAPI_UnitType_whatBuilds(BWAPI::UnitType *self){
        return new UnitType(self->whatBuilds().first);
    }
#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SwigPyIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_incr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    incr(swig::SwigPyIterator *,size_t)\n"
    "    incr(swig::SwigPyIterator *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_decr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_decr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    decr(swig::SwigPyIterator *,size_t)\n"
    "    decr(swig::SwigPyIterator *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___next__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_previous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_advance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RegionSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< BWTA::Region * > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SetWrapper< BWTA::Region * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RegionSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__setT_BWTA__Region_p_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RegionSet" "', argument " "1"" of type '" "std::set< BWTA::Region * > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RegionSet" "', argument " "1"" of type '" "std::set< BWTA::Region * > const &""'"); 
  }
  arg1 = reinterpret_cast< std::set< BWTA::Region * > * >(argp1);
  result = (SetWrapper< BWTA::Region * > *)new SetWrapper< BWTA::Region * >((std::set< BWTA::Region * > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapperT_BWTA__Region_p_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RegionSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper< BWTA::Region * > *arg1 = (SetWrapper< BWTA::Region * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RegionSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapperT_BWTA__Region_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RegionSet" "', argument " "1"" of type '" "SetWrapper< BWTA::Region * > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper< BWTA::Region * > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionSet___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper< BWTA::Region * > *arg1 = (SetWrapper< BWTA::Region * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RegionSet___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapperT_BWTA__Region_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionSet___len__" "', argument " "1"" of type '" "SetWrapper< BWTA::Region * > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper< BWTA::Region * > * >(argp1);
  result = (int)(arg1)->__len__();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionSet___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper< BWTA::Region * > *arg1 = (SetWrapper< BWTA::Region * > *) 0 ;
  BWTA::Region *arg2 = (BWTA::Region *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RegionSet___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapperT_BWTA__Region_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionSet___contains__" "', argument " "1"" of type '" "SetWrapper< BWTA::Region * > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper< BWTA::Region * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWTA__Region, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegionSet___contains__" "', argument " "2"" of type '" "BWTA::Region *""'"); 
  }
  arg2 = reinterpret_cast< BWTA::Region * >(argp2);
  result = (bool)(arg1)->__contains__(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionSet___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper< BWTA::Region * > *arg1 = (SetWrapper< BWTA::Region * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SetWrapper< BWTA::Region * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RegionSet___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapperT_BWTA__Region_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionSet___iter__" "', argument " "1"" of type '" "SetWrapper< BWTA::Region * > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper< BWTA::Region * > * >(argp1);
  result = (SetWrapper< BWTA::Region * > *)(arg1)->__iter__();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapperT_BWTA__Region_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionSet_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper< BWTA::Region * > *arg1 = (SetWrapper< BWTA::Region * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWTA::Region *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RegionSet_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapperT_BWTA__Region_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionSet_next" "', argument " "1"" of type '" "SetWrapper< BWTA::Region * > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper< BWTA::Region * > * >(argp1);
  {
    result = (BWTA::Region *)(arg1)->next();
    if (!result) {
      PyErr_SetString(PyExc_StopIteration,"End of set");
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWTA__Region, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RegionSet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SetWrapperT_BWTA__Region_p_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ChokepointSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< BWTA::Chokepoint * > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SetWrapper< BWTA::Chokepoint * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ChokepointSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__setT_BWTA__Chokepoint_p_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ChokepointSet" "', argument " "1"" of type '" "std::set< BWTA::Chokepoint * > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ChokepointSet" "', argument " "1"" of type '" "std::set< BWTA::Chokepoint * > const &""'"); 
  }
  arg1 = reinterpret_cast< std::set< BWTA::Chokepoint * > * >(argp1);
  result = (SetWrapper< BWTA::Chokepoint * > *)new SetWrapper< BWTA::Chokepoint * >((std::set< BWTA::Chokepoint * > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapperT_BWTA__Chokepoint_p_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ChokepointSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper< BWTA::Chokepoint * > *arg1 = (SetWrapper< BWTA::Chokepoint * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ChokepointSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapperT_BWTA__Chokepoint_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ChokepointSet" "', argument " "1"" of type '" "SetWrapper< BWTA::Chokepoint * > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper< BWTA::Chokepoint * > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChokepointSet___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper< BWTA::Chokepoint * > *arg1 = (SetWrapper< BWTA::Chokepoint * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ChokepointSet___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapperT_BWTA__Chokepoint_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChokepointSet___len__" "', argument " "1"" of type '" "SetWrapper< BWTA::Chokepoint * > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper< BWTA::Chokepoint * > * >(argp1);
  result = (int)(arg1)->__len__();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChokepointSet___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper< BWTA::Chokepoint * > *arg1 = (SetWrapper< BWTA::Chokepoint * > *) 0 ;
  BWTA::Chokepoint *arg2 = (BWTA::Chokepoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ChokepointSet___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapperT_BWTA__Chokepoint_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChokepointSet___contains__" "', argument " "1"" of type '" "SetWrapper< BWTA::Chokepoint * > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper< BWTA::Chokepoint * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWTA__Chokepoint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ChokepointSet___contains__" "', argument " "2"" of type '" "BWTA::Chokepoint *""'"); 
  }
  arg2 = reinterpret_cast< BWTA::Chokepoint * >(argp2);
  result = (bool)(arg1)->__contains__(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChokepointSet___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper< BWTA::Chokepoint * > *arg1 = (SetWrapper< BWTA::Chokepoint * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SetWrapper< BWTA::Chokepoint * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ChokepointSet___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapperT_BWTA__Chokepoint_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChokepointSet___iter__" "', argument " "1"" of type '" "SetWrapper< BWTA::Chokepoint * > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper< BWTA::Chokepoint * > * >(argp1);
  result = (SetWrapper< BWTA::Chokepoint * > *)(arg1)->__iter__();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapperT_BWTA__Chokepoint_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChokepointSet_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper< BWTA::Chokepoint * > *arg1 = (SetWrapper< BWTA::Chokepoint * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWTA::Chokepoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ChokepointSet_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapperT_BWTA__Chokepoint_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChokepointSet_next" "', argument " "1"" of type '" "SetWrapper< BWTA::Chokepoint * > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper< BWTA::Chokepoint * > * >(argp1);
  {
    result = (BWTA::Chokepoint *)(arg1)->next();
    if (!result) {
      PyErr_SetString(PyExc_StopIteration,"End of set");
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWTA__Chokepoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ChokepointSet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SetWrapperT_BWTA__Chokepoint_p_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BaseLocationSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< BWTA::BaseLocation * > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SetWrapper< BWTA::BaseLocation * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BaseLocationSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__setT_BWTA__BaseLocation_p_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BaseLocationSet" "', argument " "1"" of type '" "std::set< BWTA::BaseLocation * > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BaseLocationSet" "', argument " "1"" of type '" "std::set< BWTA::BaseLocation * > const &""'"); 
  }
  arg1 = reinterpret_cast< std::set< BWTA::BaseLocation * > * >(argp1);
  result = (SetWrapper< BWTA::BaseLocation * > *)new SetWrapper< BWTA::BaseLocation * >((std::set< BWTA::BaseLocation * > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapperT_BWTA__BaseLocation_p_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BaseLocationSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper< BWTA::BaseLocation * > *arg1 = (SetWrapper< BWTA::BaseLocation * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BaseLocationSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapperT_BWTA__BaseLocation_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BaseLocationSet" "', argument " "1"" of type '" "SetWrapper< BWTA::BaseLocation * > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper< BWTA::BaseLocation * > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseLocationSet___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper< BWTA::BaseLocation * > *arg1 = (SetWrapper< BWTA::BaseLocation * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseLocationSet___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapperT_BWTA__BaseLocation_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseLocationSet___len__" "', argument " "1"" of type '" "SetWrapper< BWTA::BaseLocation * > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper< BWTA::BaseLocation * > * >(argp1);
  result = (int)(arg1)->__len__();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseLocationSet___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper< BWTA::BaseLocation * > *arg1 = (SetWrapper< BWTA::BaseLocation * > *) 0 ;
  BWTA::BaseLocation *arg2 = (BWTA::BaseLocation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BaseLocationSet___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapperT_BWTA__BaseLocation_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseLocationSet___contains__" "', argument " "1"" of type '" "SetWrapper< BWTA::BaseLocation * > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper< BWTA::BaseLocation * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWTA__BaseLocation, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BaseLocationSet___contains__" "', argument " "2"" of type '" "BWTA::BaseLocation *""'"); 
  }
  arg2 = reinterpret_cast< BWTA::BaseLocation * >(argp2);
  result = (bool)(arg1)->__contains__(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseLocationSet___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper< BWTA::BaseLocation * > *arg1 = (SetWrapper< BWTA::BaseLocation * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SetWrapper< BWTA::BaseLocation * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseLocationSet___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapperT_BWTA__BaseLocation_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseLocationSet___iter__" "', argument " "1"" of type '" "SetWrapper< BWTA::BaseLocation * > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper< BWTA::BaseLocation * > * >(argp1);
  result = (SetWrapper< BWTA::BaseLocation * > *)(arg1)->__iter__();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapperT_BWTA__BaseLocation_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseLocationSet_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper< BWTA::BaseLocation * > *arg1 = (SetWrapper< BWTA::BaseLocation * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWTA::BaseLocation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseLocationSet_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapperT_BWTA__BaseLocation_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseLocationSet_next" "', argument " "1"" of type '" "SetWrapper< BWTA::BaseLocation * > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper< BWTA::BaseLocation * > * >(argp1);
  {
    result = (BWTA::BaseLocation *)(arg1)->next();
    if (!result) {
      PyErr_SetString(PyExc_StopIteration,"End of set");
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWTA__BaseLocation, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BaseLocationSet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SetWrapperT_BWTA__BaseLocation_p_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PlayerSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< BWAPI::Player * > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SetWrapper< BWAPI::Player * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PlayerSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__setT_BWAPI__Player_p_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PlayerSet" "', argument " "1"" of type '" "std::set< BWAPI::Player * > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PlayerSet" "', argument " "1"" of type '" "std::set< BWAPI::Player * > const &""'"); 
  }
  arg1 = reinterpret_cast< std::set< BWAPI::Player * > * >(argp1);
  result = (SetWrapper< BWAPI::Player * > *)new SetWrapper< BWAPI::Player * >((std::set< BWAPI::Player * > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapperT_BWAPI__Player_p_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PlayerSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper< BWAPI::Player * > *arg1 = (SetWrapper< BWAPI::Player * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PlayerSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapperT_BWAPI__Player_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PlayerSet" "', argument " "1"" of type '" "SetWrapper< BWAPI::Player * > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper< BWAPI::Player * > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerSet___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper< BWAPI::Player * > *arg1 = (SetWrapper< BWAPI::Player * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PlayerSet___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapperT_BWAPI__Player_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerSet___len__" "', argument " "1"" of type '" "SetWrapper< BWAPI::Player * > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper< BWAPI::Player * > * >(argp1);
  result = (int)(arg1)->__len__();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerSet___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper< BWAPI::Player * > *arg1 = (SetWrapper< BWAPI::Player * > *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PlayerSet___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapperT_BWAPI__Player_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerSet___contains__" "', argument " "1"" of type '" "SetWrapper< BWAPI::Player * > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper< BWAPI::Player * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PlayerSet___contains__" "', argument " "2"" of type '" "BWAPI::Player *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Player * >(argp2);
  result = (bool)(arg1)->__contains__(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerSet___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper< BWAPI::Player * > *arg1 = (SetWrapper< BWAPI::Player * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SetWrapper< BWAPI::Player * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PlayerSet___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapperT_BWAPI__Player_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerSet___iter__" "', argument " "1"" of type '" "SetWrapper< BWAPI::Player * > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper< BWAPI::Player * > * >(argp1);
  result = (SetWrapper< BWAPI::Player * > *)(arg1)->__iter__();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapperT_BWAPI__Player_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerSet_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper< BWAPI::Player * > *arg1 = (SetWrapper< BWAPI::Player * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Player *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PlayerSet_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapperT_BWAPI__Player_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerSet_next" "', argument " "1"" of type '" "SetWrapper< BWAPI::Player * > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper< BWAPI::Player * > * >(argp1);
  {
    result = (BWAPI::Player *)(arg1)->next();
    if (!result) {
      PyErr_SetString(PyExc_StopIteration,"End of set");
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PlayerSet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SetWrapperT_BWAPI__Player_p_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_UnitSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< BWAPI::Unit * > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SetWrapper< BWAPI::Unit * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UnitSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__setT_BWAPI__Unit_p_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UnitSet" "', argument " "1"" of type '" "std::set< BWAPI::Unit * > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UnitSet" "', argument " "1"" of type '" "std::set< BWAPI::Unit * > const &""'"); 
  }
  arg1 = reinterpret_cast< std::set< BWAPI::Unit * > * >(argp1);
  result = (SetWrapper< BWAPI::Unit * > *)new SetWrapper< BWAPI::Unit * >((std::set< BWAPI::Unit * > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapperT_BWAPI__Unit_p_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UnitSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper< BWAPI::Unit * > *arg1 = (SetWrapper< BWAPI::Unit * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_UnitSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapperT_BWAPI__Unit_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UnitSet" "', argument " "1"" of type '" "SetWrapper< BWAPI::Unit * > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper< BWAPI::Unit * > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitSet___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper< BWAPI::Unit * > *arg1 = (SetWrapper< BWAPI::Unit * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitSet___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapperT_BWAPI__Unit_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitSet___len__" "', argument " "1"" of type '" "SetWrapper< BWAPI::Unit * > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper< BWAPI::Unit * > * >(argp1);
  result = (int)(arg1)->__len__();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitSet___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper< BWAPI::Unit * > *arg1 = (SetWrapper< BWAPI::Unit * > *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitSet___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapperT_BWAPI__Unit_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitSet___contains__" "', argument " "1"" of type '" "SetWrapper< BWAPI::Unit * > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper< BWAPI::Unit * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitSet___contains__" "', argument " "2"" of type '" "BWAPI::Unit *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Unit * >(argp2);
  result = (bool)(arg1)->__contains__(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitSet___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper< BWAPI::Unit * > *arg1 = (SetWrapper< BWAPI::Unit * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SetWrapper< BWAPI::Unit * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitSet___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapperT_BWAPI__Unit_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitSet___iter__" "', argument " "1"" of type '" "SetWrapper< BWAPI::Unit * > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper< BWAPI::Unit * > * >(argp1);
  result = (SetWrapper< BWAPI::Unit * > *)(arg1)->__iter__();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapperT_BWAPI__Unit_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitSet_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper< BWAPI::Unit * > *arg1 = (SetWrapper< BWAPI::Unit * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Unit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitSet_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapperT_BWAPI__Unit_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitSet_next" "', argument " "1"" of type '" "SetWrapper< BWAPI::Unit * > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper< BWAPI::Unit * > * >(argp1);
  {
    result = (BWAPI::Unit *)(arg1)->next();
    if (!result) {
      PyErr_SetString(PyExc_StopIteration,"End of set");
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UnitSet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SetWrapperT_BWAPI__Unit_p_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ForceSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< BWAPI::Force * > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SetWrapper< BWAPI::Force * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ForceSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__setT_BWAPI__Force_p_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ForceSet" "', argument " "1"" of type '" "std::set< BWAPI::Force * > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ForceSet" "', argument " "1"" of type '" "std::set< BWAPI::Force * > const &""'"); 
  }
  arg1 = reinterpret_cast< std::set< BWAPI::Force * > * >(argp1);
  result = (SetWrapper< BWAPI::Force * > *)new SetWrapper< BWAPI::Force * >((std::set< BWAPI::Force * > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapperT_BWAPI__Force_p_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ForceSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper< BWAPI::Force * > *arg1 = (SetWrapper< BWAPI::Force * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ForceSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapperT_BWAPI__Force_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ForceSet" "', argument " "1"" of type '" "SetWrapper< BWAPI::Force * > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper< BWAPI::Force * > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ForceSet___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper< BWAPI::Force * > *arg1 = (SetWrapper< BWAPI::Force * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ForceSet___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapperT_BWAPI__Force_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForceSet___len__" "', argument " "1"" of type '" "SetWrapper< BWAPI::Force * > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper< BWAPI::Force * > * >(argp1);
  result = (int)(arg1)->__len__();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ForceSet___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper< BWAPI::Force * > *arg1 = (SetWrapper< BWAPI::Force * > *) 0 ;
  BWAPI::Force *arg2 = (BWAPI::Force *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ForceSet___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapperT_BWAPI__Force_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForceSet___contains__" "', argument " "1"" of type '" "SetWrapper< BWAPI::Force * > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper< BWAPI::Force * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Force, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ForceSet___contains__" "', argument " "2"" of type '" "BWAPI::Force *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Force * >(argp2);
  result = (bool)(arg1)->__contains__(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ForceSet___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper< BWAPI::Force * > *arg1 = (SetWrapper< BWAPI::Force * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SetWrapper< BWAPI::Force * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ForceSet___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapperT_BWAPI__Force_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForceSet___iter__" "', argument " "1"" of type '" "SetWrapper< BWAPI::Force * > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper< BWAPI::Force * > * >(argp1);
  result = (SetWrapper< BWAPI::Force * > *)(arg1)->__iter__();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapperT_BWAPI__Force_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ForceSet_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper< BWAPI::Force * > *arg1 = (SetWrapper< BWAPI::Force * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Force *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ForceSet_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapperT_BWAPI__Force_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForceSet_next" "', argument " "1"" of type '" "SetWrapper< BWAPI::Force * > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper< BWAPI::Force * > * >(argp1);
  {
    result = (BWAPI::Force *)(arg1)->next();
    if (!result) {
      PyErr_SetString(PyExc_StopIteration,"End of set");
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Force, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ForceSet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SetWrapperT_BWAPI__Force_p_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PositionSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< BWAPI::Position > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SetWrapper_PtrNext< BWAPI::Position > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PositionSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__setT_BWAPI__Position_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PositionSet" "', argument " "1"" of type '" "std::set< BWAPI::Position > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PositionSet" "', argument " "1"" of type '" "std::set< BWAPI::Position > const &""'"); 
  }
  arg1 = reinterpret_cast< std::set< BWAPI::Position > * >(argp1);
  result = (SetWrapper_PtrNext< BWAPI::Position > *)new SetWrapper_PtrNext< BWAPI::Position >((std::set< BWAPI::Position > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapper_PtrNextT_BWAPI__Position_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PositionSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper_PtrNext< BWAPI::Position > *arg1 = (SetWrapper_PtrNext< BWAPI::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PositionSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapper_PtrNextT_BWAPI__Position_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PositionSet" "', argument " "1"" of type '" "SetWrapper_PtrNext< BWAPI::Position > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper_PtrNext< BWAPI::Position > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionSet___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper_PtrNext< BWAPI::Position > *arg1 = (SetWrapper_PtrNext< BWAPI::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PositionSet___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapper_PtrNextT_BWAPI__Position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSet___len__" "', argument " "1"" of type '" "SetWrapper_PtrNext< BWAPI::Position > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper_PtrNext< BWAPI::Position > * >(argp1);
  result = (int)(arg1)->__len__();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionSet___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper_PtrNext< BWAPI::Position > *arg1 = (SetWrapper_PtrNext< BWAPI::Position > *) 0 ;
  BWAPI::Position arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PositionSet___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapper_PtrNextT_BWAPI__Position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSet___contains__" "', argument " "1"" of type '" "SetWrapper_PtrNext< BWAPI::Position > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper_PtrNext< BWAPI::Position > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Position,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionSet___contains__" "', argument " "2"" of type '" "BWAPI::Position""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionSet___contains__" "', argument " "2"" of type '" "BWAPI::Position""'");
    } else {
      BWAPI::Position * temp = reinterpret_cast< BWAPI::Position * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->__contains__(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionSet___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper_PtrNext< BWAPI::Position > *arg1 = (SetWrapper_PtrNext< BWAPI::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SetWrapper_PtrNext< BWAPI::Position > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PositionSet___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapper_PtrNextT_BWAPI__Position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSet___iter__" "', argument " "1"" of type '" "SetWrapper_PtrNext< BWAPI::Position > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper_PtrNext< BWAPI::Position > * >(argp1);
  result = (SetWrapper_PtrNext< BWAPI::Position > *)(arg1)->__iter__();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapper_PtrNextT_BWAPI__Position_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionSet_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper_PtrNext< BWAPI::Position > *arg1 = (SetWrapper_PtrNext< BWAPI::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Position *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PositionSet_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapper_PtrNextT_BWAPI__Position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSet_next" "', argument " "1"" of type '" "SetWrapper_PtrNext< BWAPI::Position > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper_PtrNext< BWAPI::Position > * >(argp1);
  {
    result = (BWAPI::Position *)(arg1)->next();
    if (!result) {
      PyErr_SetString(PyExc_StopIteration,"End of set");
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Position, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PositionSet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SetWrapper_PtrNextT_BWAPI__Position_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TilePositionSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< BWAPI::TilePosition > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SetWrapper_PtrNext< BWAPI::TilePosition > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TilePositionSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__setT_BWAPI__TilePosition_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TilePositionSet" "', argument " "1"" of type '" "std::set< BWAPI::TilePosition > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TilePositionSet" "', argument " "1"" of type '" "std::set< BWAPI::TilePosition > const &""'"); 
  }
  arg1 = reinterpret_cast< std::set< BWAPI::TilePosition > * >(argp1);
  result = (SetWrapper_PtrNext< BWAPI::TilePosition > *)new SetWrapper_PtrNext< BWAPI::TilePosition >((std::set< BWAPI::TilePosition > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapper_PtrNextT_BWAPI__TilePosition_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TilePositionSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper_PtrNext< BWAPI::TilePosition > *arg1 = (SetWrapper_PtrNext< BWAPI::TilePosition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TilePositionSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapper_PtrNextT_BWAPI__TilePosition_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TilePositionSet" "', argument " "1"" of type '" "SetWrapper_PtrNext< BWAPI::TilePosition > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper_PtrNext< BWAPI::TilePosition > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TilePositionSet___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper_PtrNext< BWAPI::TilePosition > *arg1 = (SetWrapper_PtrNext< BWAPI::TilePosition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TilePositionSet___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapper_PtrNextT_BWAPI__TilePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TilePositionSet___len__" "', argument " "1"" of type '" "SetWrapper_PtrNext< BWAPI::TilePosition > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper_PtrNext< BWAPI::TilePosition > * >(argp1);
  result = (int)(arg1)->__len__();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TilePositionSet___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper_PtrNext< BWAPI::TilePosition > *arg1 = (SetWrapper_PtrNext< BWAPI::TilePosition > *) 0 ;
  BWAPI::TilePosition arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TilePositionSet___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapper_PtrNextT_BWAPI__TilePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TilePositionSet___contains__" "', argument " "1"" of type '" "SetWrapper_PtrNext< BWAPI::TilePosition > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper_PtrNext< BWAPI::TilePosition > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__TilePosition,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TilePositionSet___contains__" "', argument " "2"" of type '" "BWAPI::TilePosition""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TilePositionSet___contains__" "', argument " "2"" of type '" "BWAPI::TilePosition""'");
    } else {
      BWAPI::TilePosition * temp = reinterpret_cast< BWAPI::TilePosition * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->__contains__(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TilePositionSet___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper_PtrNext< BWAPI::TilePosition > *arg1 = (SetWrapper_PtrNext< BWAPI::TilePosition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SetWrapper_PtrNext< BWAPI::TilePosition > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TilePositionSet___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapper_PtrNextT_BWAPI__TilePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TilePositionSet___iter__" "', argument " "1"" of type '" "SetWrapper_PtrNext< BWAPI::TilePosition > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper_PtrNext< BWAPI::TilePosition > * >(argp1);
  result = (SetWrapper_PtrNext< BWAPI::TilePosition > *)(arg1)->__iter__();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapper_PtrNextT_BWAPI__TilePosition_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TilePositionSet_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper_PtrNext< BWAPI::TilePosition > *arg1 = (SetWrapper_PtrNext< BWAPI::TilePosition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::TilePosition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TilePositionSet_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapper_PtrNextT_BWAPI__TilePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TilePositionSet_next" "', argument " "1"" of type '" "SetWrapper_PtrNext< BWAPI::TilePosition > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper_PtrNext< BWAPI::TilePosition > * >(argp1);
  {
    result = (BWAPI::TilePosition *)(arg1)->next();
    if (!result) {
      PyErr_SetString(PyExc_StopIteration,"End of set");
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__TilePosition, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TilePositionSet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SetWrapper_PtrNextT_BWAPI__TilePosition_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_UnitTypeSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< BWAPI::UnitType > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SetWrapper_PtrNext< BWAPI::UnitType > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UnitTypeSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__setT_BWAPI__UnitType_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UnitTypeSet" "', argument " "1"" of type '" "std::set< BWAPI::UnitType > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UnitTypeSet" "', argument " "1"" of type '" "std::set< BWAPI::UnitType > const &""'"); 
  }
  arg1 = reinterpret_cast< std::set< BWAPI::UnitType > * >(argp1);
  result = (SetWrapper_PtrNext< BWAPI::UnitType > *)new SetWrapper_PtrNext< BWAPI::UnitType >((std::set< BWAPI::UnitType > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapper_PtrNextT_BWAPI__UnitType_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UnitTypeSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper_PtrNext< BWAPI::UnitType > *arg1 = (SetWrapper_PtrNext< BWAPI::UnitType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_UnitTypeSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapper_PtrNextT_BWAPI__UnitType_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UnitTypeSet" "', argument " "1"" of type '" "SetWrapper_PtrNext< BWAPI::UnitType > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper_PtrNext< BWAPI::UnitType > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitTypeSet___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper_PtrNext< BWAPI::UnitType > *arg1 = (SetWrapper_PtrNext< BWAPI::UnitType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitTypeSet___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapper_PtrNextT_BWAPI__UnitType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitTypeSet___len__" "', argument " "1"" of type '" "SetWrapper_PtrNext< BWAPI::UnitType > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper_PtrNext< BWAPI::UnitType > * >(argp1);
  result = (int)(arg1)->__len__();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitTypeSet___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper_PtrNext< BWAPI::UnitType > *arg1 = (SetWrapper_PtrNext< BWAPI::UnitType > *) 0 ;
  BWAPI::UnitType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitTypeSet___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapper_PtrNextT_BWAPI__UnitType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitTypeSet___contains__" "', argument " "1"" of type '" "SetWrapper_PtrNext< BWAPI::UnitType > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper_PtrNext< BWAPI::UnitType > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__UnitType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitTypeSet___contains__" "', argument " "2"" of type '" "BWAPI::UnitType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitTypeSet___contains__" "', argument " "2"" of type '" "BWAPI::UnitType""'");
    } else {
      BWAPI::UnitType * temp = reinterpret_cast< BWAPI::UnitType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->__contains__(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitTypeSet___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper_PtrNext< BWAPI::UnitType > *arg1 = (SetWrapper_PtrNext< BWAPI::UnitType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SetWrapper_PtrNext< BWAPI::UnitType > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitTypeSet___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapper_PtrNextT_BWAPI__UnitType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitTypeSet___iter__" "', argument " "1"" of type '" "SetWrapper_PtrNext< BWAPI::UnitType > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper_PtrNext< BWAPI::UnitType > * >(argp1);
  result = (SetWrapper_PtrNext< BWAPI::UnitType > *)(arg1)->__iter__();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapper_PtrNextT_BWAPI__UnitType_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitTypeSet_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper_PtrNext< BWAPI::UnitType > *arg1 = (SetWrapper_PtrNext< BWAPI::UnitType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitTypeSet_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SetWrapper_PtrNextT_BWAPI__UnitType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitTypeSet_next" "', argument " "1"" of type '" "SetWrapper_PtrNext< BWAPI::UnitType > *""'"); 
  }
  arg1 = reinterpret_cast< SetWrapper_PtrNext< BWAPI::UnitType > * >(argp1);
  {
    result = (BWAPI::UnitType *)(arg1)->next();
    if (!result) {
      PyErr_SetString(PyExc_StopIteration,"End of set");
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UnitTypeSet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SetWrapper_PtrNextT_BWAPI__UnitType_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RegionList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< BWTA::Region * > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ListWrapper< BWTA::Region * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RegionList",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__listT_BWTA__Region_p_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RegionList" "', argument " "1"" of type '" "std::list< BWTA::Region * > const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RegionList" "', argument " "1"" of type '" "std::list< BWTA::Region * > const""'");
    } else {
      std::list< BWTA::Region * > * temp = reinterpret_cast< std::list< BWTA::Region * > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (ListWrapper< BWTA::Region * > *)new ListWrapper< BWTA::Region * >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ListWrapperT_BWTA__Region_p_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RegionList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper< BWTA::Region * > *arg1 = (ListWrapper< BWTA::Region * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RegionList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapperT_BWTA__Region_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RegionList" "', argument " "1"" of type '" "ListWrapper< BWTA::Region * > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper< BWTA::Region * > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionList___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper< BWTA::Region * > *arg1 = (ListWrapper< BWTA::Region * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RegionList___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapperT_BWTA__Region_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionList___len__" "', argument " "1"" of type '" "ListWrapper< BWTA::Region * > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper< BWTA::Region * > * >(argp1);
  result = (int)(arg1)->__len__();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionList__size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper< BWTA::Region * > *arg1 = (ListWrapper< BWTA::Region * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RegionList__size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapperT_BWTA__Region_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionList__size" "', argument " "1"" of type '" "ListWrapper< BWTA::Region * > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper< BWTA::Region * > * >(argp1);
  result = (int)(arg1)->_size();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionList___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper< BWTA::Region * > *arg1 = (ListWrapper< BWTA::Region * > *) 0 ;
  BWTA::Region *arg2 = (BWTA::Region *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RegionList___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapperT_BWTA__Region_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionList___contains__" "', argument " "1"" of type '" "ListWrapper< BWTA::Region * > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper< BWTA::Region * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWTA__Region, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegionList___contains__" "', argument " "2"" of type '" "BWTA::Region *""'"); 
  }
  arg2 = reinterpret_cast< BWTA::Region * >(argp2);
  result = (bool)(arg1)->__contains__(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionList___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper< BWTA::Region * > *arg1 = (ListWrapper< BWTA::Region * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ListWrapper< BWTA::Region * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RegionList___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapperT_BWTA__Region_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionList___iter__" "', argument " "1"" of type '" "ListWrapper< BWTA::Region * > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper< BWTA::Region * > * >(argp1);
  result = (ListWrapper< BWTA::Region * > *)(arg1)->__iter__();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ListWrapperT_BWTA__Region_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionList_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper< BWTA::Region * > *arg1 = (ListWrapper< BWTA::Region * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWTA::Region *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RegionList_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapperT_BWTA__Region_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionList_next" "', argument " "1"" of type '" "ListWrapper< BWTA::Region * > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper< BWTA::Region * > * >(argp1);
  {
    result = (BWTA::Region *)(arg1)->next();
    if (!result) {
      PyErr_SetString(PyExc_StopIteration,"End of list");
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWTA__Region, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RegionList_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ListWrapperT_BWTA__Region_p_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ChokepointList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< BWTA::Chokepoint * > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ListWrapper< BWTA::Chokepoint * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ChokepointList",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__listT_BWTA__Chokepoint_p_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ChokepointList" "', argument " "1"" of type '" "std::list< BWTA::Chokepoint * > const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ChokepointList" "', argument " "1"" of type '" "std::list< BWTA::Chokepoint * > const""'");
    } else {
      std::list< BWTA::Chokepoint * > * temp = reinterpret_cast< std::list< BWTA::Chokepoint * > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (ListWrapper< BWTA::Chokepoint * > *)new ListWrapper< BWTA::Chokepoint * >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ListWrapperT_BWTA__Chokepoint_p_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ChokepointList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper< BWTA::Chokepoint * > *arg1 = (ListWrapper< BWTA::Chokepoint * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ChokepointList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapperT_BWTA__Chokepoint_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ChokepointList" "', argument " "1"" of type '" "ListWrapper< BWTA::Chokepoint * > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper< BWTA::Chokepoint * > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChokepointList___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper< BWTA::Chokepoint * > *arg1 = (ListWrapper< BWTA::Chokepoint * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ChokepointList___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapperT_BWTA__Chokepoint_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChokepointList___len__" "', argument " "1"" of type '" "ListWrapper< BWTA::Chokepoint * > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper< BWTA::Chokepoint * > * >(argp1);
  result = (int)(arg1)->__len__();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChokepointList__size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper< BWTA::Chokepoint * > *arg1 = (ListWrapper< BWTA::Chokepoint * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ChokepointList__size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapperT_BWTA__Chokepoint_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChokepointList__size" "', argument " "1"" of type '" "ListWrapper< BWTA::Chokepoint * > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper< BWTA::Chokepoint * > * >(argp1);
  result = (int)(arg1)->_size();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChokepointList___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper< BWTA::Chokepoint * > *arg1 = (ListWrapper< BWTA::Chokepoint * > *) 0 ;
  BWTA::Chokepoint *arg2 = (BWTA::Chokepoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ChokepointList___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapperT_BWTA__Chokepoint_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChokepointList___contains__" "', argument " "1"" of type '" "ListWrapper< BWTA::Chokepoint * > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper< BWTA::Chokepoint * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWTA__Chokepoint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ChokepointList___contains__" "', argument " "2"" of type '" "BWTA::Chokepoint *""'"); 
  }
  arg2 = reinterpret_cast< BWTA::Chokepoint * >(argp2);
  result = (bool)(arg1)->__contains__(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChokepointList___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper< BWTA::Chokepoint * > *arg1 = (ListWrapper< BWTA::Chokepoint * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ListWrapper< BWTA::Chokepoint * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ChokepointList___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapperT_BWTA__Chokepoint_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChokepointList___iter__" "', argument " "1"" of type '" "ListWrapper< BWTA::Chokepoint * > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper< BWTA::Chokepoint * > * >(argp1);
  result = (ListWrapper< BWTA::Chokepoint * > *)(arg1)->__iter__();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ListWrapperT_BWTA__Chokepoint_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChokepointList_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper< BWTA::Chokepoint * > *arg1 = (ListWrapper< BWTA::Chokepoint * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWTA::Chokepoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ChokepointList_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapperT_BWTA__Chokepoint_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChokepointList_next" "', argument " "1"" of type '" "ListWrapper< BWTA::Chokepoint * > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper< BWTA::Chokepoint * > * >(argp1);
  {
    result = (BWTA::Chokepoint *)(arg1)->next();
    if (!result) {
      PyErr_SetString(PyExc_StopIteration,"End of list");
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWTA__Chokepoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ChokepointList_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ListWrapperT_BWTA__Chokepoint_p_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BaseLocationList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< BWTA::BaseLocation * > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ListWrapper< BWTA::BaseLocation * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BaseLocationList",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__listT_BWTA__BaseLocation_p_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BaseLocationList" "', argument " "1"" of type '" "std::list< BWTA::BaseLocation * > const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BaseLocationList" "', argument " "1"" of type '" "std::list< BWTA::BaseLocation * > const""'");
    } else {
      std::list< BWTA::BaseLocation * > * temp = reinterpret_cast< std::list< BWTA::BaseLocation * > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (ListWrapper< BWTA::BaseLocation * > *)new ListWrapper< BWTA::BaseLocation * >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ListWrapperT_BWTA__BaseLocation_p_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BaseLocationList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper< BWTA::BaseLocation * > *arg1 = (ListWrapper< BWTA::BaseLocation * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BaseLocationList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapperT_BWTA__BaseLocation_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BaseLocationList" "', argument " "1"" of type '" "ListWrapper< BWTA::BaseLocation * > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper< BWTA::BaseLocation * > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseLocationList___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper< BWTA::BaseLocation * > *arg1 = (ListWrapper< BWTA::BaseLocation * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseLocationList___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapperT_BWTA__BaseLocation_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseLocationList___len__" "', argument " "1"" of type '" "ListWrapper< BWTA::BaseLocation * > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper< BWTA::BaseLocation * > * >(argp1);
  result = (int)(arg1)->__len__();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseLocationList__size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper< BWTA::BaseLocation * > *arg1 = (ListWrapper< BWTA::BaseLocation * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseLocationList__size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapperT_BWTA__BaseLocation_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseLocationList__size" "', argument " "1"" of type '" "ListWrapper< BWTA::BaseLocation * > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper< BWTA::BaseLocation * > * >(argp1);
  result = (int)(arg1)->_size();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseLocationList___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper< BWTA::BaseLocation * > *arg1 = (ListWrapper< BWTA::BaseLocation * > *) 0 ;
  BWTA::BaseLocation *arg2 = (BWTA::BaseLocation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BaseLocationList___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapperT_BWTA__BaseLocation_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseLocationList___contains__" "', argument " "1"" of type '" "ListWrapper< BWTA::BaseLocation * > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper< BWTA::BaseLocation * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWTA__BaseLocation, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BaseLocationList___contains__" "', argument " "2"" of type '" "BWTA::BaseLocation *""'"); 
  }
  arg2 = reinterpret_cast< BWTA::BaseLocation * >(argp2);
  result = (bool)(arg1)->__contains__(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseLocationList___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper< BWTA::BaseLocation * > *arg1 = (ListWrapper< BWTA::BaseLocation * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ListWrapper< BWTA::BaseLocation * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseLocationList___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapperT_BWTA__BaseLocation_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseLocationList___iter__" "', argument " "1"" of type '" "ListWrapper< BWTA::BaseLocation * > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper< BWTA::BaseLocation * > * >(argp1);
  result = (ListWrapper< BWTA::BaseLocation * > *)(arg1)->__iter__();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ListWrapperT_BWTA__BaseLocation_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseLocationList_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper< BWTA::BaseLocation * > *arg1 = (ListWrapper< BWTA::BaseLocation * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWTA::BaseLocation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseLocationList_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapperT_BWTA__BaseLocation_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseLocationList_next" "', argument " "1"" of type '" "ListWrapper< BWTA::BaseLocation * > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper< BWTA::BaseLocation * > * >(argp1);
  {
    result = (BWTA::BaseLocation *)(arg1)->next();
    if (!result) {
      PyErr_SetString(PyExc_StopIteration,"End of list");
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWTA__BaseLocation, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BaseLocationList_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ListWrapperT_BWTA__BaseLocation_p_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PlayerList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< std::list< BWAPI::Player * > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ListWrapper< BWAPI::Player * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PlayerList",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__listT_BWAPI__Player_p_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PlayerList" "', argument " "1"" of type '" "std::list< BWAPI::Player * > const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PlayerList" "', argument " "1"" of type '" "std::list< BWAPI::Player * > const""'");
    } else {
      std::list< BWAPI::Player * > * temp = reinterpret_cast< std::list< BWAPI::Player * > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (ListWrapper< BWAPI::Player * > *)new ListWrapper< BWAPI::Player * >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ListWrapperT_BWAPI__Player_p_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PlayerList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper< BWAPI::Player * > *arg1 = (ListWrapper< BWAPI::Player * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PlayerList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapperT_BWAPI__Player_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PlayerList" "', argument " "1"" of type '" "ListWrapper< BWAPI::Player * > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper< BWAPI::Player * > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerList___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper< BWAPI::Player * > *arg1 = (ListWrapper< BWAPI::Player * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PlayerList___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapperT_BWAPI__Player_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerList___len__" "', argument " "1"" of type '" "ListWrapper< BWAPI::Player * > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper< BWAPI::Player * > * >(argp1);
  result = (int)(arg1)->__len__();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerList__size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper< BWAPI::Player * > *arg1 = (ListWrapper< BWAPI::Player * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PlayerList__size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapperT_BWAPI__Player_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerList__size" "', argument " "1"" of type '" "ListWrapper< BWAPI::Player * > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper< BWAPI::Player * > * >(argp1);
  result = (int)(arg1)->_size();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerList___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper< BWAPI::Player * > *arg1 = (ListWrapper< BWAPI::Player * > *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PlayerList___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapperT_BWAPI__Player_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerList___contains__" "', argument " "1"" of type '" "ListWrapper< BWAPI::Player * > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper< BWAPI::Player * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PlayerList___contains__" "', argument " "2"" of type '" "BWAPI::Player *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Player * >(argp2);
  result = (bool)(arg1)->__contains__(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerList___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper< BWAPI::Player * > *arg1 = (ListWrapper< BWAPI::Player * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ListWrapper< BWAPI::Player * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PlayerList___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapperT_BWAPI__Player_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerList___iter__" "', argument " "1"" of type '" "ListWrapper< BWAPI::Player * > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper< BWAPI::Player * > * >(argp1);
  result = (ListWrapper< BWAPI::Player * > *)(arg1)->__iter__();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ListWrapperT_BWAPI__Player_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerList_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper< BWAPI::Player * > *arg1 = (ListWrapper< BWAPI::Player * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Player *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PlayerList_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapperT_BWAPI__Player_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerList_next" "', argument " "1"" of type '" "ListWrapper< BWAPI::Player * > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper< BWAPI::Player * > * >(argp1);
  {
    result = (BWAPI::Player *)(arg1)->next();
    if (!result) {
      PyErr_SetString(PyExc_StopIteration,"End of list");
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PlayerList_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ListWrapperT_BWAPI__Player_p_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_UnitList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< std::list< BWAPI::Unit * > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ListWrapper< BWAPI::Unit * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UnitList",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__listT_BWAPI__Unit_p_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UnitList" "', argument " "1"" of type '" "std::list< BWAPI::Unit * > const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UnitList" "', argument " "1"" of type '" "std::list< BWAPI::Unit * > const""'");
    } else {
      std::list< BWAPI::Unit * > * temp = reinterpret_cast< std::list< BWAPI::Unit * > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (ListWrapper< BWAPI::Unit * > *)new ListWrapper< BWAPI::Unit * >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ListWrapperT_BWAPI__Unit_p_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UnitList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper< BWAPI::Unit * > *arg1 = (ListWrapper< BWAPI::Unit * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_UnitList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapperT_BWAPI__Unit_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UnitList" "', argument " "1"" of type '" "ListWrapper< BWAPI::Unit * > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper< BWAPI::Unit * > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitList___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper< BWAPI::Unit * > *arg1 = (ListWrapper< BWAPI::Unit * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitList___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapperT_BWAPI__Unit_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitList___len__" "', argument " "1"" of type '" "ListWrapper< BWAPI::Unit * > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper< BWAPI::Unit * > * >(argp1);
  result = (int)(arg1)->__len__();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitList__size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper< BWAPI::Unit * > *arg1 = (ListWrapper< BWAPI::Unit * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitList__size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapperT_BWAPI__Unit_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitList__size" "', argument " "1"" of type '" "ListWrapper< BWAPI::Unit * > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper< BWAPI::Unit * > * >(argp1);
  result = (int)(arg1)->_size();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitList___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper< BWAPI::Unit * > *arg1 = (ListWrapper< BWAPI::Unit * > *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitList___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapperT_BWAPI__Unit_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitList___contains__" "', argument " "1"" of type '" "ListWrapper< BWAPI::Unit * > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper< BWAPI::Unit * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitList___contains__" "', argument " "2"" of type '" "BWAPI::Unit *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Unit * >(argp2);
  result = (bool)(arg1)->__contains__(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitList___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper< BWAPI::Unit * > *arg1 = (ListWrapper< BWAPI::Unit * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ListWrapper< BWAPI::Unit * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitList___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapperT_BWAPI__Unit_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitList___iter__" "', argument " "1"" of type '" "ListWrapper< BWAPI::Unit * > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper< BWAPI::Unit * > * >(argp1);
  result = (ListWrapper< BWAPI::Unit * > *)(arg1)->__iter__();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ListWrapperT_BWAPI__Unit_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitList_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper< BWAPI::Unit * > *arg1 = (ListWrapper< BWAPI::Unit * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Unit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitList_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapperT_BWAPI__Unit_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitList_next" "', argument " "1"" of type '" "ListWrapper< BWAPI::Unit * > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper< BWAPI::Unit * > * >(argp1);
  {
    result = (BWAPI::Unit *)(arg1)->next();
    if (!result) {
      PyErr_SetString(PyExc_StopIteration,"End of list");
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UnitList_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ListWrapperT_BWAPI__Unit_p_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ForceList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< std::list< BWAPI::Force * > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ListWrapper< BWAPI::Force * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ForceList",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__listT_BWAPI__Force_p_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ForceList" "', argument " "1"" of type '" "std::list< BWAPI::Force * > const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ForceList" "', argument " "1"" of type '" "std::list< BWAPI::Force * > const""'");
    } else {
      std::list< BWAPI::Force * > * temp = reinterpret_cast< std::list< BWAPI::Force * > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (ListWrapper< BWAPI::Force * > *)new ListWrapper< BWAPI::Force * >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ListWrapperT_BWAPI__Force_p_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ForceList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper< BWAPI::Force * > *arg1 = (ListWrapper< BWAPI::Force * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ForceList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapperT_BWAPI__Force_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ForceList" "', argument " "1"" of type '" "ListWrapper< BWAPI::Force * > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper< BWAPI::Force * > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ForceList___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper< BWAPI::Force * > *arg1 = (ListWrapper< BWAPI::Force * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ForceList___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapperT_BWAPI__Force_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForceList___len__" "', argument " "1"" of type '" "ListWrapper< BWAPI::Force * > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper< BWAPI::Force * > * >(argp1);
  result = (int)(arg1)->__len__();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ForceList__size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper< BWAPI::Force * > *arg1 = (ListWrapper< BWAPI::Force * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ForceList__size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapperT_BWAPI__Force_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForceList__size" "', argument " "1"" of type '" "ListWrapper< BWAPI::Force * > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper< BWAPI::Force * > * >(argp1);
  result = (int)(arg1)->_size();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ForceList___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper< BWAPI::Force * > *arg1 = (ListWrapper< BWAPI::Force * > *) 0 ;
  BWAPI::Force *arg2 = (BWAPI::Force *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ForceList___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapperT_BWAPI__Force_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForceList___contains__" "', argument " "1"" of type '" "ListWrapper< BWAPI::Force * > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper< BWAPI::Force * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Force, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ForceList___contains__" "', argument " "2"" of type '" "BWAPI::Force *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Force * >(argp2);
  result = (bool)(arg1)->__contains__(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ForceList___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper< BWAPI::Force * > *arg1 = (ListWrapper< BWAPI::Force * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ListWrapper< BWAPI::Force * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ForceList___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapperT_BWAPI__Force_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForceList___iter__" "', argument " "1"" of type '" "ListWrapper< BWAPI::Force * > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper< BWAPI::Force * > * >(argp1);
  result = (ListWrapper< BWAPI::Force * > *)(arg1)->__iter__();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ListWrapperT_BWAPI__Force_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ForceList_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper< BWAPI::Force * > *arg1 = (ListWrapper< BWAPI::Force * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Force *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ForceList_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapperT_BWAPI__Force_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForceList_next" "', argument " "1"" of type '" "ListWrapper< BWAPI::Force * > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper< BWAPI::Force * > * >(argp1);
  {
    result = (BWAPI::Force *)(arg1)->next();
    if (!result) {
      PyErr_SetString(PyExc_StopIteration,"End of list");
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Force, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ForceList_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ListWrapperT_BWAPI__Force_p_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PositionList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< std::list< BWAPI::Position > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ListWrapper_PtrNext< BWAPI::Position > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PositionList",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__listT_BWAPI__Position_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PositionList" "', argument " "1"" of type '" "std::list< BWAPI::Position > const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PositionList" "', argument " "1"" of type '" "std::list< BWAPI::Position > const""'");
    } else {
      std::list< BWAPI::Position > * temp = reinterpret_cast< std::list< BWAPI::Position > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (ListWrapper_PtrNext< BWAPI::Position > *)new ListWrapper_PtrNext< BWAPI::Position >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ListWrapper_PtrNextT_BWAPI__Position_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PositionList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper_PtrNext< BWAPI::Position > *arg1 = (ListWrapper_PtrNext< BWAPI::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PositionList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapper_PtrNextT_BWAPI__Position_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PositionList" "', argument " "1"" of type '" "ListWrapper_PtrNext< BWAPI::Position > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper_PtrNext< BWAPI::Position > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper_PtrNext< BWAPI::Position > *arg1 = (ListWrapper_PtrNext< BWAPI::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PositionList___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapper_PtrNextT_BWAPI__Position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList___len__" "', argument " "1"" of type '" "ListWrapper_PtrNext< BWAPI::Position > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper_PtrNext< BWAPI::Position > * >(argp1);
  result = (int)(arg1)->__len__();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList__size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper_PtrNext< BWAPI::Position > *arg1 = (ListWrapper_PtrNext< BWAPI::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PositionList__size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapper_PtrNextT_BWAPI__Position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList__size" "', argument " "1"" of type '" "ListWrapper_PtrNext< BWAPI::Position > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper_PtrNext< BWAPI::Position > * >(argp1);
  result = (int)(arg1)->_size();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper_PtrNext< BWAPI::Position > *arg1 = (ListWrapper_PtrNext< BWAPI::Position > *) 0 ;
  BWAPI::Position arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PositionList___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapper_PtrNextT_BWAPI__Position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList___contains__" "', argument " "1"" of type '" "ListWrapper_PtrNext< BWAPI::Position > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper_PtrNext< BWAPI::Position > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Position,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionList___contains__" "', argument " "2"" of type '" "BWAPI::Position""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionList___contains__" "', argument " "2"" of type '" "BWAPI::Position""'");
    } else {
      BWAPI::Position * temp = reinterpret_cast< BWAPI::Position * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->__contains__(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper_PtrNext< BWAPI::Position > *arg1 = (ListWrapper_PtrNext< BWAPI::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ListWrapper_PtrNext< BWAPI::Position > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PositionList___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapper_PtrNextT_BWAPI__Position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList___iter__" "', argument " "1"" of type '" "ListWrapper_PtrNext< BWAPI::Position > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper_PtrNext< BWAPI::Position > * >(argp1);
  result = (ListWrapper_PtrNext< BWAPI::Position > *)(arg1)->__iter__();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ListWrapper_PtrNextT_BWAPI__Position_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionList_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper_PtrNext< BWAPI::Position > *arg1 = (ListWrapper_PtrNext< BWAPI::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Position *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PositionList_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapper_PtrNextT_BWAPI__Position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionList_next" "', argument " "1"" of type '" "ListWrapper_PtrNext< BWAPI::Position > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper_PtrNext< BWAPI::Position > * >(argp1);
  {
    result = (BWAPI::Position *)(arg1)->next();
    if (!result) {
      PyErr_SetString(PyExc_StopIteration,"End of list");
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Position, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PositionList_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ListWrapper_PtrNextT_BWAPI__Position_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TilePositionList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< std::list< BWAPI::TilePosition > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ListWrapper_PtrNext< BWAPI::TilePosition > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TilePositionList",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__listT_BWAPI__TilePosition_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TilePositionList" "', argument " "1"" of type '" "std::list< BWAPI::TilePosition > const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TilePositionList" "', argument " "1"" of type '" "std::list< BWAPI::TilePosition > const""'");
    } else {
      std::list< BWAPI::TilePosition > * temp = reinterpret_cast< std::list< BWAPI::TilePosition > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (ListWrapper_PtrNext< BWAPI::TilePosition > *)new ListWrapper_PtrNext< BWAPI::TilePosition >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ListWrapper_PtrNextT_BWAPI__TilePosition_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TilePositionList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper_PtrNext< BWAPI::TilePosition > *arg1 = (ListWrapper_PtrNext< BWAPI::TilePosition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TilePositionList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapper_PtrNextT_BWAPI__TilePosition_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TilePositionList" "', argument " "1"" of type '" "ListWrapper_PtrNext< BWAPI::TilePosition > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper_PtrNext< BWAPI::TilePosition > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TilePositionList___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper_PtrNext< BWAPI::TilePosition > *arg1 = (ListWrapper_PtrNext< BWAPI::TilePosition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TilePositionList___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapper_PtrNextT_BWAPI__TilePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TilePositionList___len__" "', argument " "1"" of type '" "ListWrapper_PtrNext< BWAPI::TilePosition > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper_PtrNext< BWAPI::TilePosition > * >(argp1);
  result = (int)(arg1)->__len__();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TilePositionList__size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper_PtrNext< BWAPI::TilePosition > *arg1 = (ListWrapper_PtrNext< BWAPI::TilePosition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TilePositionList__size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapper_PtrNextT_BWAPI__TilePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TilePositionList__size" "', argument " "1"" of type '" "ListWrapper_PtrNext< BWAPI::TilePosition > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper_PtrNext< BWAPI::TilePosition > * >(argp1);
  result = (int)(arg1)->_size();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TilePositionList___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper_PtrNext< BWAPI::TilePosition > *arg1 = (ListWrapper_PtrNext< BWAPI::TilePosition > *) 0 ;
  BWAPI::TilePosition arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TilePositionList___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapper_PtrNextT_BWAPI__TilePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TilePositionList___contains__" "', argument " "1"" of type '" "ListWrapper_PtrNext< BWAPI::TilePosition > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper_PtrNext< BWAPI::TilePosition > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__TilePosition,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TilePositionList___contains__" "', argument " "2"" of type '" "BWAPI::TilePosition""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TilePositionList___contains__" "', argument " "2"" of type '" "BWAPI::TilePosition""'");
    } else {
      BWAPI::TilePosition * temp = reinterpret_cast< BWAPI::TilePosition * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->__contains__(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TilePositionList___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper_PtrNext< BWAPI::TilePosition > *arg1 = (ListWrapper_PtrNext< BWAPI::TilePosition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ListWrapper_PtrNext< BWAPI::TilePosition > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TilePositionList___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapper_PtrNextT_BWAPI__TilePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TilePositionList___iter__" "', argument " "1"" of type '" "ListWrapper_PtrNext< BWAPI::TilePosition > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper_PtrNext< BWAPI::TilePosition > * >(argp1);
  result = (ListWrapper_PtrNext< BWAPI::TilePosition > *)(arg1)->__iter__();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ListWrapper_PtrNextT_BWAPI__TilePosition_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TilePositionList_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper_PtrNext< BWAPI::TilePosition > *arg1 = (ListWrapper_PtrNext< BWAPI::TilePosition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::TilePosition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TilePositionList_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapper_PtrNextT_BWAPI__TilePosition_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TilePositionList_next" "', argument " "1"" of type '" "ListWrapper_PtrNext< BWAPI::TilePosition > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper_PtrNext< BWAPI::TilePosition > * >(argp1);
  {
    result = (BWAPI::TilePosition *)(arg1)->next();
    if (!result) {
      PyErr_SetString(PyExc_StopIteration,"End of list");
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__TilePosition, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TilePositionList_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ListWrapper_PtrNextT_BWAPI__TilePosition_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_UnitTypeList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< std::list< BWAPI::UnitType > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ListWrapper_PtrNext< BWAPI::UnitType > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UnitTypeList",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__listT_BWAPI__UnitType_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UnitTypeList" "', argument " "1"" of type '" "std::list< BWAPI::UnitType > const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UnitTypeList" "', argument " "1"" of type '" "std::list< BWAPI::UnitType > const""'");
    } else {
      std::list< BWAPI::UnitType > * temp = reinterpret_cast< std::list< BWAPI::UnitType > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (ListWrapper_PtrNext< BWAPI::UnitType > *)new ListWrapper_PtrNext< BWAPI::UnitType >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ListWrapper_PtrNextT_BWAPI__UnitType_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UnitTypeList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper_PtrNext< BWAPI::UnitType > *arg1 = (ListWrapper_PtrNext< BWAPI::UnitType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_UnitTypeList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapper_PtrNextT_BWAPI__UnitType_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UnitTypeList" "', argument " "1"" of type '" "ListWrapper_PtrNext< BWAPI::UnitType > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper_PtrNext< BWAPI::UnitType > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitTypeList___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper_PtrNext< BWAPI::UnitType > *arg1 = (ListWrapper_PtrNext< BWAPI::UnitType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitTypeList___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapper_PtrNextT_BWAPI__UnitType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitTypeList___len__" "', argument " "1"" of type '" "ListWrapper_PtrNext< BWAPI::UnitType > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper_PtrNext< BWAPI::UnitType > * >(argp1);
  result = (int)(arg1)->__len__();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitTypeList__size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper_PtrNext< BWAPI::UnitType > *arg1 = (ListWrapper_PtrNext< BWAPI::UnitType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitTypeList__size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapper_PtrNextT_BWAPI__UnitType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitTypeList__size" "', argument " "1"" of type '" "ListWrapper_PtrNext< BWAPI::UnitType > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper_PtrNext< BWAPI::UnitType > * >(argp1);
  result = (int)(arg1)->_size();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitTypeList___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper_PtrNext< BWAPI::UnitType > *arg1 = (ListWrapper_PtrNext< BWAPI::UnitType > *) 0 ;
  BWAPI::UnitType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitTypeList___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapper_PtrNextT_BWAPI__UnitType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitTypeList___contains__" "', argument " "1"" of type '" "ListWrapper_PtrNext< BWAPI::UnitType > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper_PtrNext< BWAPI::UnitType > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__UnitType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitTypeList___contains__" "', argument " "2"" of type '" "BWAPI::UnitType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitTypeList___contains__" "', argument " "2"" of type '" "BWAPI::UnitType""'");
    } else {
      BWAPI::UnitType * temp = reinterpret_cast< BWAPI::UnitType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->__contains__(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitTypeList___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper_PtrNext< BWAPI::UnitType > *arg1 = (ListWrapper_PtrNext< BWAPI::UnitType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ListWrapper_PtrNext< BWAPI::UnitType > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitTypeList___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapper_PtrNextT_BWAPI__UnitType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitTypeList___iter__" "', argument " "1"" of type '" "ListWrapper_PtrNext< BWAPI::UnitType > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper_PtrNext< BWAPI::UnitType > * >(argp1);
  result = (ListWrapper_PtrNext< BWAPI::UnitType > *)(arg1)->__iter__();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ListWrapper_PtrNextT_BWAPI__UnitType_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitTypeList_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ListWrapper_PtrNext< BWAPI::UnitType > *arg1 = (ListWrapper_PtrNext< BWAPI::UnitType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitTypeList_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ListWrapper_PtrNextT_BWAPI__UnitType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitTypeList_next" "', argument " "1"" of type '" "ListWrapper_PtrNext< BWAPI::UnitType > *""'"); 
  }
  arg1 = reinterpret_cast< ListWrapper_PtrNext< BWAPI::UnitType > * >(argp1);
  {
    result = (BWAPI::UnitType *)(arg1)->next();
    if (!result) {
      PyErr_SetString(PyExc_StopIteration,"End of list");
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UnitTypeList_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ListWrapper_PtrNextT_BWAPI__UnitType_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_BWAPI_init(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":BWAPI_init")) SWIG_fail;
  BWAPI::BWAPI_init();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:PositionVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector_iterator" "', argument " "1"" of type '" "std::vector< BWAPI::Position > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_BWAPI_Position_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PositionVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector___nonzero__" "', argument " "1"" of type '" "std::vector< BWAPI::Position > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  result = (bool)std_vector_Sl_BWAPI_Position_Sg____nonzero__((std::vector< BWAPI::Position > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PositionVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector___bool__" "', argument " "1"" of type '" "std::vector< BWAPI::Position > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  result = (bool)std_vector_Sl_BWAPI_Position_Sg____bool__((std::vector< BWAPI::Position > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< BWAPI::Position >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PositionVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector___len__" "', argument " "1"" of type '" "std::vector< BWAPI::Position > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  result = std_vector_Sl_BWAPI_Position_Sg____len__((std::vector< BWAPI::Position > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< BWAPI::Position >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PositionVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector_pop" "', argument " "1"" of type '" "std::vector< BWAPI::Position > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  try {
    result = std_vector_Sl_BWAPI_Position_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::vector< BWAPI::Position >::value_type(static_cast< const std::vector< BWAPI::Position >::value_type& >(result))), SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t__value_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  std::vector< BWAPI::Position >::difference_type arg2 ;
  std::vector< BWAPI::Position >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< BWAPI::Position,std::allocator< BWAPI::Position > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PositionVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector___getslice__" "', argument " "1"" of type '" "std::vector< BWAPI::Position > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionVector___getslice__" "', argument " "2"" of type '" "std::vector< BWAPI::Position >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< BWAPI::Position >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PositionVector___getslice__" "', argument " "3"" of type '" "std::vector< BWAPI::Position >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< BWAPI::Position >::difference_type >(val3);
  try {
    result = (std::vector< BWAPI::Position,std::allocator< BWAPI::Position > > *)std_vector_Sl_BWAPI_Position_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  std::vector< BWAPI::Position >::difference_type arg2 ;
  std::vector< BWAPI::Position >::difference_type arg3 ;
  std::vector< BWAPI::Position,std::allocator< BWAPI::Position > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PositionVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector___setslice__" "', argument " "1"" of type '" "std::vector< BWAPI::Position > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionVector___setslice__" "', argument " "2"" of type '" "std::vector< BWAPI::Position >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< BWAPI::Position >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PositionVector___setslice__" "', argument " "3"" of type '" "std::vector< BWAPI::Position >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< BWAPI::Position >::difference_type >(val3);
  {
    std::vector<BWAPI::Position,std::allocator< BWAPI::Position > > *ptr = (std::vector<BWAPI::Position,std::allocator< BWAPI::Position > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PositionVector___setslice__" "', argument " "4"" of type '" "std::vector< BWAPI::Position,std::allocator< BWAPI::Position > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionVector___setslice__" "', argument " "4"" of type '" "std::vector< BWAPI::Position,std::allocator< BWAPI::Position > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_BWAPI_Position_Sg____setslice__(arg1,arg2,arg3,(std::vector< BWAPI::Position,std::allocator< BWAPI::Position > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  std::vector< BWAPI::Position >::difference_type arg2 ;
  std::vector< BWAPI::Position >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PositionVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector___delslice__" "', argument " "1"" of type '" "std::vector< BWAPI::Position > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionVector___delslice__" "', argument " "2"" of type '" "std::vector< BWAPI::Position >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< BWAPI::Position >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PositionVector___delslice__" "', argument " "3"" of type '" "std::vector< BWAPI::Position >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< BWAPI::Position >::difference_type >(val3);
  try {
    std_vector_Sl_BWAPI_Position_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  std::vector< BWAPI::Position >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PositionVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector___delitem__" "', argument " "1"" of type '" "std::vector< BWAPI::Position > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionVector___delitem__" "', argument " "2"" of type '" "std::vector< BWAPI::Position >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< BWAPI::Position >::difference_type >(val2);
  try {
    std_vector_Sl_BWAPI_Position_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< BWAPI::Position,std::allocator< BWAPI::Position > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PositionVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector___getitem__" "', argument " "1"" of type '" "std::vector< BWAPI::Position > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< BWAPI::Position,std::allocator< BWAPI::Position > > *)std_vector_Sl_BWAPI_Position_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< BWAPI::Position,std::allocator< BWAPI::Position > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PositionVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector___setitem__" "', argument " "1"" of type '" "std::vector< BWAPI::Position > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<BWAPI::Position,std::allocator< BWAPI::Position > > *ptr = (std::vector<BWAPI::Position,std::allocator< BWAPI::Position > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PositionVector___setitem__" "', argument " "3"" of type '" "std::vector< BWAPI::Position,std::allocator< BWAPI::Position > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionVector___setitem__" "', argument " "3"" of type '" "std::vector< BWAPI::Position,std::allocator< BWAPI::Position > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_BWAPI_Position_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< BWAPI::Position,std::allocator< BWAPI::Position > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PositionVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector___delitem__" "', argument " "1"" of type '" "std::vector< BWAPI::Position > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_BWAPI_Position_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<BWAPI::Position,std::allocator< BWAPI::Position > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_PositionVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<BWAPI::Position,std::allocator< BWAPI::Position > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PositionVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PositionVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(std::vector< BWAPI::Position > *,std::vector< BWAPI::Position >::difference_type)\n"
    "    __delitem__(std::vector< BWAPI::Position > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  std::vector< BWAPI::Position >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< BWAPI::Position >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PositionVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector___getitem__" "', argument " "1"" of type '" "std::vector< BWAPI::Position > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionVector___getitem__" "', argument " "2"" of type '" "std::vector< BWAPI::Position >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< BWAPI::Position >::difference_type >(val2);
  try {
    result = (std::vector< BWAPI::Position >::value_type *) &std_vector_Sl_BWAPI_Position_Sg____getitem____SWIG_1((std::vector< BWAPI::Position > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<BWAPI::Position,std::allocator< BWAPI::Position > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_PositionVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<BWAPI::Position,std::allocator< BWAPI::Position > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PositionVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PositionVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(std::vector< BWAPI::Position > *,PySliceObject *)\n"
    "    __getitem__(std::vector< BWAPI::Position > const *,std::vector< BWAPI::Position >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  std::vector< BWAPI::Position >::difference_type arg2 ;
  std::vector< BWAPI::Position >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PositionVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector___setitem__" "', argument " "1"" of type '" "std::vector< BWAPI::Position > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionVector___setitem__" "', argument " "2"" of type '" "std::vector< BWAPI::Position >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< BWAPI::Position >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PositionVector___setitem__" "', argument " "3"" of type '" "std::vector< BWAPI::Position >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionVector___setitem__" "', argument " "3"" of type '" "std::vector< BWAPI::Position >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< BWAPI::Position >::value_type * >(argp3);
  try {
    std_vector_Sl_BWAPI_Position_Sg____setitem____SWIG_1(arg1,arg2,(BWAPI::Position const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<BWAPI::Position,std::allocator< BWAPI::Position > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<BWAPI::Position,std::allocator< BWAPI::Position > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PositionVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<BWAPI::Position,std::allocator< BWAPI::Position > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PositionVector___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PositionVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(std::vector< BWAPI::Position > *,PySliceObject *,std::vector< BWAPI::Position,std::allocator< BWAPI::Position > > const &)\n"
    "    __setitem__(std::vector< BWAPI::Position > *,std::vector< BWAPI::Position >::difference_type,std::vector< BWAPI::Position >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  std::vector< BWAPI::Position >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PositionVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector_append" "', argument " "1"" of type '" "std::vector< BWAPI::Position > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionVector_append" "', argument " "2"" of type '" "std::vector< BWAPI::Position >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionVector_append" "', argument " "2"" of type '" "std::vector< BWAPI::Position >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< BWAPI::Position >::value_type * >(argp2);
  std_vector_Sl_BWAPI_Position_Sg__append(arg1,(BWAPI::Position const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PositionVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PositionVector")) SWIG_fail;
  result = (std::vector< BWAPI::Position > *)new std::vector< BWAPI::Position >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PositionVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< BWAPI::Position > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PositionVector",&obj0)) SWIG_fail;
  {
    std::vector<BWAPI::Position,std::allocator< BWAPI::Position > > *ptr = (std::vector<BWAPI::Position,std::allocator< BWAPI::Position > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PositionVector" "', argument " "1"" of type '" "std::vector< BWAPI::Position > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PositionVector" "', argument " "1"" of type '" "std::vector< BWAPI::Position > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< BWAPI::Position > *)new std::vector< BWAPI::Position >((std::vector< BWAPI::Position > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PositionVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector_empty" "', argument " "1"" of type '" "std::vector< BWAPI::Position > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  result = (bool)((std::vector< BWAPI::Position > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< BWAPI::Position >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PositionVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector_size" "', argument " "1"" of type '" "std::vector< BWAPI::Position > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  result = ((std::vector< BWAPI::Position > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PositionVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector_clear" "', argument " "1"" of type '" "std::vector< BWAPI::Position > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  std::vector< BWAPI::Position > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PositionVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector_swap" "', argument " "1"" of type '" "std::vector< BWAPI::Position > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionVector_swap" "', argument " "2"" of type '" "std::vector< BWAPI::Position > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionVector_swap" "', argument " "2"" of type '" "std::vector< BWAPI::Position > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< BWAPI::Position > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PositionVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector_get_allocator" "', argument " "1"" of type '" "std::vector< BWAPI::Position > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  result = ((std::vector< BWAPI::Position > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< BWAPI::Position >::allocator_type(static_cast< const std::vector< BWAPI::Position >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< BWAPI::Position >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PositionVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector_begin" "', argument " "1"" of type '" "std::vector< BWAPI::Position > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  result = ((std::vector< BWAPI::Position > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< BWAPI::Position >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< BWAPI::Position >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PositionVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector_end" "', argument " "1"" of type '" "std::vector< BWAPI::Position > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  result = ((std::vector< BWAPI::Position > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< BWAPI::Position >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< BWAPI::Position >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PositionVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector_rbegin" "', argument " "1"" of type '" "std::vector< BWAPI::Position > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  result = ((std::vector< BWAPI::Position > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< BWAPI::Position >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< BWAPI::Position >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PositionVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector_rend" "', argument " "1"" of type '" "std::vector< BWAPI::Position > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  result = ((std::vector< BWAPI::Position > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< BWAPI::Position >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PositionVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< BWAPI::Position > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PositionVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PositionVector" "', argument " "1"" of type '" "std::vector< BWAPI::Position >::size_type""'");
  } 
  arg1 = static_cast< std::vector< BWAPI::Position >::size_type >(val1);
  result = (std::vector< BWAPI::Position > *)new std::vector< BWAPI::Position >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PositionVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector_pop_back" "', argument " "1"" of type '" "std::vector< BWAPI::Position > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  std::vector< BWAPI::Position >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PositionVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector_resize" "', argument " "1"" of type '" "std::vector< BWAPI::Position > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionVector_resize" "', argument " "2"" of type '" "std::vector< BWAPI::Position >::size_type""'");
  } 
  arg2 = static_cast< std::vector< BWAPI::Position >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  std::vector< BWAPI::Position >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< BWAPI::Position >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PositionVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector_erase" "', argument " "1"" of type '" "std::vector< BWAPI::Position > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PositionVector_erase" "', argument " "2"" of type '" "std::vector< BWAPI::Position >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< BWAPI::Position >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< BWAPI::Position >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PositionVector_erase" "', argument " "2"" of type '" "std::vector< BWAPI::Position >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< BWAPI::Position >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  std::vector< BWAPI::Position >::iterator arg2 ;
  std::vector< BWAPI::Position >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< BWAPI::Position >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PositionVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector_erase" "', argument " "1"" of type '" "std::vector< BWAPI::Position > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PositionVector_erase" "', argument " "2"" of type '" "std::vector< BWAPI::Position >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< BWAPI::Position >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< BWAPI::Position >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PositionVector_erase" "', argument " "2"" of type '" "std::vector< BWAPI::Position >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PositionVector_erase" "', argument " "3"" of type '" "std::vector< BWAPI::Position >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< BWAPI::Position >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< BWAPI::Position >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PositionVector_erase" "', argument " "3"" of type '" "std::vector< BWAPI::Position >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< BWAPI::Position >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<BWAPI::Position,std::allocator< BWAPI::Position > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< BWAPI::Position >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_PositionVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<BWAPI::Position,std::allocator< BWAPI::Position > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< BWAPI::Position >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< BWAPI::Position >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_PositionVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PositionVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< BWAPI::Position > *,std::vector< BWAPI::Position >::iterator)\n"
    "    erase(std::vector< BWAPI::Position > *,std::vector< BWAPI::Position >::iterator,std::vector< BWAPI::Position >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PositionVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position >::size_type arg1 ;
  std::vector< BWAPI::Position >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< BWAPI::Position > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_PositionVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PositionVector" "', argument " "1"" of type '" "std::vector< BWAPI::Position >::size_type""'");
  } 
  arg1 = static_cast< std::vector< BWAPI::Position >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PositionVector" "', argument " "2"" of type '" "std::vector< BWAPI::Position >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PositionVector" "', argument " "2"" of type '" "std::vector< BWAPI::Position >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< BWAPI::Position >::value_type * >(argp2);
  result = (std::vector< BWAPI::Position > *)new std::vector< BWAPI::Position >(arg1,(std::vector< BWAPI::Position >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PositionVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_PositionVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_PositionVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<BWAPI::Position,std::allocator< BWAPI::Position > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PositionVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t__value_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_PositionVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_PositionVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< BWAPI::Position >()\n"
    "    std::vector< BWAPI::Position >(std::vector< BWAPI::Position > const &)\n"
    "    std::vector< BWAPI::Position >(std::vector< BWAPI::Position >::size_type)\n"
    "    std::vector< BWAPI::Position >(std::vector< BWAPI::Position >::size_type,std::vector< BWAPI::Position >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  std::vector< BWAPI::Position >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PositionVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector_push_back" "', argument " "1"" of type '" "std::vector< BWAPI::Position > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionVector_push_back" "', argument " "2"" of type '" "std::vector< BWAPI::Position >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionVector_push_back" "', argument " "2"" of type '" "std::vector< BWAPI::Position >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< BWAPI::Position >::value_type * >(argp2);
  (arg1)->push_back((std::vector< BWAPI::Position >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< BWAPI::Position >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PositionVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector_front" "', argument " "1"" of type '" "std::vector< BWAPI::Position > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  result = (std::vector< BWAPI::Position >::value_type *) &((std::vector< BWAPI::Position > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< BWAPI::Position >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PositionVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector_back" "', argument " "1"" of type '" "std::vector< BWAPI::Position > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  result = (std::vector< BWAPI::Position >::value_type *) &((std::vector< BWAPI::Position > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  std::vector< BWAPI::Position >::size_type arg2 ;
  std::vector< BWAPI::Position >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PositionVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector_assign" "', argument " "1"" of type '" "std::vector< BWAPI::Position > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionVector_assign" "', argument " "2"" of type '" "std::vector< BWAPI::Position >::size_type""'");
  } 
  arg2 = static_cast< std::vector< BWAPI::Position >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PositionVector_assign" "', argument " "3"" of type '" "std::vector< BWAPI::Position >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionVector_assign" "', argument " "3"" of type '" "std::vector< BWAPI::Position >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< BWAPI::Position >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< BWAPI::Position >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  std::vector< BWAPI::Position >::size_type arg2 ;
  std::vector< BWAPI::Position >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PositionVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector_resize" "', argument " "1"" of type '" "std::vector< BWAPI::Position > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionVector_resize" "', argument " "2"" of type '" "std::vector< BWAPI::Position >::size_type""'");
  } 
  arg2 = static_cast< std::vector< BWAPI::Position >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PositionVector_resize" "', argument " "3"" of type '" "std::vector< BWAPI::Position >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionVector_resize" "', argument " "3"" of type '" "std::vector< BWAPI::Position >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< BWAPI::Position >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< BWAPI::Position >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<BWAPI::Position,std::allocator< BWAPI::Position > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PositionVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<BWAPI::Position,std::allocator< BWAPI::Position > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PositionVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PositionVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< BWAPI::Position > *,std::vector< BWAPI::Position >::size_type)\n"
    "    resize(std::vector< BWAPI::Position > *,std::vector< BWAPI::Position >::size_type,std::vector< BWAPI::Position >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  std::vector< BWAPI::Position >::iterator arg2 ;
  std::vector< BWAPI::Position >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< BWAPI::Position >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PositionVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector_insert" "', argument " "1"" of type '" "std::vector< BWAPI::Position > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PositionVector_insert" "', argument " "2"" of type '" "std::vector< BWAPI::Position >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< BWAPI::Position >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< BWAPI::Position >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PositionVector_insert" "', argument " "2"" of type '" "std::vector< BWAPI::Position >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PositionVector_insert" "', argument " "3"" of type '" "std::vector< BWAPI::Position >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionVector_insert" "', argument " "3"" of type '" "std::vector< BWAPI::Position >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< BWAPI::Position >::value_type * >(argp3);
  result = (arg1)->insert(arg2,(std::vector< BWAPI::Position >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< BWAPI::Position >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  std::vector< BWAPI::Position >::iterator arg2 ;
  std::vector< BWAPI::Position >::size_type arg3 ;
  std::vector< BWAPI::Position >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PositionVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector_insert" "', argument " "1"" of type '" "std::vector< BWAPI::Position > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PositionVector_insert" "', argument " "2"" of type '" "std::vector< BWAPI::Position >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< BWAPI::Position >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< BWAPI::Position >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PositionVector_insert" "', argument " "2"" of type '" "std::vector< BWAPI::Position >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PositionVector_insert" "', argument " "3"" of type '" "std::vector< BWAPI::Position >::size_type""'");
  } 
  arg3 = static_cast< std::vector< BWAPI::Position >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PositionVector_insert" "', argument " "4"" of type '" "std::vector< BWAPI::Position >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionVector_insert" "', argument " "4"" of type '" "std::vector< BWAPI::Position >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< BWAPI::Position >::value_type * >(argp4);
  (arg1)->insert(arg2,arg3,(std::vector< BWAPI::Position >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<BWAPI::Position,std::allocator< BWAPI::Position > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< BWAPI::Position >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PositionVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<BWAPI::Position,std::allocator< BWAPI::Position > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< BWAPI::Position >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t__value_type, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_PositionVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PositionVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< BWAPI::Position > *,std::vector< BWAPI::Position >::iterator,std::vector< BWAPI::Position >::value_type const &)\n"
    "    insert(std::vector< BWAPI::Position > *,std::vector< BWAPI::Position >::iterator,std::vector< BWAPI::Position >::size_type,std::vector< BWAPI::Position >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  std::vector< BWAPI::Position >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PositionVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector_reserve" "', argument " "1"" of type '" "std::vector< BWAPI::Position > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionVector_reserve" "', argument " "2"" of type '" "std::vector< BWAPI::Position >::size_type""'");
  } 
  arg2 = static_cast< std::vector< BWAPI::Position >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PositionVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< BWAPI::Position >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PositionVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionVector_capacity" "', argument " "1"" of type '" "std::vector< BWAPI::Position > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  result = ((std::vector< BWAPI::Position > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PositionVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PositionVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PositionVector" "', argument " "1"" of type '" "std::vector< BWAPI::Position > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BWAPI::Position > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PositionVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_TA_getStartLocation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWTA::BaseLocation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TA_getStartLocation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TA_getStartLocation" "', argument " "1"" of type '" "BWAPI::Player *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  result = (BWTA::BaseLocation *)getStartLocation(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWTA__BaseLocation, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TA_getNearestBaseLocation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TilePosition arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWTA::BaseLocation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TA_getNearestBaseLocation",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BWAPI__TilePosition,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TA_getNearestBaseLocation" "', argument " "1"" of type '" "BWAPI::TilePosition""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TA_getNearestBaseLocation" "', argument " "1"" of type '" "BWAPI::TilePosition""'");
    } else {
      BWAPI::TilePosition * temp = reinterpret_cast< BWAPI::TilePosition * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (BWTA::BaseLocation *)getNearestBaseLocation(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWTA__BaseLocation, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_readMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":readMap")) SWIG_fail;
  BWTA::readMap();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_analyze(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":analyze")) SWIG_fail;
  BWTA::analyze();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getRegions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Region * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":getRegions")) SWIG_fail;
  result = (std::set< Region * > *) &BWTA::getRegions();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_Region_p_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getChokepoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Chokepoint * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":getChokepoints")) SWIG_fail;
  result = (std::set< Chokepoint * > *) &BWTA::getChokepoints();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_Chokepoint_p_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getBaseLocations(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< BaseLocation * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":getBaseLocations")) SWIG_fail;
  result = (std::set< BaseLocation * > *) &BWTA::getBaseLocations();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_BaseLocation_p_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getStartLocations(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< BaseLocation * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":getStartLocations")) SWIG_fail;
  result = (std::set< BaseLocation * > *) &BWTA::getStartLocations();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_BaseLocation_p_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getRegion__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Region *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:getRegion",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "getRegion" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "getRegion" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (Region *)BWTA::getRegion(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Region, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getRegion__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TilePosition arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Region *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:getRegion",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BWAPI__TilePosition,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getRegion" "', argument " "1"" of type '" "BWAPI::TilePosition""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getRegion" "', argument " "1"" of type '" "BWAPI::TilePosition""'");
    } else {
      BWAPI::TilePosition * temp = reinterpret_cast< BWAPI::TilePosition * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (Region *)BWTA::getRegion(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Region, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getRegion(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BWAPI__TilePosition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_getRegion__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_getRegion__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'getRegion'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BWTA::getRegion(int,int)\n"
    "    BWTA::getRegion(BWAPI::TilePosition)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_getNearestChokepoint__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Chokepoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:getNearestChokepoint",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "getNearestChokepoint" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "getNearestChokepoint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (Chokepoint *)BWTA::getNearestChokepoint(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Chokepoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getNearestChokepoint__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TilePosition arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Chokepoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:getNearestChokepoint",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BWAPI__TilePosition,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getNearestChokepoint" "', argument " "1"" of type '" "BWAPI::TilePosition""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getNearestChokepoint" "', argument " "1"" of type '" "BWAPI::TilePosition""'");
    } else {
      BWAPI::TilePosition * temp = reinterpret_cast< BWAPI::TilePosition * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (Chokepoint *)BWTA::getNearestChokepoint(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Chokepoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getNearestChokepoint__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Position arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Chokepoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:getNearestChokepoint",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BWAPI__Position,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getNearestChokepoint" "', argument " "1"" of type '" "BWAPI::Position""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getNearestChokepoint" "', argument " "1"" of type '" "BWAPI::Position""'");
    } else {
      BWAPI::Position * temp = reinterpret_cast< BWAPI::Position * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (Chokepoint *)BWTA::getNearestChokepoint(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Chokepoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getNearestChokepoint(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BWAPI__TilePosition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_getNearestChokepoint__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BWAPI__Position, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_getNearestChokepoint__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_getNearestChokepoint__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'getNearestChokepoint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BWTA::getNearestChokepoint(int,int)\n"
    "    BWTA::getNearestChokepoint(BWAPI::TilePosition)\n"
    "    BWTA::getNearestChokepoint(BWAPI::Position)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_getNearestUnwalkablePosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Position arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Position result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:getNearestUnwalkablePosition",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BWAPI__Position,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getNearestUnwalkablePosition" "', argument " "1"" of type '" "BWAPI::Position""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getNearestUnwalkablePosition" "', argument " "1"" of type '" "BWAPI::Position""'");
    } else {
      BWAPI::Position * temp = reinterpret_cast< BWAPI::Position * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = BWTA::getNearestUnwalkablePosition(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::Position(static_cast< const BWAPI::Position& >(result))), SWIGTYPE_p_BWAPI__Position, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_isConnected__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:isConnected",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "isConnected" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "isConnected" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "isConnected" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "isConnected" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (bool)BWTA::isConnected(arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_isConnected__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TilePosition arg1 ;
  BWAPI::TilePosition arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:isConnected",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BWAPI__TilePosition,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "isConnected" "', argument " "1"" of type '" "BWAPI::TilePosition""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "isConnected" "', argument " "1"" of type '" "BWAPI::TilePosition""'");
    } else {
      BWAPI::TilePosition * temp = reinterpret_cast< BWAPI::TilePosition * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__TilePosition,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "isConnected" "', argument " "2"" of type '" "BWAPI::TilePosition""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "isConnected" "', argument " "2"" of type '" "BWAPI::TilePosition""'");
    } else {
      BWAPI::TilePosition * temp = reinterpret_cast< BWAPI::TilePosition * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)BWTA::isConnected(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_isConnected(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BWAPI__TilePosition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BWAPI__TilePosition, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_isConnected__SWIG_1(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_isConnected__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'isConnected'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BWTA::isConnected(int,int,int,int)\n"
    "    BWTA::isConnected(BWAPI::TilePosition,BWAPI::TilePosition)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_getGroundDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TilePosition arg1 ;
  BWAPI::TilePosition arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:getGroundDistance",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BWAPI__TilePosition,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getGroundDistance" "', argument " "1"" of type '" "BWAPI::TilePosition""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getGroundDistance" "', argument " "1"" of type '" "BWAPI::TilePosition""'");
    } else {
      BWAPI::TilePosition * temp = reinterpret_cast< BWAPI::TilePosition * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__TilePosition,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getGroundDistance" "', argument " "2"" of type '" "BWAPI::TilePosition""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getGroundDistance" "', argument " "2"" of type '" "BWAPI::TilePosition""'");
    } else {
      BWAPI::TilePosition * temp = reinterpret_cast< BWAPI::TilePosition * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (double)BWTA::getGroundDistance(arg1,arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getNearestTilePosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TilePosition arg1 ;
  std::set< BWAPI::TilePosition > *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::pair< BWAPI::TilePosition,double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:getNearestTilePosition",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BWAPI__TilePosition,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getNearestTilePosition" "', argument " "1"" of type '" "BWAPI::TilePosition""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getNearestTilePosition" "', argument " "1"" of type '" "BWAPI::TilePosition""'");
    } else {
      BWAPI::TilePosition * temp = reinterpret_cast< BWAPI::TilePosition * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__setT_BWAPI__TilePosition_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getNearestTilePosition" "', argument " "2"" of type '" "std::set< BWAPI::TilePosition > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getNearestTilePosition" "', argument " "2"" of type '" "std::set< BWAPI::TilePosition > const &""'"); 
  }
  arg2 = reinterpret_cast< std::set< BWAPI::TilePosition > * >(argp2);
  result = BWTA::getNearestTilePosition(arg1,(std::set< BWAPI::TilePosition > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::pair< BWAPI::TilePosition,double >(static_cast< const std::pair< BWAPI::TilePosition,double >& >(result))), SWIGTYPE_p_std__pairT_BWAPI__TilePosition_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getGroundDistances(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TilePosition arg1 ;
  std::set< BWAPI::TilePosition > *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< BWAPI::TilePosition,double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:getGroundDistances",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BWAPI__TilePosition,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getGroundDistances" "', argument " "1"" of type '" "BWAPI::TilePosition""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getGroundDistances" "', argument " "1"" of type '" "BWAPI::TilePosition""'");
    } else {
      BWAPI::TilePosition * temp = reinterpret_cast< BWAPI::TilePosition * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__setT_BWAPI__TilePosition_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getGroundDistances" "', argument " "2"" of type '" "std::set< BWAPI::TilePosition > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getGroundDistances" "', argument " "2"" of type '" "std::set< BWAPI::TilePosition > const &""'"); 
  }
  arg2 = reinterpret_cast< std::set< BWAPI::TilePosition > * >(argp2);
  result = BWTA::getGroundDistances(arg1,(std::set< BWAPI::TilePosition > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::map< BWAPI::TilePosition,double >(static_cast< const std::map< BWAPI::TilePosition,double >& >(result))), SWIGTYPE_p_std__mapT_BWAPI__TilePosition_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getGroundDistanceMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TilePosition arg1 ;
  RectangleArray< double > *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:getGroundDistanceMap",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BWAPI__TilePosition,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getGroundDistanceMap" "', argument " "1"" of type '" "BWAPI::TilePosition""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getGroundDistanceMap" "', argument " "1"" of type '" "BWAPI::TilePosition""'");
    } else {
      BWAPI::TilePosition * temp = reinterpret_cast< BWAPI::TilePosition * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RectangleArrayT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getGroundDistanceMap" "', argument " "2"" of type '" "RectangleArray< double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getGroundDistanceMap" "', argument " "2"" of type '" "RectangleArray< double > &""'"); 
  }
  arg2 = reinterpret_cast< RectangleArray< double > * >(argp2);
  BWTA::getGroundDistanceMap(arg1,*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getGroundWalkDistanceMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  RectangleArray< double > *arg3 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:getGroundWalkDistanceMap",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "getGroundWalkDistanceMap" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "getGroundWalkDistanceMap" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_RectangleArrayT_double_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "getGroundWalkDistanceMap" "', argument " "3"" of type '" "RectangleArray< double > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getGroundWalkDistanceMap" "', argument " "3"" of type '" "RectangleArray< double > &""'"); 
  }
  arg3 = reinterpret_cast< RectangleArray< double > * >(argp3);
  BWTA::getGroundWalkDistanceMap(arg1,arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getShortestPath__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TilePosition arg1 ;
  BWAPI::TilePosition arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< BWAPI::TilePosition,std::allocator< BWAPI::TilePosition > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:getShortestPath",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BWAPI__TilePosition,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getShortestPath" "', argument " "1"" of type '" "BWAPI::TilePosition""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getShortestPath" "', argument " "1"" of type '" "BWAPI::TilePosition""'");
    } else {
      BWAPI::TilePosition * temp = reinterpret_cast< BWAPI::TilePosition * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__TilePosition,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getShortestPath" "', argument " "2"" of type '" "BWAPI::TilePosition""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getShortestPath" "', argument " "2"" of type '" "BWAPI::TilePosition""'");
    } else {
      BWAPI::TilePosition * temp = reinterpret_cast< BWAPI::TilePosition * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = BWTA::getShortestPath(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new std::vector< BWAPI::TilePosition,std::allocator< BWAPI::TilePosition > >(static_cast< const std::vector< BWAPI::TilePosition,std::allocator< BWAPI::TilePosition > >& >(result))), SWIGTYPE_p_std__vectorT_BWAPI__TilePosition_std__allocatorT_BWAPI__TilePosition_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getShortestPath__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TilePosition arg1 ;
  std::set< BWAPI::TilePosition > *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< BWAPI::TilePosition,std::allocator< BWAPI::TilePosition > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:getShortestPath",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BWAPI__TilePosition,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getShortestPath" "', argument " "1"" of type '" "BWAPI::TilePosition""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getShortestPath" "', argument " "1"" of type '" "BWAPI::TilePosition""'");
    } else {
      BWAPI::TilePosition * temp = reinterpret_cast< BWAPI::TilePosition * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__setT_BWAPI__TilePosition_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getShortestPath" "', argument " "2"" of type '" "std::set< BWAPI::TilePosition > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getShortestPath" "', argument " "2"" of type '" "std::set< BWAPI::TilePosition > const &""'"); 
  }
  arg2 = reinterpret_cast< std::set< BWAPI::TilePosition > * >(argp2);
  result = BWTA::getShortestPath(arg1,(std::set< BWAPI::TilePosition > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::vector< BWAPI::TilePosition,std::allocator< BWAPI::TilePosition > >(static_cast< const std::vector< BWAPI::TilePosition,std::allocator< BWAPI::TilePosition > >& >(result))), SWIGTYPE_p_std__vectorT_BWAPI__TilePosition_std__allocatorT_BWAPI__TilePosition_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getShortestPath(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BWAPI__TilePosition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BWAPI__TilePosition, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_getShortestPath__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BWAPI__TilePosition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__setT_BWAPI__TilePosition_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_getShortestPath__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'getShortestPath'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BWTA::getShortestPath(BWAPI::TilePosition,BWAPI::TilePosition)\n"
    "    BWTA::getShortestPath(BWAPI::TilePosition,std::set< BWAPI::TilePosition > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_TA_getRegions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper< BWTA::Region * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":TA_getRegions")) SWIG_fail;
  result = (SetWrapper< BWTA::Region * > *)TA_getRegions();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapperT_BWTA__Region_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TA_getChokepoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper< BWTA::Chokepoint * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":TA_getChokepoints")) SWIG_fail;
  result = (SetWrapper< BWTA::Chokepoint * > *)TA_getChokepoints();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapperT_BWTA__Chokepoint_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TA_getBaseLocations(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper< BWTA::BaseLocation * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":TA_getBaseLocations")) SWIG_fail;
  result = (SetWrapper< BWTA::BaseLocation * > *)TA_getBaseLocations();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapperT_BWTA__BaseLocation_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TA_getStartLocations(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SetWrapper< BWTA::BaseLocation * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":TA_getStartLocations")) SWIG_fail;
  result = (SetWrapper< BWTA::BaseLocation * > *)TA_getStartLocations();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapperT_BWTA__BaseLocation_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getGame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":getGame")) SWIG_fail;
  result = (BWAPI::Game *)getGame();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AIModule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::AIModule *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_AIModule")) SWIG_fail;
  result = (BWAPI::AIModule *)new BWAPI::AIModule();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__AIModule, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AIModule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AIModule",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__AIModule, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AIModule" "', argument " "1"" of type '" "BWAPI::AIModule *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::AIModule * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AIModule_onStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AIModule_onStart",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__AIModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AIModule_onStart" "', argument " "1"" of type '" "BWAPI::AIModule *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::AIModule * >(argp1);
  (arg1)->onStart();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AIModule_onEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AIModule_onEnd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__AIModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AIModule_onEnd" "', argument " "1"" of type '" "BWAPI::AIModule *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::AIModule * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AIModule_onEnd" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->onEnd(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AIModule_onFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AIModule_onFrame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__AIModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AIModule_onFrame" "', argument " "1"" of type '" "BWAPI::AIModule *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::AIModule * >(argp1);
  (arg1)->onFrame();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AIModule_onSendText(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AIModule_onSendText",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__AIModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AIModule_onSendText" "', argument " "1"" of type '" "BWAPI::AIModule *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::AIModule * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "AIModule_onSendText" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->onSendText(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AIModule_onReceiveText(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AIModule_onReceiveText",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__AIModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AIModule_onReceiveText" "', argument " "1"" of type '" "BWAPI::AIModule *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::AIModule * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AIModule_onReceiveText" "', argument " "2"" of type '" "BWAPI::Player *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Player * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "AIModule_onReceiveText" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->onReceiveText(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AIModule_onPlayerLeft(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AIModule_onPlayerLeft",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__AIModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AIModule_onPlayerLeft" "', argument " "1"" of type '" "BWAPI::AIModule *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::AIModule * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AIModule_onPlayerLeft" "', argument " "2"" of type '" "BWAPI::Player *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Player * >(argp2);
  (arg1)->onPlayerLeft(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AIModule_onNukeDetect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  Position arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AIModule_onNukeDetect",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__AIModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AIModule_onNukeDetect" "', argument " "1"" of type '" "BWAPI::AIModule *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::AIModule * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Position,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AIModule_onNukeDetect" "', argument " "2"" of type '" "Position""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AIModule_onNukeDetect" "', argument " "2"" of type '" "Position""'");
    } else {
      Position * temp = reinterpret_cast< Position * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->onNukeDetect(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AIModule_onUnitDiscover(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AIModule_onUnitDiscover",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__AIModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AIModule_onUnitDiscover" "', argument " "1"" of type '" "BWAPI::AIModule *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::AIModule * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AIModule_onUnitDiscover" "', argument " "2"" of type '" "BWAPI::Unit *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Unit * >(argp2);
  (arg1)->onUnitDiscover(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AIModule_onUnitEvade(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AIModule_onUnitEvade",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__AIModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AIModule_onUnitEvade" "', argument " "1"" of type '" "BWAPI::AIModule *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::AIModule * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AIModule_onUnitEvade" "', argument " "2"" of type '" "BWAPI::Unit *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Unit * >(argp2);
  (arg1)->onUnitEvade(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AIModule_onUnitShow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AIModule_onUnitShow",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__AIModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AIModule_onUnitShow" "', argument " "1"" of type '" "BWAPI::AIModule *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::AIModule * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AIModule_onUnitShow" "', argument " "2"" of type '" "BWAPI::Unit *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Unit * >(argp2);
  (arg1)->onUnitShow(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AIModule_onUnitHide(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AIModule_onUnitHide",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__AIModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AIModule_onUnitHide" "', argument " "1"" of type '" "BWAPI::AIModule *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::AIModule * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AIModule_onUnitHide" "', argument " "2"" of type '" "BWAPI::Unit *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Unit * >(argp2);
  (arg1)->onUnitHide(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AIModule_onUnitCreate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AIModule_onUnitCreate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__AIModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AIModule_onUnitCreate" "', argument " "1"" of type '" "BWAPI::AIModule *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::AIModule * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AIModule_onUnitCreate" "', argument " "2"" of type '" "BWAPI::Unit *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Unit * >(argp2);
  (arg1)->onUnitCreate(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AIModule_onUnitDestroy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AIModule_onUnitDestroy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__AIModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AIModule_onUnitDestroy" "', argument " "1"" of type '" "BWAPI::AIModule *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::AIModule * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AIModule_onUnitDestroy" "', argument " "2"" of type '" "BWAPI::Unit *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Unit * >(argp2);
  (arg1)->onUnitDestroy(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AIModule_onUnitMorph(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AIModule_onUnitMorph",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__AIModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AIModule_onUnitMorph" "', argument " "1"" of type '" "BWAPI::AIModule *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::AIModule * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AIModule_onUnitMorph" "', argument " "2"" of type '" "BWAPI::Unit *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Unit * >(argp2);
  (arg1)->onUnitMorph(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AIModule_onUnitRenegade(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AIModule_onUnitRenegade",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__AIModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AIModule_onUnitRenegade" "', argument " "1"" of type '" "BWAPI::AIModule *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::AIModule * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AIModule_onUnitRenegade" "', argument " "2"" of type '" "BWAPI::Unit *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Unit * >(argp2);
  (arg1)->onUnitRenegade(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AIModule_onSaveGame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AIModule_onSaveGame",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__AIModule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AIModule_onSaveGame" "', argument " "1"" of type '" "BWAPI::AIModule *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::AIModule * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "AIModule_onSaveGame" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->onSaveGame(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AIModule_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BWAPI__AIModule, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BitmapProxy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned char *arg1 = (unsigned char *) 0 ;
  unsigned short arg2 ;
  unsigned short arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  BWAPI::BitmapProxy *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_BitmapProxy",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BitmapProxy" "', argument " "1"" of type '" "unsigned char *""'"); 
  }
  arg1 = reinterpret_cast< unsigned char * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BitmapProxy" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_BitmapProxy" "', argument " "3"" of type '" "unsigned short""'");
  } 
  arg3 = static_cast< unsigned short >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_BitmapProxy" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (BWAPI::BitmapProxy *)new BWAPI::BitmapProxy(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__BitmapProxy, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BitmapProxy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::BitmapProxy *arg1 = (BWAPI::BitmapProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BitmapProxy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__BitmapProxy, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BitmapProxy" "', argument " "1"" of type '" "BWAPI::BitmapProxy *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::BitmapProxy * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BitmapProxy_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BWAPI__BitmapProxy, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Bitmap_getWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Bitmap *arg1 = (BWAPI::Bitmap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned short result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Bitmap_getWidth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Bitmap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmap_getWidth" "', argument " "1"" of type '" "BWAPI::Bitmap *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Bitmap * >(argp1);
  result = (unsigned short)(arg1)->getWidth();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmap_getHeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Bitmap *arg1 = (BWAPI::Bitmap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned short result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Bitmap_getHeight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Bitmap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmap_getHeight" "', argument " "1"" of type '" "BWAPI::Bitmap *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Bitmap * >(argp1);
  result = (unsigned short)(arg1)->getHeight();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Bitmap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Bitmap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Bitmap")) SWIG_fail;
  result = (BWAPI::Bitmap *)new BWAPI::Bitmap();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Bitmap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Bitmap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Bitmap *arg1 = (BWAPI::Bitmap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Bitmap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Bitmap, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Bitmap" "', argument " "1"" of type '" "BWAPI::Bitmap *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Bitmap * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Bitmap_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BWAPI__Bitmap, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Bullet_getID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Bullet *arg1 = (BWAPI::Bullet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Bullet_getID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Bullet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bullet_getID" "', argument " "1"" of type '" "BWAPI::Bullet const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Bullet * >(argp1);
  result = (int)((BWAPI::Bullet const *)arg1)->getID();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bullet_getPlayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Bullet *arg1 = (BWAPI::Bullet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Player *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Bullet_getPlayer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Bullet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bullet_getPlayer" "', argument " "1"" of type '" "BWAPI::Bullet const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Bullet * >(argp1);
  result = (BWAPI::Player *)((BWAPI::Bullet const *)arg1)->getPlayer();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bullet_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Bullet *arg1 = (BWAPI::Bullet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BulletType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Bullet_getType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Bullet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bullet_getType" "', argument " "1"" of type '" "BWAPI::Bullet const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Bullet * >(argp1);
  result = ((BWAPI::Bullet const *)arg1)->getType();
  resultobj = SWIG_NewPointerObj((new BulletType(static_cast< const BulletType& >(result))), SWIGTYPE_p_BulletType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bullet_getSource(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Bullet *arg1 = (BWAPI::Bullet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Unit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Bullet_getSource",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Bullet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bullet_getSource" "', argument " "1"" of type '" "BWAPI::Bullet const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Bullet * >(argp1);
  result = (BWAPI::Unit *)((BWAPI::Bullet const *)arg1)->getSource();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bullet_getPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Bullet *arg1 = (BWAPI::Bullet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Position result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Bullet_getPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Bullet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bullet_getPosition" "', argument " "1"" of type '" "BWAPI::Bullet const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Bullet * >(argp1);
  result = ((BWAPI::Bullet const *)arg1)->getPosition();
  resultobj = SWIG_NewPointerObj((new Position(static_cast< const Position& >(result))), SWIGTYPE_p_Position, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bullet_getAngle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Bullet *arg1 = (BWAPI::Bullet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Bullet_getAngle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Bullet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bullet_getAngle" "', argument " "1"" of type '" "BWAPI::Bullet const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Bullet * >(argp1);
  result = (double)((BWAPI::Bullet const *)arg1)->getAngle();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bullet_getVelocityX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Bullet *arg1 = (BWAPI::Bullet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Bullet_getVelocityX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Bullet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bullet_getVelocityX" "', argument " "1"" of type '" "BWAPI::Bullet const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Bullet * >(argp1);
  result = (double)((BWAPI::Bullet const *)arg1)->getVelocityX();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bullet_getVelocityY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Bullet *arg1 = (BWAPI::Bullet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Bullet_getVelocityY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Bullet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bullet_getVelocityY" "', argument " "1"" of type '" "BWAPI::Bullet const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Bullet * >(argp1);
  result = (double)((BWAPI::Bullet const *)arg1)->getVelocityY();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bullet_getTarget(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Bullet *arg1 = (BWAPI::Bullet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Unit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Bullet_getTarget",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Bullet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bullet_getTarget" "', argument " "1"" of type '" "BWAPI::Bullet const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Bullet * >(argp1);
  result = (BWAPI::Unit *)((BWAPI::Bullet const *)arg1)->getTarget();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bullet_getTargetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Bullet *arg1 = (BWAPI::Bullet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Position result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Bullet_getTargetPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Bullet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bullet_getTargetPosition" "', argument " "1"" of type '" "BWAPI::Bullet const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Bullet * >(argp1);
  result = ((BWAPI::Bullet const *)arg1)->getTargetPosition();
  resultobj = SWIG_NewPointerObj((new Position(static_cast< const Position& >(result))), SWIGTYPE_p_Position, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bullet_getRemoveTimer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Bullet *arg1 = (BWAPI::Bullet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Bullet_getRemoveTimer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Bullet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bullet_getRemoveTimer" "', argument " "1"" of type '" "BWAPI::Bullet const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Bullet * >(argp1);
  result = (int)((BWAPI::Bullet const *)arg1)->getRemoveTimer();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bullet_exists(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Bullet *arg1 = (BWAPI::Bullet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Bullet_exists",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Bullet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bullet_exists" "', argument " "1"" of type '" "BWAPI::Bullet const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Bullet * >(argp1);
  result = (bool)((BWAPI::Bullet const *)arg1)->exists();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bullet_isVisible__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Bullet *arg1 = (BWAPI::Bullet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Bullet_isVisible",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Bullet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bullet_isVisible" "', argument " "1"" of type '" "BWAPI::Bullet const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Bullet * >(argp1);
  result = (bool)((BWAPI::Bullet const *)arg1)->isVisible();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bullet_isVisible__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Bullet *arg1 = (BWAPI::Bullet *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Bullet_isVisible",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Bullet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bullet_isVisible" "', argument " "1"" of type '" "BWAPI::Bullet const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Bullet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Bullet_isVisible" "', argument " "2"" of type '" "BWAPI::Player *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Player * >(argp2);
  result = (bool)((BWAPI::Bullet const *)arg1)->isVisible(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bullet_isVisible(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Bullet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Bullet_isVisible__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Bullet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BWAPI__Player, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Bullet_isVisible__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Bullet_isVisible'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    isVisible(BWAPI::Bullet const *)\n"
    "    isVisible(BWAPI::Bullet const *,BWAPI::Player *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Bullet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Bullet *arg1 = (BWAPI::Bullet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Bullet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Bullet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Bullet" "', argument " "1"" of type '" "BWAPI::Bullet *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Bullet * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Bullet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BWAPI__Bullet, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BulletType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::BulletType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_BulletType")) SWIG_fail;
  result = (BWAPI::BulletType *)new BWAPI::BulletType();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__BulletType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BulletType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::BulletType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BulletType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BulletType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (BWAPI::BulletType *)new BWAPI::BulletType(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__BulletType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BulletType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::BulletType *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::BulletType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BulletType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BWAPI__BulletType,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BulletType" "', argument " "1"" of type '" "BWAPI::BulletType const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BulletType" "', argument " "1"" of type '" "BWAPI::BulletType const &""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::BulletType * >(argp1);
  result = (BWAPI::BulletType *)new BWAPI::BulletType((BWAPI::BulletType const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__BulletType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BulletType(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_BulletType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BWAPI__BulletType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BulletType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_BulletType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_BulletType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BWAPI::BulletType()\n"
    "    BWAPI::BulletType(int)\n"
    "    BWAPI::BulletType(BWAPI::BulletType const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_BulletType___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::BulletType *arg1 = (BWAPI::BulletType *) 0 ;
  BWAPI::BulletType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BulletType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__BulletType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BulletType___eq__" "', argument " "1"" of type '" "BWAPI::BulletType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::BulletType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__BulletType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BulletType___eq__" "', argument " "2"" of type '" "BWAPI::BulletType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BulletType___eq__" "', argument " "2"" of type '" "BWAPI::BulletType const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::BulletType * >(argp2);
  result = (bool)((BWAPI::BulletType const *)arg1)->operator ==((BWAPI::BulletType const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BulletType___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::BulletType *arg1 = (BWAPI::BulletType *) 0 ;
  BWAPI::BulletType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BulletType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__BulletType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BulletType___ne__" "', argument " "1"" of type '" "BWAPI::BulletType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::BulletType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__BulletType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BulletType___ne__" "', argument " "2"" of type '" "BWAPI::BulletType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BulletType___ne__" "', argument " "2"" of type '" "BWAPI::BulletType const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::BulletType * >(argp2);
  result = (bool)((BWAPI::BulletType const *)arg1)->operator !=((BWAPI::BulletType const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BulletType___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::BulletType *arg1 = (BWAPI::BulletType *) 0 ;
  BWAPI::BulletType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BulletType___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__BulletType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BulletType___lt__" "', argument " "1"" of type '" "BWAPI::BulletType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::BulletType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__BulletType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BulletType___lt__" "', argument " "2"" of type '" "BWAPI::BulletType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BulletType___lt__" "', argument " "2"" of type '" "BWAPI::BulletType const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::BulletType * >(argp2);
  result = (bool)((BWAPI::BulletType const *)arg1)->operator <((BWAPI::BulletType const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BulletType_getID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::BulletType *arg1 = (BWAPI::BulletType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BulletType_getID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__BulletType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BulletType_getID" "', argument " "1"" of type '" "BWAPI::BulletType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::BulletType * >(argp1);
  result = (int)((BWAPI::BulletType const *)arg1)->getID();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BulletType_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::BulletType *arg1 = (BWAPI::BulletType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BulletType_getName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__BulletType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BulletType_getName" "', argument " "1"" of type '" "BWAPI::BulletType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::BulletType * >(argp1);
  result = ((BWAPI::BulletType const *)arg1)->getName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BulletType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::BulletType *arg1 = (BWAPI::BulletType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BulletType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__BulletType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BulletType" "', argument " "1"" of type '" "BWAPI::BulletType *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::BulletType * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BulletType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BWAPI__BulletType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_getBulletType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  BWAPI::BulletType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:getBulletType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "getBulletType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = BWAPI::BulletTypes::getBulletType(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::BulletType(static_cast< const BWAPI::BulletType& >(result))), SWIGTYPE_p_BWAPI__BulletType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_allBulletTypes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< BWAPI::BulletType > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":allBulletTypes")) SWIG_fail;
  result = (std::set< BWAPI::BulletType > *) &BWAPI::BulletTypes::allBulletTypes();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_BWAPI__BulletType_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_BulletTypes_Melee_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BulletTypes_Melee is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_BulletTypes_Melee_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::BulletTypes::Melee), SWIGTYPE_p_BWAPI__BulletType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Fusion_Cutter_Hit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Fusion_Cutter_Hit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Fusion_Cutter_Hit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::BulletTypes::Fusion_Cutter_Hit), SWIGTYPE_p_BWAPI__BulletType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Gauss_Rifle_Hit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Gauss_Rifle_Hit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Gauss_Rifle_Hit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::BulletTypes::Gauss_Rifle_Hit), SWIGTYPE_p_BWAPI__BulletType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_C_10_Canister_Rifle_Hit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable C_10_Canister_Rifle_Hit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_C_10_Canister_Rifle_Hit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::BulletTypes::C_10_Canister_Rifle_Hit), SWIGTYPE_p_BWAPI__BulletType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_BulletTypes_Gemini_Missiles_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BulletTypes_Gemini_Missiles is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_BulletTypes_Gemini_Missiles_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::BulletTypes::Gemini_Missiles), SWIGTYPE_p_BWAPI__BulletType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_BulletTypes_Fragmentation_Grenade_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BulletTypes_Fragmentation_Grenade is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_BulletTypes_Fragmentation_Grenade_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::BulletTypes::Fragmentation_Grenade), SWIGTYPE_p_BWAPI__BulletType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_BulletTypes_Longbolt_Missile_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BulletTypes_Longbolt_Missile is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_BulletTypes_Longbolt_Missile_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::BulletTypes::Longbolt_Missile), SWIGTYPE_p_BWAPI__BulletType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ATS_ATA_Laser_Battery_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ATS_ATA_Laser_Battery is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ATS_ATA_Laser_Battery_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::BulletTypes::ATS_ATA_Laser_Battery), SWIGTYPE_p_BWAPI__BulletType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_BulletTypes_Burst_Lasers_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BulletTypes_Burst_Lasers is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_BulletTypes_Burst_Lasers_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::BulletTypes::Burst_Lasers), SWIGTYPE_p_BWAPI__BulletType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Arclite_Shock_Cannon_Hit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Arclite_Shock_Cannon_Hit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Arclite_Shock_Cannon_Hit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::BulletTypes::Arclite_Shock_Cannon_Hit), SWIGTYPE_p_BWAPI__BulletType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_EMP_Missile_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EMP_Missile is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_EMP_Missile_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::BulletTypes::EMP_Missile), SWIGTYPE_p_BWAPI__BulletType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Dual_Photon_Blasters_Hit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Dual_Photon_Blasters_Hit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Dual_Photon_Blasters_Hit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::BulletTypes::Dual_Photon_Blasters_Hit), SWIGTYPE_p_BWAPI__BulletType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Particle_Beam_Hit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Particle_Beam_Hit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Particle_Beam_Hit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::BulletTypes::Particle_Beam_Hit), SWIGTYPE_p_BWAPI__BulletType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Anti_Matter_Missile_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Anti_Matter_Missile is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Anti_Matter_Missile_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::BulletTypes::Anti_Matter_Missile), SWIGTYPE_p_BWAPI__BulletType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_BulletTypes_Pulse_Cannon_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BulletTypes_Pulse_Cannon is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_BulletTypes_Pulse_Cannon_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::BulletTypes::Pulse_Cannon), SWIGTYPE_p_BWAPI__BulletType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Psionic_Shockwave_Hit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Psionic_Shockwave_Hit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Psionic_Shockwave_Hit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::BulletTypes::Psionic_Shockwave_Hit), SWIGTYPE_p_BWAPI__BulletType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_BulletTypes_Psionic_Storm_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BulletTypes_Psionic_Storm is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_BulletTypes_Psionic_Storm_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::BulletTypes::Psionic_Storm), SWIGTYPE_p_BWAPI__BulletType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_BulletTypes_Yamato_Gun_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BulletTypes_Yamato_Gun is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_BulletTypes_Yamato_Gun_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::BulletTypes::Yamato_Gun), SWIGTYPE_p_BWAPI__BulletType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_BulletTypes_Phase_Disruptor_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BulletTypes_Phase_Disruptor is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_BulletTypes_Phase_Disruptor_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::BulletTypes::Phase_Disruptor), SWIGTYPE_p_BWAPI__BulletType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_STA_STS_Cannon_Overlay_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable STA_STS_Cannon_Overlay is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_STA_STS_Cannon_Overlay_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::BulletTypes::STA_STS_Cannon_Overlay), SWIGTYPE_p_BWAPI__BulletType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Sunken_Colony_Tentacle_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Sunken_Colony_Tentacle is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Sunken_Colony_Tentacle_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::BulletTypes::Sunken_Colony_Tentacle), SWIGTYPE_p_BWAPI__BulletType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_BulletTypes_Acid_Spore_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BulletTypes_Acid_Spore is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_BulletTypes_Acid_Spore_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::BulletTypes::Acid_Spore), SWIGTYPE_p_BWAPI__BulletType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_BulletTypes_Glave_Wurm_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BulletTypes_Glave_Wurm is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_BulletTypes_Glave_Wurm_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::BulletTypes::Glave_Wurm), SWIGTYPE_p_BWAPI__BulletType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_BulletTypes_Seeker_Spores_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BulletTypes_Seeker_Spores is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_BulletTypes_Seeker_Spores_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::BulletTypes::Seeker_Spores), SWIGTYPE_p_BWAPI__BulletType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Queen_Spell_Carrier_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Queen_Spell_Carrier is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Queen_Spell_Carrier_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::BulletTypes::Queen_Spell_Carrier), SWIGTYPE_p_BWAPI__BulletType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Plague_Cloud_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Plague_Cloud is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Plague_Cloud_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::BulletTypes::Plague_Cloud), SWIGTYPE_p_BWAPI__BulletType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_BulletTypes_Consume_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BulletTypes_Consume is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_BulletTypes_Consume_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::BulletTypes::Consume), SWIGTYPE_p_BWAPI__BulletType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Needle_Spine_Hit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Needle_Spine_Hit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Needle_Spine_Hit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::BulletTypes::Needle_Spine_Hit), SWIGTYPE_p_BWAPI__BulletType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Invisible_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Invisible is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Invisible_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::BulletTypes::Invisible), SWIGTYPE_p_BWAPI__BulletType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Optical_Flare_Grenade_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Optical_Flare_Grenade is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Optical_Flare_Grenade_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::BulletTypes::Optical_Flare_Grenade), SWIGTYPE_p_BWAPI__BulletType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_BulletTypes_Halo_Rockets_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BulletTypes_Halo_Rockets is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_BulletTypes_Halo_Rockets_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::BulletTypes::Halo_Rockets), SWIGTYPE_p_BWAPI__BulletType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_BulletTypes_Subterranean_Spines_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BulletTypes_Subterranean_Spines is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_BulletTypes_Subterranean_Spines_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::BulletTypes::Subterranean_Spines), SWIGTYPE_p_BWAPI__BulletType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Corrosive_Acid_Shot_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Corrosive_Acid_Shot is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Corrosive_Acid_Shot_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::BulletTypes::Corrosive_Acid_Shot), SWIGTYPE_p_BWAPI__BulletType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_BulletTypes_Neutron_Flare_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BulletTypes_Neutron_Flare is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_BulletTypes_Neutron_Flare_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::BulletTypes::Neutron_Flare), SWIGTYPE_p_BWAPI__BulletType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_BulletTypes_None_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BulletTypes_None is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_BulletTypes_None_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::BulletTypes::None), SWIGTYPE_p_BWAPI__BulletType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_BulletTypes_Unknown_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BulletTypes_Unknown is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_BulletTypes_Unknown_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::BulletTypes::Unknown), SWIGTYPE_p_BWAPI__BulletType,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_Color__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Color *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Color")) SWIG_fail;
  result = (BWAPI::Color *)new BWAPI::Color();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Color, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Color__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Color *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Color",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Color" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (BWAPI::Color *)new BWAPI::Color(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Color, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Color__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Color *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Color *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Color",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BWAPI__Color,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Color" "', argument " "1"" of type '" "BWAPI::Color const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Color" "', argument " "1"" of type '" "BWAPI::Color const &""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Color * >(argp1);
  result = (BWAPI::Color *)new BWAPI::Color((BWAPI::Color const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Color, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Color__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BWAPI::Color *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Color",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Color" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Color" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Color" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (BWAPI::Color *)new BWAPI::Color(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Color, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Color(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Color__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BWAPI__Color, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Color__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Color__SWIG_1(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Color__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Color'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BWAPI::Color()\n"
    "    BWAPI::Color(int)\n"
    "    BWAPI::Color(BWAPI::Color const &)\n"
    "    BWAPI::Color(int,int,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color_getID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Color *arg1 = (BWAPI::Color *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Color_getID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_getID" "', argument " "1"" of type '" "BWAPI::Color const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Color * >(argp1);
  result = (int)((BWAPI::Color const *)arg1)->getID();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color_red(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Color *arg1 = (BWAPI::Color *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Color_red",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_red" "', argument " "1"" of type '" "BWAPI::Color const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Color * >(argp1);
  result = (int)((BWAPI::Color const *)arg1)->red();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color_green(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Color *arg1 = (BWAPI::Color *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Color_green",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_green" "', argument " "1"" of type '" "BWAPI::Color const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Color * >(argp1);
  result = (int)((BWAPI::Color const *)arg1)->green();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color_blue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Color *arg1 = (BWAPI::Color *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Color_blue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_blue" "', argument " "1"" of type '" "BWAPI::Color const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Color * >(argp1);
  result = (int)((BWAPI::Color const *)arg1)->blue();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Color *arg1 = (BWAPI::Color *) 0 ;
  BWAPI::Color *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Color___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color___eq__" "', argument " "1"" of type '" "BWAPI::Color const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Color * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Color,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Color___eq__" "', argument " "2"" of type '" "BWAPI::Color const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Color___eq__" "', argument " "2"" of type '" "BWAPI::Color const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Color * >(argp2);
  result = (bool)((BWAPI::Color const *)arg1)->operator ==((BWAPI::Color const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Color *arg1 = (BWAPI::Color *) 0 ;
  BWAPI::Color *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Color___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color___ne__" "', argument " "1"" of type '" "BWAPI::Color const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Color * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Color,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Color___ne__" "', argument " "2"" of type '" "BWAPI::Color const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Color___ne__" "', argument " "2"" of type '" "BWAPI::Color const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Color * >(argp2);
  result = (bool)((BWAPI::Color const *)arg1)->operator !=((BWAPI::Color const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Color___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Color *arg1 = (BWAPI::Color *) 0 ;
  BWAPI::Color *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Color___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color___lt__" "', argument " "1"" of type '" "BWAPI::Color const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Color * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Color,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Color___lt__" "', argument " "2"" of type '" "BWAPI::Color const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Color___lt__" "', argument " "2"" of type '" "BWAPI::Color const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Color * >(argp2);
  result = (bool)((BWAPI::Color const *)arg1)->operator <((BWAPI::Color const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Color(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Color *arg1 = (BWAPI::Color *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Color",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Color, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Color" "', argument " "1"" of type '" "BWAPI::Color *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Color * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Color_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BWAPI__Color, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_Red_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Red is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Red_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Colors::Red), SWIGTYPE_p_BWAPI__Color,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Blue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Blue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Blue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Colors::Blue), SWIGTYPE_p_BWAPI__Color,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Teal_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Teal is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Teal_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Colors::Teal), SWIGTYPE_p_BWAPI__Color,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Purple_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Purple is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Purple_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Colors::Purple), SWIGTYPE_p_BWAPI__Color,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Orange_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Orange is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Orange_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Colors::Orange), SWIGTYPE_p_BWAPI__Color,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Brown_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Brown is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Brown_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Colors::Brown), SWIGTYPE_p_BWAPI__Color,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_White_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable White is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_White_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Colors::White), SWIGTYPE_p_BWAPI__Color,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Yellow_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Yellow is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Yellow_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Colors::Yellow), SWIGTYPE_p_BWAPI__Color,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Green_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Green is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Green_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Colors::Green), SWIGTYPE_p_BWAPI__Color,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Cyan_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Cyan is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Cyan_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Colors::Cyan), SWIGTYPE_p_BWAPI__Color,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Black_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Black is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Black_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Colors::Black), SWIGTYPE_p_BWAPI__Color,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Grey_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Grey is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Grey_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Colors::Grey), SWIGTYPE_p_BWAPI__Color,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_DamageType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::DamageType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DamageType")) SWIG_fail;
  result = (BWAPI::DamageType *)new BWAPI::DamageType();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__DamageType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DamageType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::DamageType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DamageType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DamageType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (BWAPI::DamageType *)new BWAPI::DamageType(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__DamageType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DamageType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::DamageType *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::DamageType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DamageType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BWAPI__DamageType,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DamageType" "', argument " "1"" of type '" "BWAPI::DamageType const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DamageType" "', argument " "1"" of type '" "BWAPI::DamageType const &""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::DamageType * >(argp1);
  result = (BWAPI::DamageType *)new BWAPI::DamageType((BWAPI::DamageType const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__DamageType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DamageType(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DamageType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BWAPI__DamageType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DamageType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DamageType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DamageType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BWAPI::DamageType()\n"
    "    BWAPI::DamageType(int)\n"
    "    BWAPI::DamageType(BWAPI::DamageType const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DamageType___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::DamageType *arg1 = (BWAPI::DamageType *) 0 ;
  BWAPI::DamageType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DamageType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__DamageType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DamageType___eq__" "', argument " "1"" of type '" "BWAPI::DamageType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::DamageType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__DamageType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DamageType___eq__" "', argument " "2"" of type '" "BWAPI::DamageType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DamageType___eq__" "', argument " "2"" of type '" "BWAPI::DamageType const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::DamageType * >(argp2);
  result = (bool)((BWAPI::DamageType const *)arg1)->operator ==((BWAPI::DamageType const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DamageType___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::DamageType *arg1 = (BWAPI::DamageType *) 0 ;
  BWAPI::DamageType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DamageType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__DamageType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DamageType___ne__" "', argument " "1"" of type '" "BWAPI::DamageType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::DamageType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__DamageType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DamageType___ne__" "', argument " "2"" of type '" "BWAPI::DamageType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DamageType___ne__" "', argument " "2"" of type '" "BWAPI::DamageType const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::DamageType * >(argp2);
  result = (bool)((BWAPI::DamageType const *)arg1)->operator !=((BWAPI::DamageType const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DamageType___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::DamageType *arg1 = (BWAPI::DamageType *) 0 ;
  BWAPI::DamageType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DamageType___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__DamageType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DamageType___lt__" "', argument " "1"" of type '" "BWAPI::DamageType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::DamageType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__DamageType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DamageType___lt__" "', argument " "2"" of type '" "BWAPI::DamageType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DamageType___lt__" "', argument " "2"" of type '" "BWAPI::DamageType const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::DamageType * >(argp2);
  result = (bool)((BWAPI::DamageType const *)arg1)->operator <((BWAPI::DamageType const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DamageType_getID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::DamageType *arg1 = (BWAPI::DamageType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DamageType_getID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__DamageType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DamageType_getID" "', argument " "1"" of type '" "BWAPI::DamageType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::DamageType * >(argp1);
  result = (int)((BWAPI::DamageType const *)arg1)->getID();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DamageType_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::DamageType *arg1 = (BWAPI::DamageType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DamageType_getName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__DamageType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DamageType_getName" "', argument " "1"" of type '" "BWAPI::DamageType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::DamageType * >(argp1);
  result = ((BWAPI::DamageType const *)arg1)->getName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DamageType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::DamageType *arg1 = (BWAPI::DamageType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DamageType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__DamageType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DamageType" "', argument " "1"" of type '" "BWAPI::DamageType *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::DamageType * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DamageType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BWAPI__DamageType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_getDamageType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  BWAPI::DamageType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:getDamageType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "getDamageType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = BWAPI::DamageTypes::getDamageType(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::DamageType(static_cast< const BWAPI::DamageType& >(result))), SWIGTYPE_p_BWAPI__DamageType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_allDamageTypes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< BWAPI::DamageType > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":allDamageTypes")) SWIG_fail;
  result = (std::set< BWAPI::DamageType > *) &BWAPI::DamageTypes::allDamageTypes();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_BWAPI__DamageType_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_DamageTypes_Independent_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DamageTypes_Independent is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DamageTypes_Independent_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::DamageTypes::Independent), SWIGTYPE_p_BWAPI__DamageType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Explosive_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Explosive is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Explosive_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::DamageTypes::Explosive), SWIGTYPE_p_BWAPI__DamageType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Concussive_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Concussive is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Concussive_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::DamageTypes::Concussive), SWIGTYPE_p_BWAPI__DamageType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_DamageTypes_Normal_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DamageTypes_Normal is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DamageTypes_Normal_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::DamageTypes::Normal), SWIGTYPE_p_BWAPI__DamageType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Ignore_Armor_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Ignore_Armor is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Ignore_Armor_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::DamageTypes::Ignore_Armor), SWIGTYPE_p_BWAPI__DamageType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_DamageTypes_None_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DamageTypes_None is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DamageTypes_None_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::DamageTypes::None), SWIGTYPE_p_BWAPI__DamageType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_DamageTypes_Unknown_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DamageTypes_Unknown is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DamageTypes_Unknown_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::DamageTypes::Unknown), SWIGTYPE_p_BWAPI__DamageType,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_Error__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Error *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Error")) SWIG_fail;
  result = (BWAPI::Error *)new BWAPI::Error();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Error, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Error__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Error *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Error",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Error" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (BWAPI::Error *)new BWAPI::Error(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Error, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Error__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Error *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Error *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Error",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BWAPI__Error,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Error" "', argument " "1"" of type '" "BWAPI::Error const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Error" "', argument " "1"" of type '" "BWAPI::Error const &""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Error * >(argp1);
  result = (BWAPI::Error *)new BWAPI::Error((BWAPI::Error const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Error, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Error(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Error__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BWAPI__Error, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Error__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Error__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Error'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BWAPI::Error()\n"
    "    BWAPI::Error(int)\n"
    "    BWAPI::Error(BWAPI::Error const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Error___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Error *arg1 = (BWAPI::Error *) 0 ;
  BWAPI::Error *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Error___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Error, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Error___eq__" "', argument " "1"" of type '" "BWAPI::Error const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Error * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Error,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Error___eq__" "', argument " "2"" of type '" "BWAPI::Error const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Error___eq__" "', argument " "2"" of type '" "BWAPI::Error const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Error * >(argp2);
  result = (bool)((BWAPI::Error const *)arg1)->operator ==((BWAPI::Error const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Error___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Error *arg1 = (BWAPI::Error *) 0 ;
  BWAPI::Error *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Error___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Error, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Error___ne__" "', argument " "1"" of type '" "BWAPI::Error const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Error * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Error,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Error___ne__" "', argument " "2"" of type '" "BWAPI::Error const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Error___ne__" "', argument " "2"" of type '" "BWAPI::Error const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Error * >(argp2);
  result = (bool)((BWAPI::Error const *)arg1)->operator !=((BWAPI::Error const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Error___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Error *arg1 = (BWAPI::Error *) 0 ;
  BWAPI::Error *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Error___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Error, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Error___lt__" "', argument " "1"" of type '" "BWAPI::Error const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Error * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Error,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Error___lt__" "', argument " "2"" of type '" "BWAPI::Error const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Error___lt__" "', argument " "2"" of type '" "BWAPI::Error const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Error * >(argp2);
  result = (bool)((BWAPI::Error const *)arg1)->operator <((BWAPI::Error const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Error_getID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Error *arg1 = (BWAPI::Error *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Error_getID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Error, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Error_getID" "', argument " "1"" of type '" "BWAPI::Error const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Error * >(argp1);
  result = (int)((BWAPI::Error const *)arg1)->getID();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Error_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Error *arg1 = (BWAPI::Error *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Error_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Error, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Error_toString" "', argument " "1"" of type '" "BWAPI::Error const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Error * >(argp1);
  result = ((BWAPI::Error const *)arg1)->toString();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Error *arg1 = (BWAPI::Error *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Error",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Error, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Error" "', argument " "1"" of type '" "BWAPI::Error *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Error * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Error_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BWAPI__Error, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_getError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  BWAPI::Error result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:getError",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "getError" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = BWAPI::Errors::getError(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::Error(static_cast< const BWAPI::Error& >(result))), SWIGTYPE_p_BWAPI__Error, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_allErrors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< BWAPI::Error > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":allErrors")) SWIG_fail;
  result = (std::set< BWAPI::Error > *) &BWAPI::Errors::allErrors();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_BWAPI__Error_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Unit_Does_Not_Exist_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Unit_Does_Not_Exist is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Unit_Does_Not_Exist_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Errors::Unit_Does_Not_Exist), SWIGTYPE_p_BWAPI__Error,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Unit_Not_Visible_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Unit_Not_Visible is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Unit_Not_Visible_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Errors::Unit_Not_Visible), SWIGTYPE_p_BWAPI__Error,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Unit_Not_Owned_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Unit_Not_Owned is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Unit_Not_Owned_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Errors::Unit_Not_Owned), SWIGTYPE_p_BWAPI__Error,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Unit_Busy_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Unit_Busy is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Unit_Busy_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Errors::Unit_Busy), SWIGTYPE_p_BWAPI__Error,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Incompatible_UnitType_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Incompatible_UnitType is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Incompatible_UnitType_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Errors::Incompatible_UnitType), SWIGTYPE_p_BWAPI__Error,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Incompatible_TechType_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Incompatible_TechType is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Incompatible_TechType_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Errors::Incompatible_TechType), SWIGTYPE_p_BWAPI__Error,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Incompatible_State_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Incompatible_State is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Incompatible_State_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Errors::Incompatible_State), SWIGTYPE_p_BWAPI__Error,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Already_Researched_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Already_Researched is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Already_Researched_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Errors::Already_Researched), SWIGTYPE_p_BWAPI__Error,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Fully_Upgraded_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Fully_Upgraded is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Fully_Upgraded_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Errors::Fully_Upgraded), SWIGTYPE_p_BWAPI__Error,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Currently_Researching_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Currently_Researching is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Currently_Researching_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Errors::Currently_Researching), SWIGTYPE_p_BWAPI__Error,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Currently_Upgrading_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Currently_Upgrading is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Currently_Upgrading_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Errors::Currently_Upgrading), SWIGTYPE_p_BWAPI__Error,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Insufficient_Minerals_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Insufficient_Minerals is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Insufficient_Minerals_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Errors::Insufficient_Minerals), SWIGTYPE_p_BWAPI__Error,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Insufficient_Gas_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Insufficient_Gas is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Insufficient_Gas_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Errors::Insufficient_Gas), SWIGTYPE_p_BWAPI__Error,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Insufficient_Supply_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Insufficient_Supply is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Insufficient_Supply_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Errors::Insufficient_Supply), SWIGTYPE_p_BWAPI__Error,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Insufficient_Energy_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Insufficient_Energy is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Insufficient_Energy_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Errors::Insufficient_Energy), SWIGTYPE_p_BWAPI__Error,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Insufficient_Tech_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Insufficient_Tech is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Insufficient_Tech_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Errors::Insufficient_Tech), SWIGTYPE_p_BWAPI__Error,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Insufficient_Ammo_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Insufficient_Ammo is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Insufficient_Ammo_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Errors::Insufficient_Ammo), SWIGTYPE_p_BWAPI__Error,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Insufficient_Space_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Insufficient_Space is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Insufficient_Space_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Errors::Insufficient_Space), SWIGTYPE_p_BWAPI__Error,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Invalid_Tile_Position_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Invalid_Tile_Position is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Invalid_Tile_Position_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Errors::Invalid_Tile_Position), SWIGTYPE_p_BWAPI__Error,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Unbuildable_Location_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Unbuildable_Location is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Unbuildable_Location_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Errors::Unbuildable_Location), SWIGTYPE_p_BWAPI__Error,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Unreachable_Location_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Unreachable_Location is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Unreachable_Location_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Errors::Unreachable_Location), SWIGTYPE_p_BWAPI__Error,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Out_Of_Range_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Out_Of_Range is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Out_Of_Range_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Errors::Out_Of_Range), SWIGTYPE_p_BWAPI__Error,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Unable_To_Hit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Unable_To_Hit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Unable_To_Hit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Errors::Unable_To_Hit), SWIGTYPE_p_BWAPI__Error,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Access_Denied_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Access_Denied is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Access_Denied_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Errors::Access_Denied), SWIGTYPE_p_BWAPI__Error,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Errors_None_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Errors_None is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Errors_None_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Errors::None), SWIGTYPE_p_BWAPI__Error,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Errors_Unknown_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Errors_Unknown is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Errors_Unknown_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Errors::Unknown), SWIGTYPE_p_BWAPI__Error,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_Event(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Event *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Event")) SWIG_fail;
  result = (BWAPI::Event *)new BWAPI::Event();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Event, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Event___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Event *arg1 = (BWAPI::Event *) 0 ;
  BWAPI::Event *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Event___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Event, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event___eq__" "', argument " "1"" of type '" "BWAPI::Event *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Event * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Event,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Event___eq__" "', argument " "2"" of type '" "BWAPI::Event const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Event___eq__" "', argument " "2"" of type '" "BWAPI::Event const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Event * >(argp2);
  result = (bool)(arg1)->operator ==((BWAPI::Event const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Event_MatchStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Event result;
  
  if (!PyArg_ParseTuple(args,(char *)":Event_MatchStart")) SWIG_fail;
  result = BWAPI::Event::MatchStart();
  resultobj = SWIG_NewPointerObj((new BWAPI::Event(static_cast< const BWAPI::Event& >(result))), SWIGTYPE_p_BWAPI__Event, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Event_MatchEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Event result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Event_MatchEnd",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Event_MatchEnd" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  result = BWAPI::Event::MatchEnd(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::Event(static_cast< const BWAPI::Event& >(result))), SWIGTYPE_p_BWAPI__Event, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Event_MatchFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Event result;
  
  if (!PyArg_ParseTuple(args,(char *)":Event_MatchFrame")) SWIG_fail;
  result = BWAPI::Event::MatchFrame();
  resultobj = SWIG_NewPointerObj((new BWAPI::Event(static_cast< const BWAPI::Event& >(result))), SWIGTYPE_p_BWAPI__Event, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Event_MenuFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Event result;
  
  if (!PyArg_ParseTuple(args,(char *)":Event_MenuFrame")) SWIG_fail;
  result = BWAPI::Event::MenuFrame();
  resultobj = SWIG_NewPointerObj((new BWAPI::Event(static_cast< const BWAPI::Event& >(result))), SWIGTYPE_p_BWAPI__Event, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Event_SendText(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  BWAPI::Event result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Event_SendText",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Event_SendText" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = BWAPI::Event::SendText(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::Event(static_cast< const BWAPI::Event& >(result))), SWIGTYPE_p_BWAPI__Event, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Event_ReceiveText(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::Event result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Event_ReceiveText",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_ReceiveText" "', argument " "1"" of type '" "BWAPI::Player *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Event_ReceiveText" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = BWAPI::Event::ReceiveText(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new BWAPI::Event(static_cast< const BWAPI::Event& >(result))), SWIGTYPE_p_BWAPI__Event, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Event_PlayerLeft(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Event result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Event_PlayerLeft",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_PlayerLeft" "', argument " "1"" of type '" "BWAPI::Player *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  result = BWAPI::Event::PlayerLeft(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::Event(static_cast< const BWAPI::Event& >(result))), SWIGTYPE_p_BWAPI__Event, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Event_NukeDetect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Position arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Event result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Event_NukeDetect",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Position,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_NukeDetect" "', argument " "1"" of type '" "Position""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Event_NukeDetect" "', argument " "1"" of type '" "Position""'");
    } else {
      Position * temp = reinterpret_cast< Position * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = BWAPI::Event::NukeDetect(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::Event(static_cast< const BWAPI::Event& >(result))), SWIGTYPE_p_BWAPI__Event, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Event_UnitDiscover(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Event result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Event_UnitDiscover",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_UnitDiscover" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = BWAPI::Event::UnitDiscover(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::Event(static_cast< const BWAPI::Event& >(result))), SWIGTYPE_p_BWAPI__Event, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Event_UnitEvade(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Event result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Event_UnitEvade",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_UnitEvade" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = BWAPI::Event::UnitEvade(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::Event(static_cast< const BWAPI::Event& >(result))), SWIGTYPE_p_BWAPI__Event, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Event_UnitShow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Event result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Event_UnitShow",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_UnitShow" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = BWAPI::Event::UnitShow(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::Event(static_cast< const BWAPI::Event& >(result))), SWIGTYPE_p_BWAPI__Event, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Event_UnitHide(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Event result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Event_UnitHide",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_UnitHide" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = BWAPI::Event::UnitHide(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::Event(static_cast< const BWAPI::Event& >(result))), SWIGTYPE_p_BWAPI__Event, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Event_UnitCreate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Event result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Event_UnitCreate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_UnitCreate" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = BWAPI::Event::UnitCreate(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::Event(static_cast< const BWAPI::Event& >(result))), SWIGTYPE_p_BWAPI__Event, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Event_UnitDestroy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Event result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Event_UnitDestroy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_UnitDestroy" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = BWAPI::Event::UnitDestroy(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::Event(static_cast< const BWAPI::Event& >(result))), SWIGTYPE_p_BWAPI__Event, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Event_UnitMorph(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Event result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Event_UnitMorph",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_UnitMorph" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = BWAPI::Event::UnitMorph(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::Event(static_cast< const BWAPI::Event& >(result))), SWIGTYPE_p_BWAPI__Event, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Event_UnitRenegade(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Event result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Event_UnitRenegade",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_UnitRenegade" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = BWAPI::Event::UnitRenegade(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::Event(static_cast< const BWAPI::Event& >(result))), SWIGTYPE_p_BWAPI__Event, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Event_SaveGame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  BWAPI::Event result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Event_SaveGame",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Event_SaveGame" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = BWAPI::Event::SaveGame(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::Event(static_cast< const BWAPI::Event& >(result))), SWIGTYPE_p_BWAPI__Event, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Event_type_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Event *arg1 = (BWAPI::Event *) 0 ;
  EventType::Enum arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Event_type_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Event, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_type_set" "', argument " "1"" of type '" "BWAPI::Event *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Event * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_EventType__Enum,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Event_type_set" "', argument " "2"" of type '" "EventType::Enum""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Event_type_set" "', argument " "2"" of type '" "EventType::Enum""'");
    } else {
      EventType::Enum * temp = reinterpret_cast< EventType::Enum * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->type = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Event_type_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Event *arg1 = (BWAPI::Event *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EventType::Enum result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Event_type_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Event, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_type_get" "', argument " "1"" of type '" "BWAPI::Event *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Event * >(argp1);
  result =  ((arg1)->type);
  resultobj = SWIG_NewPointerObj((new EventType::Enum(static_cast< const EventType::Enum& >(result))), SWIGTYPE_p_EventType__Enum, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Event_position_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Event *arg1 = (BWAPI::Event *) 0 ;
  Position arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Event_position_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Event, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_position_set" "', argument " "1"" of type '" "BWAPI::Event *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Event * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Position,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Event_position_set" "', argument " "2"" of type '" "Position""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Event_position_set" "', argument " "2"" of type '" "Position""'");
    } else {
      Position * temp = reinterpret_cast< Position * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->position = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Event_position_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Event *arg1 = (BWAPI::Event *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Position result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Event_position_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Event, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_position_get" "', argument " "1"" of type '" "BWAPI::Event *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Event * >(argp1);
  result =  ((arg1)->position);
  resultobj = SWIG_NewPointerObj((new Position(static_cast< const Position& >(result))), SWIGTYPE_p_Position, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Event_text_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Event *arg1 = (BWAPI::Event *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Event_text_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Event, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_text_set" "', argument " "1"" of type '" "BWAPI::Event *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Event * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Event_text_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Event_text_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->text = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Event_text_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Event *arg1 = (BWAPI::Event *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Event_text_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Event, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_text_get" "', argument " "1"" of type '" "BWAPI::Event *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Event * >(argp1);
  result = (std::string *) & ((arg1)->text);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Event_unit_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Event *arg1 = (BWAPI::Event *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Event_unit_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Event, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_unit_set" "', argument " "1"" of type '" "BWAPI::Event *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Event * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Unit, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Event_unit_set" "', argument " "2"" of type '" "BWAPI::Unit *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Unit * >(argp2);
  if (arg1) (arg1)->unit = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Event_unit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Event *arg1 = (BWAPI::Event *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Unit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Event_unit_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Event, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_unit_get" "', argument " "1"" of type '" "BWAPI::Event *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Event * >(argp1);
  result = (BWAPI::Unit *) ((arg1)->unit);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Event_player_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Event *arg1 = (BWAPI::Event *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Event_player_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Event, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_player_set" "', argument " "1"" of type '" "BWAPI::Event *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Event * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Player, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Event_player_set" "', argument " "2"" of type '" "BWAPI::Player *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Player * >(argp2);
  if (arg1) (arg1)->player = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Event_player_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Event *arg1 = (BWAPI::Event *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Player *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Event_player_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Event, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_player_get" "', argument " "1"" of type '" "BWAPI::Event *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Event * >(argp1);
  result = (BWAPI::Player *) ((arg1)->player);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Event_isWinner_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Event *arg1 = (BWAPI::Event *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Event_isWinner_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Event, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_isWinner_set" "', argument " "1"" of type '" "BWAPI::Event *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Event * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Event_isWinner_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->isWinner = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Event_isWinner_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Event *arg1 = (BWAPI::Event *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Event_isWinner_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Event, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_isWinner_get" "', argument " "1"" of type '" "BWAPI::Event *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Event * >(argp1);
  result = (bool) ((arg1)->isWinner);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Event(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Event *arg1 = (BWAPI::Event *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Event",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Event, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Event" "', argument " "1"" of type '" "BWAPI::Event *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Event * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Event_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BWAPI__Event, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ExplosionType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::ExplosionType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ExplosionType")) SWIG_fail;
  result = (BWAPI::ExplosionType *)new BWAPI::ExplosionType();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__ExplosionType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ExplosionType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::ExplosionType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ExplosionType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ExplosionType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (BWAPI::ExplosionType *)new BWAPI::ExplosionType(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__ExplosionType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ExplosionType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::ExplosionType *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::ExplosionType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ExplosionType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BWAPI__ExplosionType,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ExplosionType" "', argument " "1"" of type '" "BWAPI::ExplosionType const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ExplosionType" "', argument " "1"" of type '" "BWAPI::ExplosionType const &""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::ExplosionType * >(argp1);
  result = (BWAPI::ExplosionType *)new BWAPI::ExplosionType((BWAPI::ExplosionType const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__ExplosionType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ExplosionType(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ExplosionType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BWAPI__ExplosionType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ExplosionType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ExplosionType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ExplosionType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BWAPI::ExplosionType()\n"
    "    BWAPI::ExplosionType(int)\n"
    "    BWAPI::ExplosionType(BWAPI::ExplosionType const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExplosionType___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::ExplosionType *arg1 = (BWAPI::ExplosionType *) 0 ;
  BWAPI::ExplosionType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ExplosionType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__ExplosionType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExplosionType___eq__" "', argument " "1"" of type '" "BWAPI::ExplosionType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::ExplosionType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__ExplosionType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExplosionType___eq__" "', argument " "2"" of type '" "BWAPI::ExplosionType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExplosionType___eq__" "', argument " "2"" of type '" "BWAPI::ExplosionType const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::ExplosionType * >(argp2);
  result = (bool)((BWAPI::ExplosionType const *)arg1)->operator ==((BWAPI::ExplosionType const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExplosionType___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::ExplosionType *arg1 = (BWAPI::ExplosionType *) 0 ;
  BWAPI::ExplosionType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ExplosionType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__ExplosionType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExplosionType___ne__" "', argument " "1"" of type '" "BWAPI::ExplosionType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::ExplosionType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__ExplosionType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExplosionType___ne__" "', argument " "2"" of type '" "BWAPI::ExplosionType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExplosionType___ne__" "', argument " "2"" of type '" "BWAPI::ExplosionType const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::ExplosionType * >(argp2);
  result = (bool)((BWAPI::ExplosionType const *)arg1)->operator !=((BWAPI::ExplosionType const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExplosionType___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::ExplosionType *arg1 = (BWAPI::ExplosionType *) 0 ;
  BWAPI::ExplosionType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ExplosionType___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__ExplosionType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExplosionType___lt__" "', argument " "1"" of type '" "BWAPI::ExplosionType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::ExplosionType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__ExplosionType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExplosionType___lt__" "', argument " "2"" of type '" "BWAPI::ExplosionType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExplosionType___lt__" "', argument " "2"" of type '" "BWAPI::ExplosionType const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::ExplosionType * >(argp2);
  result = (bool)((BWAPI::ExplosionType const *)arg1)->operator <((BWAPI::ExplosionType const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExplosionType_getID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::ExplosionType *arg1 = (BWAPI::ExplosionType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ExplosionType_getID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__ExplosionType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExplosionType_getID" "', argument " "1"" of type '" "BWAPI::ExplosionType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::ExplosionType * >(argp1);
  result = (int)((BWAPI::ExplosionType const *)arg1)->getID();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExplosionType_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::ExplosionType *arg1 = (BWAPI::ExplosionType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ExplosionType_getName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__ExplosionType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExplosionType_getName" "', argument " "1"" of type '" "BWAPI::ExplosionType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::ExplosionType * >(argp1);
  result = ((BWAPI::ExplosionType const *)arg1)->getName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ExplosionType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::ExplosionType *arg1 = (BWAPI::ExplosionType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ExplosionType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__ExplosionType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ExplosionType" "', argument " "1"" of type '" "BWAPI::ExplosionType *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::ExplosionType * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ExplosionType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BWAPI__ExplosionType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_getExplosionType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  BWAPI::ExplosionType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:getExplosionType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "getExplosionType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = BWAPI::ExplosionTypes::getExplosionType(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::ExplosionType(static_cast< const BWAPI::ExplosionType& >(result))), SWIGTYPE_p_BWAPI__ExplosionType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_allExplosionTypes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< BWAPI::ExplosionType > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":allExplosionTypes")) SWIG_fail;
  result = (std::set< BWAPI::ExplosionType > *) &BWAPI::ExplosionTypes::allExplosionTypes();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_BWAPI__ExplosionType_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_ExplosionTypes_None_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExplosionTypes_None is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ExplosionTypes_None_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::ExplosionTypes::None), SWIGTYPE_p_BWAPI__ExplosionType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ExplosionTypes_Normal_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExplosionTypes_Normal is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ExplosionTypes_Normal_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::ExplosionTypes::Normal), SWIGTYPE_p_BWAPI__ExplosionType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Radial_Splash_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Radial_Splash is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Radial_Splash_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::ExplosionTypes::Radial_Splash), SWIGTYPE_p_BWAPI__ExplosionType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Enemy_Splash_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Enemy_Splash is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Enemy_Splash_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::ExplosionTypes::Enemy_Splash), SWIGTYPE_p_BWAPI__ExplosionType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ExplosionTypes_Lockdown_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExplosionTypes_Lockdown is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ExplosionTypes_Lockdown_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::ExplosionTypes::Lockdown), SWIGTYPE_p_BWAPI__ExplosionType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Nuclear_Missile_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Nuclear_Missile is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Nuclear_Missile_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::ExplosionTypes::Nuclear_Missile), SWIGTYPE_p_BWAPI__ExplosionType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ExplosionTypes_Parasite_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExplosionTypes_Parasite is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ExplosionTypes_Parasite_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::ExplosionTypes::Parasite), SWIGTYPE_p_BWAPI__ExplosionType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Broodlings_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Broodlings is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Broodlings_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::ExplosionTypes::Broodlings), SWIGTYPE_p_BWAPI__ExplosionType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ExplosionTypes_EMP_Shockwave_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExplosionTypes_EMP_Shockwave is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ExplosionTypes_EMP_Shockwave_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::ExplosionTypes::EMP_Shockwave), SWIGTYPE_p_BWAPI__ExplosionType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ExplosionTypes_Irradiate_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExplosionTypes_Irradiate is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ExplosionTypes_Irradiate_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::ExplosionTypes::Irradiate), SWIGTYPE_p_BWAPI__ExplosionType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ExplosionTypes_Ensnare_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExplosionTypes_Ensnare is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ExplosionTypes_Ensnare_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::ExplosionTypes::Ensnare), SWIGTYPE_p_BWAPI__ExplosionType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ExplosionTypes_Plague_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExplosionTypes_Plague is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ExplosionTypes_Plague_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::ExplosionTypes::Plague), SWIGTYPE_p_BWAPI__ExplosionType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ExplosionTypes_Stasis_Field_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExplosionTypes_Stasis_Field is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ExplosionTypes_Stasis_Field_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::ExplosionTypes::Stasis_Field), SWIGTYPE_p_BWAPI__ExplosionType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ExplosionTypes_Dark_Swarm_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExplosionTypes_Dark_Swarm is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ExplosionTypes_Dark_Swarm_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::ExplosionTypes::Dark_Swarm), SWIGTYPE_p_BWAPI__ExplosionType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ExplosionTypes_Consume_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExplosionTypes_Consume is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ExplosionTypes_Consume_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::ExplosionTypes::Consume), SWIGTYPE_p_BWAPI__ExplosionType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ExplosionTypes_Yamato_Gun_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExplosionTypes_Yamato_Gun is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ExplosionTypes_Yamato_Gun_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::ExplosionTypes::Yamato_Gun), SWIGTYPE_p_BWAPI__ExplosionType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ExplosionTypes_Restoration_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExplosionTypes_Restoration is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ExplosionTypes_Restoration_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::ExplosionTypes::Restoration), SWIGTYPE_p_BWAPI__ExplosionType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ExplosionTypes_Disruption_Web_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExplosionTypes_Disruption_Web is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ExplosionTypes_Disruption_Web_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::ExplosionTypes::Disruption_Web), SWIGTYPE_p_BWAPI__ExplosionType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ExplosionTypes_Corrosive_Acid_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExplosionTypes_Corrosive_Acid is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ExplosionTypes_Corrosive_Acid_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::ExplosionTypes::Corrosive_Acid), SWIGTYPE_p_BWAPI__ExplosionType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ExplosionTypes_Mind_Control_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExplosionTypes_Mind_Control is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ExplosionTypes_Mind_Control_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::ExplosionTypes::Mind_Control), SWIGTYPE_p_BWAPI__ExplosionType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ExplosionTypes_Feedback_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExplosionTypes_Feedback is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ExplosionTypes_Feedback_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::ExplosionTypes::Feedback), SWIGTYPE_p_BWAPI__ExplosionType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ExplosionTypes_Optical_Flare_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExplosionTypes_Optical_Flare is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ExplosionTypes_Optical_Flare_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::ExplosionTypes::Optical_Flare), SWIGTYPE_p_BWAPI__ExplosionType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ExplosionTypes_Maelstrom_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExplosionTypes_Maelstrom is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ExplosionTypes_Maelstrom_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::ExplosionTypes::Maelstrom), SWIGTYPE_p_BWAPI__ExplosionType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Air_Splash_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Air_Splash is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Air_Splash_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::ExplosionTypes::Air_Splash), SWIGTYPE_p_BWAPI__ExplosionType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ExplosionTypes_Unknown_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExplosionTypes_Unknown is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ExplosionTypes_Unknown_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::ExplosionTypes::Unknown), SWIGTYPE_p_BWAPI__ExplosionType,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Force_getID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Force *arg1 = (BWAPI::Force *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Force_getID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Force, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Force_getID" "', argument " "1"" of type '" "BWAPI::Force const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Force * >(argp1);
  result = (int)((BWAPI::Force const *)arg1)->getID();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Force_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Force *arg1 = (BWAPI::Force *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Force_getName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Force, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Force_getName" "', argument " "1"" of type '" "BWAPI::Force const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Force * >(argp1);
  result = ((BWAPI::Force const *)arg1)->getName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Force_getPlayers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Force *arg1 = (BWAPI::Force *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SetWrapper< BWAPI::Player * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Force_getPlayers",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Force, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Force_getPlayers" "', argument " "1"" of type '" "BWAPI::Force *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Force * >(argp1);
  result = (SetWrapper< BWAPI::Player * > *)BWAPI_Force_getPlayers(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapperT_BWAPI__Player_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Force(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Force *arg1 = (BWAPI::Force *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Force",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Force, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Force" "', argument " "1"" of type '" "BWAPI::Force *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Force * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Force_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BWAPI__Force, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Game_getBullets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< BWAPI::Bullet * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_getBullets",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getBullets" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (std::set< BWAPI::Bullet * > *) &(arg1)->getBullets();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_BWAPI__Bullet_p_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getNukeDots(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< Position > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_getNukeDots",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getNukeDots" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (std::set< Position > *) &(arg1)->getNukeDots();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_Position_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getEvents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< BWAPI::Event > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_getEvents",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getEvents" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (std::list< BWAPI::Event > *) &(arg1)->getEvents();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_BWAPI__Event_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::Force *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_getForce",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getForce" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_getForce" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (BWAPI::Force *)(arg1)->getForce(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Force, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getPlayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::Player *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_getPlayer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getPlayer" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_getPlayer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (BWAPI::Player *)(arg1)->getPlayer(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getUnit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::Unit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_getUnit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getUnit" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_getUnit" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (BWAPI::Unit *)(arg1)->getUnit(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_indexToUnit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::Unit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_indexToUnit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_indexToUnit" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_indexToUnit" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (BWAPI::Unit *)(arg1)->indexToUnit(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getGameType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GameType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_getGameType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getGameType" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (arg1)->getGameType();
  resultobj = SWIG_NewPointerObj((new GameType(static_cast< const GameType& >(result))), SWIGTYPE_p_GameType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getLatency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_getLatency",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getLatency" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (int)(arg1)->getLatency();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getFrameCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_getFrameCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getFrameCount" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (int)(arg1)->getFrameCount();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getFPS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_getFPS",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getFPS" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (int)(arg1)->getFPS();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getAverageFPS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_getAverageFPS",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getAverageFPS" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (double)(arg1)->getAverageFPS();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getMousePosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Position result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_getMousePosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getMousePosition" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (arg1)->getMousePosition();
  resultobj = SWIG_NewPointerObj((new BWAPI::Position(static_cast< const BWAPI::Position& >(result))), SWIGTYPE_p_BWAPI__Position, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getMouseState__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  MouseButton arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_getMouseState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getMouseState" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_MouseButton,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game_getMouseState" "', argument " "2"" of type '" "MouseButton""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_getMouseState" "', argument " "2"" of type '" "MouseButton""'");
    } else {
      MouseButton * temp = reinterpret_cast< MouseButton * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->getMouseState(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getMouseState__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_getMouseState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getMouseState" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_getMouseState" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)(arg1)->getMouseState(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getMouseState(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_MouseButton, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Game_getMouseState__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Game_getMouseState__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Game_getMouseState'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getMouseState(BWAPI::Game *,MouseButton)\n"
    "    getMouseState(BWAPI::Game *,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getKeyState__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  Key arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_getKeyState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getKeyState" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Key,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game_getKeyState" "', argument " "2"" of type '" "Key""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_getKeyState" "', argument " "2"" of type '" "Key""'");
    } else {
      Key * temp = reinterpret_cast< Key * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->getKeyState(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getKeyState__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_getKeyState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getKeyState" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_getKeyState" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)(arg1)->getKeyState(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getKeyState(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Key, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Game_getKeyState__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Game_getKeyState__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Game_getKeyState'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getKeyState(BWAPI::Game *,Key)\n"
    "    getKeyState(BWAPI::Game *,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getScreenPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Position result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_getScreenPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getScreenPosition" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (arg1)->getScreenPosition();
  resultobj = SWIG_NewPointerObj((new BWAPI::Position(static_cast< const BWAPI::Position& >(result))), SWIGTYPE_p_BWAPI__Position, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_setScreenPosition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Game_setScreenPosition",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_setScreenPosition" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_setScreenPosition" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_setScreenPosition" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->setScreenPosition(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_setScreenPosition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Position arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_setScreenPosition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_setScreenPosition" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Position,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game_setScreenPosition" "', argument " "2"" of type '" "BWAPI::Position""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_setScreenPosition" "', argument " "2"" of type '" "BWAPI::Position""'");
    } else {
      BWAPI::Position * temp = reinterpret_cast< BWAPI::Position * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->setScreenPosition(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_setScreenPosition(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BWAPI__Position, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Game_setScreenPosition__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Game_setScreenPosition__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Game_setScreenPosition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setScreenPosition(BWAPI::Game *,int,int)\n"
    "    setScreenPosition(BWAPI::Game *,BWAPI::Position)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_pingMinimap__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Game_pingMinimap",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_pingMinimap" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_pingMinimap" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_pingMinimap" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->pingMinimap(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_pingMinimap__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Position arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_pingMinimap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_pingMinimap" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Position,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game_pingMinimap" "', argument " "2"" of type '" "BWAPI::Position""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_pingMinimap" "', argument " "2"" of type '" "BWAPI::Position""'");
    } else {
      BWAPI::Position * temp = reinterpret_cast< BWAPI::Position * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->pingMinimap(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_pingMinimap(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BWAPI__Position, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Game_pingMinimap__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Game_pingMinimap__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Game_pingMinimap'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pingMinimap(BWAPI::Game *,int,int)\n"
    "    pingMinimap(BWAPI::Game *,BWAPI::Position)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_isFlagEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_isFlagEnabled",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_isFlagEnabled" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_isFlagEnabled" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)(arg1)->isFlagEnabled(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_enableFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_enableFlag",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_enableFlag" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_enableFlag" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->enableFlag(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getLastError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Error result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_getLastError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getLastError" "', argument " "1"" of type '" "BWAPI::Game const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = ((BWAPI::Game const *)arg1)->getLastError();
  resultobj = SWIG_NewPointerObj((new BWAPI::Error(static_cast< const BWAPI::Error& >(result))), SWIGTYPE_p_BWAPI__Error, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_setLastError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Error arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_setLastError",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_setLastError" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Error,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game_setLastError" "', argument " "2"" of type '" "BWAPI::Error""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_setLastError" "', argument " "2"" of type '" "BWAPI::Error""'");
    } else {
      BWAPI::Error * temp = reinterpret_cast< BWAPI::Error * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->setLastError(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_mapWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_mapWidth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_mapWidth" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (int)(arg1)->mapWidth();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_mapHeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_mapHeight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_mapHeight" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (int)(arg1)->mapHeight();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_mapFileName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_mapFileName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_mapFileName" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (arg1)->mapFileName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_mapPathName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_mapPathName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_mapPathName" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (arg1)->mapPathName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_mapName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_mapName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_mapName" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (arg1)->mapName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_mapHash(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_mapHash",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_mapHash" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (arg1)->mapHash();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_isWalkable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Game_isWalkable",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_isWalkable" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_isWalkable" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_isWalkable" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)(arg1)->isWalkable(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getGroundHeight__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Game_getGroundHeight",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getGroundHeight" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_getGroundHeight" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_getGroundHeight" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (int)(arg1)->getGroundHeight(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getGroundHeight__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  TilePosition arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_getGroundHeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getGroundHeight" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_TilePosition,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game_getGroundHeight" "', argument " "2"" of type '" "TilePosition""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_getGroundHeight" "', argument " "2"" of type '" "TilePosition""'");
    } else {
      TilePosition * temp = reinterpret_cast< TilePosition * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (int)(arg1)->getGroundHeight(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getGroundHeight(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_TilePosition, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Game_getGroundHeight__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Game_getGroundHeight__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Game_getGroundHeight'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getGroundHeight(BWAPI::Game *,int,int)\n"
    "    getGroundHeight(BWAPI::Game *,TilePosition)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_isBuildable__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Game_isBuildable",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_isBuildable" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_isBuildable" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_isBuildable" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)(arg1)->isBuildable(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_isBuildable__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  TilePosition arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_isBuildable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_isBuildable" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_TilePosition,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game_isBuildable" "', argument " "2"" of type '" "TilePosition""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_isBuildable" "', argument " "2"" of type '" "TilePosition""'");
    } else {
      TilePosition * temp = reinterpret_cast< TilePosition * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->isBuildable(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_isBuildable(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_TilePosition, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Game_isBuildable__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Game_isBuildable__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Game_isBuildable'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    isBuildable(BWAPI::Game *,int,int)\n"
    "    isBuildable(BWAPI::Game *,TilePosition)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_isVisible__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Game_isVisible",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_isVisible" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_isVisible" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_isVisible" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)(arg1)->isVisible(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_isVisible__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  TilePosition arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_isVisible",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_isVisible" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_TilePosition,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game_isVisible" "', argument " "2"" of type '" "TilePosition""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_isVisible" "', argument " "2"" of type '" "TilePosition""'");
    } else {
      TilePosition * temp = reinterpret_cast< TilePosition * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->isVisible(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_isVisible(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_TilePosition, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Game_isVisible__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Game_isVisible__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Game_isVisible'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    isVisible(BWAPI::Game *,int,int)\n"
    "    isVisible(BWAPI::Game *,TilePosition)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_isExplored__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Game_isExplored",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_isExplored" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_isExplored" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_isExplored" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)(arg1)->isExplored(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_isExplored__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  TilePosition arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_isExplored",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_isExplored" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_TilePosition,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game_isExplored" "', argument " "2"" of type '" "TilePosition""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_isExplored" "', argument " "2"" of type '" "TilePosition""'");
    } else {
      TilePosition * temp = reinterpret_cast< TilePosition * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->isExplored(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_isExplored(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_TilePosition, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Game_isExplored__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Game_isExplored__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Game_isExplored'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    isExplored(BWAPI::Game *,int,int)\n"
    "    isExplored(BWAPI::Game *,TilePosition)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_hasCreep__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Game_hasCreep",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_hasCreep" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_hasCreep" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_hasCreep" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)(arg1)->hasCreep(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_hasCreep__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  TilePosition arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_hasCreep",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_hasCreep" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_TilePosition,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game_hasCreep" "', argument " "2"" of type '" "TilePosition""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_hasCreep" "', argument " "2"" of type '" "TilePosition""'");
    } else {
      TilePosition * temp = reinterpret_cast< TilePosition * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->hasCreep(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_hasCreep(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_TilePosition, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Game_hasCreep__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Game_hasCreep__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Game_hasCreep'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hasCreep(BWAPI::Game *,int,int)\n"
    "    hasCreep(BWAPI::Game *,TilePosition)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_hasPower__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Game_hasPower",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_hasPower" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_hasPower" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_hasPower" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_hasPower" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Game_hasPower" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = (bool)(arg1)->hasPower(arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_hasPower__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  TilePosition arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Game_hasPower",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_hasPower" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_TilePosition,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game_hasPower" "', argument " "2"" of type '" "TilePosition""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_hasPower" "', argument " "2"" of type '" "TilePosition""'");
    } else {
      TilePosition * temp = reinterpret_cast< TilePosition * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_hasPower" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_hasPower" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (bool)(arg1)->hasPower(arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_hasPower(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_TilePosition, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Game_hasPower__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Game_hasPower__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Game_hasPower'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hasPower(BWAPI::Game *,int,int,int,int)\n"
    "    hasPower(BWAPI::Game *,TilePosition,int,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_canMake(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Game_canMake",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_canMake" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game_canMake" "', argument " "2"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Unit * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BWAPI__UnitType,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Game_canMake" "', argument " "3"" of type '" "BWAPI::UnitType""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_canMake" "', argument " "3"" of type '" "BWAPI::UnitType""'");
    } else {
      BWAPI::UnitType * temp = reinterpret_cast< BWAPI::UnitType * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (bool)(arg1)->canMake((BWAPI::Unit const *)arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_canResearch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  TechType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Game_canResearch",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_canResearch" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game_canResearch" "', argument " "2"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Unit * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_TechType,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Game_canResearch" "', argument " "3"" of type '" "TechType""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_canResearch" "', argument " "3"" of type '" "TechType""'");
    } else {
      TechType * temp = reinterpret_cast< TechType * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (bool)(arg1)->canResearch((BWAPI::Unit const *)arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_canUpgrade(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  UpgradeType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Game_canUpgrade",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_canUpgrade" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game_canUpgrade" "', argument " "2"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Unit * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_UpgradeType,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Game_canUpgrade" "', argument " "3"" of type '" "UpgradeType""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_canUpgrade" "', argument " "3"" of type '" "UpgradeType""'");
    } else {
      UpgradeType * temp = reinterpret_cast< UpgradeType * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (bool)(arg1)->canUpgrade((BWAPI::Unit const *)arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_printf__varargs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_printf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_printf" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game_printf" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->printf((char const *)arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_printf(PyObject *self, PyObject *args) {
  PyObject *resultobj;
  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args,0,2);
  varargs = PyTuple_GetSlice(args,2,PyTuple_Size(args)+1);
  resultobj = _wrap_Game_printf__varargs__(self,newargs,varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN PyObject *_wrap_Game_sendText__varargs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_sendText",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_sendText" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game_sendText" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->sendText((char const *)arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_sendText(PyObject *self, PyObject *args) {
  PyObject *resultobj;
  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args,0,2);
  varargs = PyTuple_GetSlice(args,2,PyTuple_Size(args)+1);
  resultobj = _wrap_Game_sendText__varargs__(self,newargs,varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN PyObject *_wrap_Game_sendTextEx__varargs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Game_sendTextEx",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_sendTextEx" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_sendTextEx" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Game_sendTextEx" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->sendTextEx(arg2,(char const *)arg3,arg4);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_sendTextEx(PyObject *self, PyObject *args) {
  PyObject *resultobj;
  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args,0,3);
  varargs = PyTuple_GetSlice(args,3,PyTuple_Size(args)+1);
  resultobj = _wrap_Game_sendTextEx__varargs__(self,newargs,varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN PyObject *_wrap_Game_changeRace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  Race arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_changeRace",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_changeRace" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Race,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game_changeRace" "', argument " "2"" of type '" "Race""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_changeRace" "', argument " "2"" of type '" "Race""'");
    } else {
      Race * temp = reinterpret_cast< Race * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->changeRace(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_isInGame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_isInGame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_isInGame" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (bool)(arg1)->isInGame();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_isMultiplayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_isMultiplayer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_isMultiplayer" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (bool)(arg1)->isMultiplayer();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_isBattleNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_isBattleNet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_isBattleNet" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (bool)(arg1)->isBattleNet();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_isPaused(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_isPaused",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_isPaused" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (bool)(arg1)->isPaused();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_isReplay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_isReplay",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_isReplay" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (bool)(arg1)->isReplay();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_startGame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_startGame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_startGame" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  (arg1)->startGame();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_pauseGame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_pauseGame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_pauseGame" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  (arg1)->pauseGame();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_resumeGame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_resumeGame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_resumeGame" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  (arg1)->resumeGame();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_leaveGame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_leaveGame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_leaveGame" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  (arg1)->leaveGame();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_restartGame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_restartGame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_restartGame" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  (arg1)->restartGame();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_setLocalSpeed__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_setLocalSpeed",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_setLocalSpeed" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_setLocalSpeed" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setLocalSpeed(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_setLocalSpeed__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_setLocalSpeed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_setLocalSpeed" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  (arg1)->setLocalSpeed();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_setLocalSpeed(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Game_setLocalSpeed__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Game_setLocalSpeed__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Game_setLocalSpeed'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setLocalSpeed(BWAPI::Game *,int)\n"
    "    setLocalSpeed(BWAPI::Game *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_issueCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Unit * > *arg2 = 0 ;
  UnitCommand arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Game_issueCommand",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_issueCommand" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__setT_BWAPI__Unit_p_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game_issueCommand" "', argument " "2"" of type '" "std::set< BWAPI::Unit * > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_issueCommand" "', argument " "2"" of type '" "std::set< BWAPI::Unit * > const &""'"); 
  }
  arg2 = reinterpret_cast< std::set< BWAPI::Unit * > * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_UnitCommand,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Game_issueCommand" "', argument " "3"" of type '" "UnitCommand""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_issueCommand" "', argument " "3"" of type '" "UnitCommand""'");
    } else {
      UnitCommand * temp = reinterpret_cast< UnitCommand * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (bool)(arg1)->issueCommand((std::set< BWAPI::Unit * > const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_self(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Player *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_self",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_self" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (BWAPI::Player *)(arg1)->self();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_enemy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Player *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_enemy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_enemy" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (BWAPI::Player *)(arg1)->enemy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_setTextSize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_setTextSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_setTextSize" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_setTextSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setTextSize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_setTextSize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_setTextSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_setTextSize" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  (arg1)->setTextSize();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_setTextSize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Game_setTextSize__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Game_setTextSize__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Game_setTextSize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setTextSize(BWAPI::Game *,int)\n"
    "    setTextSize(BWAPI::Game *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawText__varargs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  void *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Game_drawText",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawText" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawText" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawText" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawText" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Game_drawText" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->drawText(arg2,arg3,arg4,(char const *)arg5,arg6);
  resultobj = SWIG_Py_Void();
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawText(PyObject *self, PyObject *args) {
  PyObject *resultobj;
  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args,0,5);
  varargs = PyTuple_GetSlice(args,5,PyTuple_Size(args)+1);
  resultobj = _wrap_Game_drawText__varargs__(self,newargs,varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN PyObject *_wrap_Game_drawTextMap__varargs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Game_drawTextMap",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawTextMap" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawTextMap" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawTextMap" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Game_drawTextMap" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->drawTextMap(arg2,arg3,(char const *)arg4,arg5);
  resultobj = SWIG_Py_Void();
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawTextMap(PyObject *self, PyObject *args) {
  PyObject *resultobj;
  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args,0,4);
  varargs = PyTuple_GetSlice(args,4,PyTuple_Size(args)+1);
  resultobj = _wrap_Game_drawTextMap__varargs__(self,newargs,varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN PyObject *_wrap_Game_drawTextMouse__varargs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Game_drawTextMouse",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawTextMouse" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawTextMouse" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawTextMouse" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Game_drawTextMouse" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->drawTextMouse(arg2,arg3,(char const *)arg4,arg5);
  resultobj = SWIG_Py_Void();
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawTextMouse(PyObject *self, PyObject *args) {
  PyObject *resultobj;
  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args,0,4);
  varargs = PyTuple_GetSlice(args,4,PyTuple_Size(args)+1);
  resultobj = _wrap_Game_drawTextMouse__varargs__(self,newargs,varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN PyObject *_wrap_Game_drawTextScreen__varargs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Game_drawTextScreen",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawTextScreen" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawTextScreen" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawTextScreen" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Game_drawTextScreen" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->drawTextScreen(arg2,arg3,(char const *)arg4,arg5);
  resultobj = SWIG_Py_Void();
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawTextScreen(PyObject *self, PyObject *args) {
  PyObject *resultobj;
  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args,0,4);
  varargs = PyTuple_GetSlice(args,4,PyTuple_Size(args)+1);
  resultobj = _wrap_Game_drawTextScreen__varargs__(self,newargs,varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN PyObject *_wrap_Game_drawBox__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  BWAPI::Color arg7 ;
  bool arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:Game_drawBox",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawBox" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawBox" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawBox" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawBox" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Game_drawBox" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Game_drawBox" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Game_drawBox" "', argument " "7"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawBox" "', argument " "7"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  ecode8 = SWIG_AsVal_bool(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Game_drawBox" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);
  (arg1)->drawBox(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawBox__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  BWAPI::Color arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Game_drawBox",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawBox" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawBox" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawBox" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawBox" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Game_drawBox" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Game_drawBox" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Game_drawBox" "', argument " "7"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawBox" "', argument " "7"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  (arg1)->drawBox(arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawBox(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[9];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 8); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_BWAPI__Color, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_Game_drawBox__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_BWAPI__Color, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    int res = SWIG_AsVal_bool(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_Game_drawBox__SWIG_0(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Game_drawBox'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    drawBox(BWAPI::Game *,int,int,int,int,int,BWAPI::Color,bool)\n"
    "    drawBox(BWAPI::Game *,int,int,int,int,int,BWAPI::Color)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawBoxMap__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Game_drawBoxMap",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawBoxMap" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawBoxMap" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawBoxMap" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawBoxMap" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Game_drawBoxMap" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Game_drawBoxMap" "', argument " "6"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawBoxMap" "', argument " "6"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Game_drawBoxMap" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  (arg1)->drawBoxMap(arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawBoxMap__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Game_drawBoxMap",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawBoxMap" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawBoxMap" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawBoxMap" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawBoxMap" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Game_drawBoxMap" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Game_drawBoxMap" "', argument " "6"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawBoxMap" "', argument " "6"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  (arg1)->drawBoxMap(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawBoxMap(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 7); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_BWAPI__Color, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_Game_drawBoxMap__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_BWAPI__Color, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_Game_drawBoxMap__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Game_drawBoxMap'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    drawBoxMap(BWAPI::Game *,int,int,int,int,BWAPI::Color,bool)\n"
    "    drawBoxMap(BWAPI::Game *,int,int,int,int,BWAPI::Color)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawBoxMouse__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Game_drawBoxMouse",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawBoxMouse" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawBoxMouse" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawBoxMouse" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawBoxMouse" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Game_drawBoxMouse" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Game_drawBoxMouse" "', argument " "6"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawBoxMouse" "', argument " "6"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Game_drawBoxMouse" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  (arg1)->drawBoxMouse(arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawBoxMouse__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Game_drawBoxMouse",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawBoxMouse" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawBoxMouse" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawBoxMouse" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawBoxMouse" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Game_drawBoxMouse" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Game_drawBoxMouse" "', argument " "6"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawBoxMouse" "', argument " "6"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  (arg1)->drawBoxMouse(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawBoxMouse(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 7); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_BWAPI__Color, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_Game_drawBoxMouse__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_BWAPI__Color, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_Game_drawBoxMouse__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Game_drawBoxMouse'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    drawBoxMouse(BWAPI::Game *,int,int,int,int,BWAPI::Color,bool)\n"
    "    drawBoxMouse(BWAPI::Game *,int,int,int,int,BWAPI::Color)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawBoxScreen__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Game_drawBoxScreen",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawBoxScreen" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawBoxScreen" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawBoxScreen" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawBoxScreen" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Game_drawBoxScreen" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Game_drawBoxScreen" "', argument " "6"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawBoxScreen" "', argument " "6"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Game_drawBoxScreen" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  (arg1)->drawBoxScreen(arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawBoxScreen__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Game_drawBoxScreen",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawBoxScreen" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawBoxScreen" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawBoxScreen" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawBoxScreen" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Game_drawBoxScreen" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Game_drawBoxScreen" "', argument " "6"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawBoxScreen" "', argument " "6"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  (arg1)->drawBoxScreen(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawBoxScreen(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 7); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_BWAPI__Color, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_Game_drawBoxScreen__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_BWAPI__Color, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_Game_drawBoxScreen__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Game_drawBoxScreen'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    drawBoxScreen(BWAPI::Game *,int,int,int,int,BWAPI::Color,bool)\n"
    "    drawBoxScreen(BWAPI::Game *,int,int,int,int,BWAPI::Color)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawTriangle__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  BWAPI::Color arg9 ;
  bool arg10 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  void *argp9 ;
  int res9 = 0 ;
  bool val10 ;
  int ecode10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:Game_drawTriangle",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawTriangle" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawTriangle" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawTriangle" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawTriangle" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Game_drawTriangle" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Game_drawTriangle" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Game_drawTriangle" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Game_drawTriangle" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  {
    res9 = SWIG_ConvertPtr(obj8, &argp9, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "Game_drawTriangle" "', argument " "9"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp9) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawTriangle" "', argument " "9"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp9);
      arg9 = *temp;
      if (SWIG_IsNewObj(res9)) delete temp;
    }
  }
  ecode10 = SWIG_AsVal_bool(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "Game_drawTriangle" "', argument " "10"" of type '" "bool""'");
  } 
  arg10 = static_cast< bool >(val10);
  (arg1)->drawTriangle(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawTriangle__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  BWAPI::Color arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  void *argp9 ;
  int res9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:Game_drawTriangle",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawTriangle" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawTriangle" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawTriangle" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawTriangle" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Game_drawTriangle" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Game_drawTriangle" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Game_drawTriangle" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Game_drawTriangle" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  {
    res9 = SWIG_ConvertPtr(obj8, &argp9, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "Game_drawTriangle" "', argument " "9"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp9) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawTriangle" "', argument " "9"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp9);
      arg9 = *temp;
      if (SWIG_IsNewObj(res9)) delete temp;
    }
  }
  (arg1)->drawTriangle(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawTriangle(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[11];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 10); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    int res = SWIG_ConvertPtr(argv[8], 0, SWIGTYPE_p_BWAPI__Color, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_Game_drawTriangle__SWIG_1(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    int res = SWIG_ConvertPtr(argv[8], 0, SWIGTYPE_p_BWAPI__Color, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      {
                        int res = SWIG_AsVal_bool(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        return _wrap_Game_drawTriangle__SWIG_0(self, args);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Game_drawTriangle'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    drawTriangle(BWAPI::Game *,int,int,int,int,int,int,int,BWAPI::Color,bool)\n"
    "    drawTriangle(BWAPI::Game *,int,int,int,int,int,int,int,BWAPI::Color)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawTriangleMap__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  BWAPI::Color arg8 ;
  bool arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  bool val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:Game_drawTriangleMap",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawTriangleMap" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawTriangleMap" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawTriangleMap" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawTriangleMap" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Game_drawTriangleMap" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Game_drawTriangleMap" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Game_drawTriangleMap" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  {
    res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Game_drawTriangleMap" "', argument " "8"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawTriangleMap" "', argument " "8"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp8);
      arg8 = *temp;
      if (SWIG_IsNewObj(res8)) delete temp;
    }
  }
  ecode9 = SWIG_AsVal_bool(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "Game_drawTriangleMap" "', argument " "9"" of type '" "bool""'");
  } 
  arg9 = static_cast< bool >(val9);
  (arg1)->drawTriangleMap(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawTriangleMap__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  BWAPI::Color arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:Game_drawTriangleMap",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawTriangleMap" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawTriangleMap" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawTriangleMap" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawTriangleMap" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Game_drawTriangleMap" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Game_drawTriangleMap" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Game_drawTriangleMap" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  {
    res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Game_drawTriangleMap" "', argument " "8"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawTriangleMap" "', argument " "8"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp8);
      arg8 = *temp;
      if (SWIG_IsNewObj(res8)) delete temp;
    }
  }
  (arg1)->drawTriangleMap(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawTriangleMap(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[10];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 9); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_BWAPI__Color, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_Game_drawTriangleMap__SWIG_1(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_BWAPI__Color, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    {
                      int res = SWIG_AsVal_bool(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_Game_drawTriangleMap__SWIG_0(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Game_drawTriangleMap'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    drawTriangleMap(BWAPI::Game *,int,int,int,int,int,int,BWAPI::Color,bool)\n"
    "    drawTriangleMap(BWAPI::Game *,int,int,int,int,int,int,BWAPI::Color)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawTriangleMouse__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  BWAPI::Color arg8 ;
  bool arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  bool val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:Game_drawTriangleMouse",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawTriangleMouse" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawTriangleMouse" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawTriangleMouse" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawTriangleMouse" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Game_drawTriangleMouse" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Game_drawTriangleMouse" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Game_drawTriangleMouse" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  {
    res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Game_drawTriangleMouse" "', argument " "8"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawTriangleMouse" "', argument " "8"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp8);
      arg8 = *temp;
      if (SWIG_IsNewObj(res8)) delete temp;
    }
  }
  ecode9 = SWIG_AsVal_bool(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "Game_drawTriangleMouse" "', argument " "9"" of type '" "bool""'");
  } 
  arg9 = static_cast< bool >(val9);
  (arg1)->drawTriangleMouse(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawTriangleMouse__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  BWAPI::Color arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:Game_drawTriangleMouse",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawTriangleMouse" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawTriangleMouse" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawTriangleMouse" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawTriangleMouse" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Game_drawTriangleMouse" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Game_drawTriangleMouse" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Game_drawTriangleMouse" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  {
    res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Game_drawTriangleMouse" "', argument " "8"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawTriangleMouse" "', argument " "8"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp8);
      arg8 = *temp;
      if (SWIG_IsNewObj(res8)) delete temp;
    }
  }
  (arg1)->drawTriangleMouse(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawTriangleMouse(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[10];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 9); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_BWAPI__Color, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_Game_drawTriangleMouse__SWIG_1(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_BWAPI__Color, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    {
                      int res = SWIG_AsVal_bool(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_Game_drawTriangleMouse__SWIG_0(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Game_drawTriangleMouse'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    drawTriangleMouse(BWAPI::Game *,int,int,int,int,int,int,BWAPI::Color,bool)\n"
    "    drawTriangleMouse(BWAPI::Game *,int,int,int,int,int,int,BWAPI::Color)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawTriangleScreen__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  BWAPI::Color arg8 ;
  bool arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  bool val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:Game_drawTriangleScreen",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawTriangleScreen" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawTriangleScreen" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawTriangleScreen" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawTriangleScreen" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Game_drawTriangleScreen" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Game_drawTriangleScreen" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Game_drawTriangleScreen" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  {
    res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Game_drawTriangleScreen" "', argument " "8"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawTriangleScreen" "', argument " "8"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp8);
      arg8 = *temp;
      if (SWIG_IsNewObj(res8)) delete temp;
    }
  }
  ecode9 = SWIG_AsVal_bool(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "Game_drawTriangleScreen" "', argument " "9"" of type '" "bool""'");
  } 
  arg9 = static_cast< bool >(val9);
  (arg1)->drawTriangleScreen(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawTriangleScreen__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  BWAPI::Color arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:Game_drawTriangleScreen",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawTriangleScreen" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawTriangleScreen" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawTriangleScreen" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawTriangleScreen" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Game_drawTriangleScreen" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Game_drawTriangleScreen" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Game_drawTriangleScreen" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  {
    res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Game_drawTriangleScreen" "', argument " "8"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawTriangleScreen" "', argument " "8"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp8);
      arg8 = *temp;
      if (SWIG_IsNewObj(res8)) delete temp;
    }
  }
  (arg1)->drawTriangleScreen(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawTriangleScreen(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[10];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 9); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_BWAPI__Color, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_Game_drawTriangleScreen__SWIG_1(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_BWAPI__Color, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    {
                      int res = SWIG_AsVal_bool(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_Game_drawTriangleScreen__SWIG_0(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Game_drawTriangleScreen'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    drawTriangleScreen(BWAPI::Game *,int,int,int,int,int,int,BWAPI::Color,bool)\n"
    "    drawTriangleScreen(BWAPI::Game *,int,int,int,int,int,int,BWAPI::Color)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawCircle__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Game_drawCircle",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawCircle" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawCircle" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawCircle" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawCircle" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Game_drawCircle" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Game_drawCircle" "', argument " "6"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawCircle" "', argument " "6"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Game_drawCircle" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  (arg1)->drawCircle(arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawCircle__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Game_drawCircle",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawCircle" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawCircle" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawCircle" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawCircle" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Game_drawCircle" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Game_drawCircle" "', argument " "6"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawCircle" "', argument " "6"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  (arg1)->drawCircle(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawCircle(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 7); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_BWAPI__Color, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_Game_drawCircle__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_BWAPI__Color, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_Game_drawCircle__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Game_drawCircle'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    drawCircle(BWAPI::Game *,int,int,int,int,BWAPI::Color,bool)\n"
    "    drawCircle(BWAPI::Game *,int,int,int,int,BWAPI::Color)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawCircleMap__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::Color arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Game_drawCircleMap",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawCircleMap" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawCircleMap" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawCircleMap" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawCircleMap" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Game_drawCircleMap" "', argument " "5"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawCircleMap" "', argument " "5"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Game_drawCircleMap" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  (arg1)->drawCircleMap(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawCircleMap__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::Color arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Game_drawCircleMap",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawCircleMap" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawCircleMap" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawCircleMap" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawCircleMap" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Game_drawCircleMap" "', argument " "5"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawCircleMap" "', argument " "5"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  (arg1)->drawCircleMap(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawCircleMap(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 6); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_BWAPI__Color, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_Game_drawCircleMap__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_BWAPI__Color, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_Game_drawCircleMap__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Game_drawCircleMap'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    drawCircleMap(BWAPI::Game *,int,int,int,BWAPI::Color,bool)\n"
    "    drawCircleMap(BWAPI::Game *,int,int,int,BWAPI::Color)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawCircleMouse__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::Color arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Game_drawCircleMouse",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawCircleMouse" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawCircleMouse" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawCircleMouse" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawCircleMouse" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Game_drawCircleMouse" "', argument " "5"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawCircleMouse" "', argument " "5"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Game_drawCircleMouse" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  (arg1)->drawCircleMouse(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawCircleMouse__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::Color arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Game_drawCircleMouse",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawCircleMouse" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawCircleMouse" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawCircleMouse" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawCircleMouse" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Game_drawCircleMouse" "', argument " "5"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawCircleMouse" "', argument " "5"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  (arg1)->drawCircleMouse(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawCircleMouse(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 6); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_BWAPI__Color, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_Game_drawCircleMouse__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_BWAPI__Color, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_Game_drawCircleMouse__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Game_drawCircleMouse'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    drawCircleMouse(BWAPI::Game *,int,int,int,BWAPI::Color,bool)\n"
    "    drawCircleMouse(BWAPI::Game *,int,int,int,BWAPI::Color)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawCircleScreen__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::Color arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Game_drawCircleScreen",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawCircleScreen" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawCircleScreen" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawCircleScreen" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawCircleScreen" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Game_drawCircleScreen" "', argument " "5"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawCircleScreen" "', argument " "5"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Game_drawCircleScreen" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  (arg1)->drawCircleScreen(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawCircleScreen__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::Color arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Game_drawCircleScreen",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawCircleScreen" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawCircleScreen" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawCircleScreen" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawCircleScreen" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Game_drawCircleScreen" "', argument " "5"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawCircleScreen" "', argument " "5"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  (arg1)->drawCircleScreen(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawCircleScreen(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 6); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_BWAPI__Color, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_Game_drawCircleScreen__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_BWAPI__Color, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_Game_drawCircleScreen__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Game_drawCircleScreen'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    drawCircleScreen(BWAPI::Game *,int,int,int,BWAPI::Color,bool)\n"
    "    drawCircleScreen(BWAPI::Game *,int,int,int,BWAPI::Color)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawEllipse__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  BWAPI::Color arg7 ;
  bool arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:Game_drawEllipse",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawEllipse" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawEllipse" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawEllipse" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawEllipse" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Game_drawEllipse" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Game_drawEllipse" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Game_drawEllipse" "', argument " "7"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawEllipse" "', argument " "7"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  ecode8 = SWIG_AsVal_bool(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Game_drawEllipse" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);
  (arg1)->drawEllipse(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawEllipse__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  BWAPI::Color arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Game_drawEllipse",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawEllipse" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawEllipse" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawEllipse" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawEllipse" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Game_drawEllipse" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Game_drawEllipse" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Game_drawEllipse" "', argument " "7"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawEllipse" "', argument " "7"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  (arg1)->drawEllipse(arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawEllipse(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[9];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 8); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_BWAPI__Color, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_Game_drawEllipse__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_BWAPI__Color, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    int res = SWIG_AsVal_bool(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_Game_drawEllipse__SWIG_0(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Game_drawEllipse'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    drawEllipse(BWAPI::Game *,int,int,int,int,int,BWAPI::Color,bool)\n"
    "    drawEllipse(BWAPI::Game *,int,int,int,int,int,BWAPI::Color)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawEllipseMap__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Game_drawEllipseMap",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawEllipseMap" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawEllipseMap" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawEllipseMap" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawEllipseMap" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Game_drawEllipseMap" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Game_drawEllipseMap" "', argument " "6"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawEllipseMap" "', argument " "6"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Game_drawEllipseMap" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  (arg1)->drawEllipseMap(arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawEllipseMap__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Game_drawEllipseMap",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawEllipseMap" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawEllipseMap" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawEllipseMap" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawEllipseMap" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Game_drawEllipseMap" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Game_drawEllipseMap" "', argument " "6"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawEllipseMap" "', argument " "6"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  (arg1)->drawEllipseMap(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawEllipseMap(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 7); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_BWAPI__Color, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_Game_drawEllipseMap__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_BWAPI__Color, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_Game_drawEllipseMap__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Game_drawEllipseMap'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    drawEllipseMap(BWAPI::Game *,int,int,int,int,BWAPI::Color,bool)\n"
    "    drawEllipseMap(BWAPI::Game *,int,int,int,int,BWAPI::Color)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawEllipseMouse__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Game_drawEllipseMouse",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawEllipseMouse" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawEllipseMouse" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawEllipseMouse" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawEllipseMouse" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Game_drawEllipseMouse" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Game_drawEllipseMouse" "', argument " "6"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawEllipseMouse" "', argument " "6"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Game_drawEllipseMouse" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  (arg1)->drawEllipseMouse(arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawEllipseMouse__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Game_drawEllipseMouse",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawEllipseMouse" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawEllipseMouse" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawEllipseMouse" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawEllipseMouse" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Game_drawEllipseMouse" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Game_drawEllipseMouse" "', argument " "6"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawEllipseMouse" "', argument " "6"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  (arg1)->drawEllipseMouse(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawEllipseMouse(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 7); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_BWAPI__Color, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_Game_drawEllipseMouse__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_BWAPI__Color, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_Game_drawEllipseMouse__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Game_drawEllipseMouse'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    drawEllipseMouse(BWAPI::Game *,int,int,int,int,BWAPI::Color,bool)\n"
    "    drawEllipseMouse(BWAPI::Game *,int,int,int,int,BWAPI::Color)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawEllipseScreen__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Game_drawEllipseScreen",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawEllipseScreen" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawEllipseScreen" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawEllipseScreen" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawEllipseScreen" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Game_drawEllipseScreen" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Game_drawEllipseScreen" "', argument " "6"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawEllipseScreen" "', argument " "6"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Game_drawEllipseScreen" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  (arg1)->drawEllipseScreen(arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawEllipseScreen__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Game_drawEllipseScreen",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawEllipseScreen" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawEllipseScreen" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawEllipseScreen" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawEllipseScreen" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Game_drawEllipseScreen" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Game_drawEllipseScreen" "', argument " "6"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawEllipseScreen" "', argument " "6"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  (arg1)->drawEllipseScreen(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawEllipseScreen(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 7); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_BWAPI__Color, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_Game_drawEllipseScreen__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_BWAPI__Color, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_Game_drawEllipseScreen__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Game_drawEllipseScreen'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    drawEllipseScreen(BWAPI::Game *,int,int,int,int,BWAPI::Color,bool)\n"
    "    drawEllipseScreen(BWAPI::Game *,int,int,int,int,BWAPI::Color)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawDot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::Color arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Game_drawDot",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawDot" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawDot" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawDot" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawDot" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Game_drawDot" "', argument " "5"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawDot" "', argument " "5"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  (arg1)->drawDot(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawDotMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  BWAPI::Color arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Game_drawDotMap",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawDotMap" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawDotMap" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawDotMap" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Game_drawDotMap" "', argument " "4"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawDotMap" "', argument " "4"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  (arg1)->drawDotMap(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawDotMouse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  BWAPI::Color arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Game_drawDotMouse",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawDotMouse" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawDotMouse" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawDotMouse" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Game_drawDotMouse" "', argument " "4"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawDotMouse" "', argument " "4"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  (arg1)->drawDotMouse(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawDotScreen(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  BWAPI::Color arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Game_drawDotScreen",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawDotScreen" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawDotScreen" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawDotScreen" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Game_drawDotScreen" "', argument " "4"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawDotScreen" "', argument " "4"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  (arg1)->drawDotScreen(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawLine(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  BWAPI::Color arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Game_drawLine",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawLine" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawLine" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawLine" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawLine" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Game_drawLine" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Game_drawLine" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Game_drawLine" "', argument " "7"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawLine" "', argument " "7"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  (arg1)->drawLine(arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawLineMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Game_drawLineMap",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawLineMap" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawLineMap" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawLineMap" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawLineMap" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Game_drawLineMap" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Game_drawLineMap" "', argument " "6"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawLineMap" "', argument " "6"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  (arg1)->drawLineMap(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawLineMouse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Game_drawLineMouse",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawLineMouse" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawLineMouse" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawLineMouse" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawLineMouse" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Game_drawLineMouse" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Game_drawLineMouse" "', argument " "6"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawLineMouse" "', argument " "6"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  (arg1)->drawLineMouse(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_drawLineScreen(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Game_drawLineScreen",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_drawLineScreen" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_drawLineScreen" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_drawLineScreen" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Game_drawLineScreen" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Game_drawLineScreen" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_BWAPI__Color,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Game_drawLineScreen" "', argument " "6"" of type '" "BWAPI::Color""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_drawLineScreen" "', argument " "6"" of type '" "BWAPI::Color""'");
    } else {
      BWAPI::Color * temp = reinterpret_cast< BWAPI::Color * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  (arg1)->drawLineScreen(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getScreenBuffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  void *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_getScreenBuffer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getScreenBuffer" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (void *)(arg1)->getScreenBuffer();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getLatencyFrames(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_getLatencyFrames",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getLatencyFrames" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (int)(arg1)->getLatencyFrames();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getLatencyTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_getLatencyTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getLatencyTime" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (int)(arg1)->getLatencyTime();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getRemainingLatencyFrames(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_getRemainingLatencyFrames",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getRemainingLatencyFrames" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (int)(arg1)->getRemainingLatencyFrames();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getRemainingLatencyTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_getRemainingLatencyTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getRemainingLatencyTime" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (int)(arg1)->getRemainingLatencyTime();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getRevision(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_getRevision",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getRevision" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (int)(arg1)->getRevision();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_isDebug(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_isDebug",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_isDebug" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (bool)(arg1)->isDebug();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_isLatComEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_isLatComEnabled",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_isLatComEnabled" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (bool)(arg1)->isLatComEnabled();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_setLatCom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_setLatCom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_setLatCom" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_setLatCom" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setLatCom(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getReplayFrameCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_getReplayFrameCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getReplayFrameCount" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (int)(arg1)->getReplayFrameCount();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_setGUI__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_setGUI",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_setGUI" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_setGUI" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setGUI(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_setGUI__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_setGUI",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_setGUI" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  (arg1)->setGUI();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_setGUI(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Game_setGUI__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Game, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Game_setGUI__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Game_setGUI'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setGUI(BWAPI::Game *,bool)\n"
    "    setGUI(BWAPI::Game *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getInstanceNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_getInstanceNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getInstanceNumber" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (int)(arg1)->getInstanceNumber();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getAllUnits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SetWrapper< BWAPI::Unit * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_getAllUnits",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getAllUnits" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (SetWrapper< BWAPI::Unit * > *)BWAPI_Game_getAllUnits(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapperT_BWAPI__Unit_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getMinerals(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SetWrapper< BWAPI::Unit * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_getMinerals",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getMinerals" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (SetWrapper< BWAPI::Unit * > *)BWAPI_Game_getMinerals(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapperT_BWAPI__Unit_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getGeysers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SetWrapper< BWAPI::Unit * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_getGeysers",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getGeysers" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (SetWrapper< BWAPI::Unit * > *)BWAPI_Game_getGeysers(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapperT_BWAPI__Unit_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getNeutralUnits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SetWrapper< BWAPI::Unit * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_getNeutralUnits",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getNeutralUnits" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (SetWrapper< BWAPI::Unit * > *)BWAPI_Game_getNeutralUnits(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapperT_BWAPI__Unit_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getStaticMinerals(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SetWrapper< BWAPI::Unit * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_getStaticMinerals",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getStaticMinerals" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (SetWrapper< BWAPI::Unit * > *)BWAPI_Game_getStaticMinerals(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapperT_BWAPI__Unit_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getStaticGeysers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SetWrapper< BWAPI::Unit * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_getStaticGeysers",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getStaticGeysers" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (SetWrapper< BWAPI::Unit * > *)BWAPI_Game_getStaticGeysers(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapperT_BWAPI__Unit_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getStaticNeutralUnits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SetWrapper< BWAPI::Unit * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_getStaticNeutralUnits",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getStaticNeutralUnits" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (SetWrapper< BWAPI::Unit * > *)BWAPI_Game_getStaticNeutralUnits(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapperT_BWAPI__Unit_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getSelectedUnits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SetWrapper< BWAPI::Unit * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_getSelectedUnits",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getSelectedUnits" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (SetWrapper< BWAPI::Unit * > *)BWAPI_Game_getSelectedUnits(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapperT_BWAPI__Unit_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getPlayers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SetWrapper< BWAPI::Player * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_getPlayers",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getPlayers" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (SetWrapper< BWAPI::Player * > *)BWAPI_Game_getPlayers(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapperT_BWAPI__Player_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getForces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SetWrapper< BWAPI::Force * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_getForces",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getForces" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (SetWrapper< BWAPI::Force * > *)BWAPI_Game_getForces(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapperT_BWAPI__Force_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_unitsOnTile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SetWrapper< BWAPI::Unit * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Game_unitsOnTile",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_unitsOnTile" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_unitsOnTile" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Game_unitsOnTile" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (SetWrapper< BWAPI::Unit * > *)BWAPI_Game_unitsOnTile(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapperT_BWAPI__Unit_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_getStartLocations(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SetWrapper_PtrNext< BWAPI::TilePosition > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_getStartLocations",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_getStartLocations" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  result = (SetWrapper_PtrNext< BWAPI::TilePosition > *)BWAPI_Game_getStartLocations(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapper_PtrNextT_BWAPI__TilePosition_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_canBuildHere(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  BWAPI::TilePosition arg3 ;
  BWAPI::UnitType arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Game_canBuildHere",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_canBuildHere" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game_canBuildHere" "', argument " "2"" of type '" "BWAPI::Unit *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Unit * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BWAPI__TilePosition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Game_canBuildHere" "', argument " "3"" of type '" "BWAPI::TilePosition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_canBuildHere" "', argument " "3"" of type '" "BWAPI::TilePosition""'");
    } else {
      BWAPI::TilePosition * temp = reinterpret_cast< BWAPI::TilePosition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_BWAPI__UnitType,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Game_canBuildHere" "', argument " "4"" of type '" "BWAPI::UnitType""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_canBuildHere" "', argument " "4"" of type '" "BWAPI::UnitType""'");
    } else {
      BWAPI::UnitType * temp = reinterpret_cast< BWAPI::UnitType * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  result = (bool)BWAPI_Game_canBuildHere(arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Game(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Game",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Game, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Game" "', argument " "1"" of type '" "BWAPI::Game *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Game * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Game_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BWAPI__Game, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_Broodwar_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BWAPI__Game,  0 );  
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BWAPI::Broodwar""' of type '""BWAPI::Game *""'");
    }
    BWAPI::Broodwar = reinterpret_cast< BWAPI::Game * >(argp);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Broodwar_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(BWAPI::Broodwar), SWIGTYPE_p_BWAPI__Game,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_GameType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::GameType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GameType")) SWIG_fail;
  result = (BWAPI::GameType *)new BWAPI::GameType();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__GameType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GameType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::GameType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GameType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GameType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (BWAPI::GameType *)new BWAPI::GameType(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__GameType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GameType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::GameType *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::GameType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GameType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BWAPI__GameType,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GameType" "', argument " "1"" of type '" "BWAPI::GameType const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GameType" "', argument " "1"" of type '" "BWAPI::GameType const &""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::GameType * >(argp1);
  result = (BWAPI::GameType *)new BWAPI::GameType((BWAPI::GameType const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__GameType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GameType(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_GameType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BWAPI__GameType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GameType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_GameType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_GameType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BWAPI::GameType()\n"
    "    BWAPI::GameType(int)\n"
    "    BWAPI::GameType(BWAPI::GameType const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameType___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::GameType *arg1 = (BWAPI::GameType *) 0 ;
  BWAPI::GameType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__GameType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameType___eq__" "', argument " "1"" of type '" "BWAPI::GameType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::GameType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__GameType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameType___eq__" "', argument " "2"" of type '" "BWAPI::GameType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameType___eq__" "', argument " "2"" of type '" "BWAPI::GameType const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::GameType * >(argp2);
  result = (bool)((BWAPI::GameType const *)arg1)->operator ==((BWAPI::GameType const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameType___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::GameType *arg1 = (BWAPI::GameType *) 0 ;
  BWAPI::GameType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__GameType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameType___ne__" "', argument " "1"" of type '" "BWAPI::GameType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::GameType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__GameType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameType___ne__" "', argument " "2"" of type '" "BWAPI::GameType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameType___ne__" "', argument " "2"" of type '" "BWAPI::GameType const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::GameType * >(argp2);
  result = (bool)((BWAPI::GameType const *)arg1)->operator !=((BWAPI::GameType const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameType___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::GameType *arg1 = (BWAPI::GameType *) 0 ;
  BWAPI::GameType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameType___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__GameType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameType___lt__" "', argument " "1"" of type '" "BWAPI::GameType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::GameType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__GameType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameType___lt__" "', argument " "2"" of type '" "BWAPI::GameType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameType___lt__" "', argument " "2"" of type '" "BWAPI::GameType const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::GameType * >(argp2);
  result = (bool)((BWAPI::GameType const *)arg1)->operator <((BWAPI::GameType const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameType_getID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::GameType *arg1 = (BWAPI::GameType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameType_getID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__GameType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameType_getID" "', argument " "1"" of type '" "BWAPI::GameType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::GameType * >(argp1);
  result = (int)((BWAPI::GameType const *)arg1)->getID();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameType_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::GameType *arg1 = (BWAPI::GameType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameType_getName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__GameType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameType_getName" "', argument " "1"" of type '" "BWAPI::GameType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::GameType * >(argp1);
  result = ((BWAPI::GameType const *)arg1)->getName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GameType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::GameType *arg1 = (BWAPI::GameType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GameType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__GameType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GameType" "', argument " "1"" of type '" "BWAPI::GameType *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::GameType * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GameType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BWAPI__GameType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_getGameType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  BWAPI::GameType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:getGameType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "getGameType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = BWAPI::GameTypes::getGameType(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::GameType(static_cast< const BWAPI::GameType& >(result))), SWIGTYPE_p_BWAPI__GameType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_allGameTypes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< BWAPI::GameType > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":allGameTypes")) SWIG_fail;
  result = (std::set< BWAPI::GameType > *) &BWAPI::GameTypes::allGameTypes();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_BWAPI__GameType_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_GameTypes_Melee_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable GameTypes_Melee is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_GameTypes_Melee_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::GameTypes::Melee), SWIGTYPE_p_BWAPI__GameType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Free_For_All_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Free_For_All is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Free_For_All_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::GameTypes::Free_For_All), SWIGTYPE_p_BWAPI__GameType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_One_on_One_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable One_on_One is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_One_on_One_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::GameTypes::One_on_One), SWIGTYPE_p_BWAPI__GameType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Capture_The_Flag_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Capture_The_Flag is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Capture_The_Flag_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::GameTypes::Capture_The_Flag), SWIGTYPE_p_BWAPI__GameType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Greed_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Greed is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Greed_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::GameTypes::Greed), SWIGTYPE_p_BWAPI__GameType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Slaughter_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Slaughter is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Slaughter_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::GameTypes::Slaughter), SWIGTYPE_p_BWAPI__GameType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Sudden_Death_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Sudden_Death is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Sudden_Death_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::GameTypes::Sudden_Death), SWIGTYPE_p_BWAPI__GameType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Ladder_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Ladder is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Ladder_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::GameTypes::Ladder), SWIGTYPE_p_BWAPI__GameType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Use_Map_Settings_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Use_Map_Settings is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Use_Map_Settings_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::GameTypes::Use_Map_Settings), SWIGTYPE_p_BWAPI__GameType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Team_Melee_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Team_Melee is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Team_Melee_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::GameTypes::Team_Melee), SWIGTYPE_p_BWAPI__GameType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Team_Free_For_All_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Team_Free_For_All is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Team_Free_For_All_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::GameTypes::Team_Free_For_All), SWIGTYPE_p_BWAPI__GameType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Team_Capture_The_Flag_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Team_Capture_The_Flag is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Team_Capture_The_Flag_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::GameTypes::Team_Capture_The_Flag), SWIGTYPE_p_BWAPI__GameType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Top_vs_Bottom_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Top_vs_Bottom is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Top_vs_Bottom_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::GameTypes::Top_vs_Bottom), SWIGTYPE_p_BWAPI__GameType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Pro_Gamer_League_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Pro_Gamer_League is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Pro_Gamer_League_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::GameTypes::Pro_Gamer_League), SWIGTYPE_p_BWAPI__GameType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_GameTypes_None_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable GameTypes_None is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_GameTypes_None_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::GameTypes::None), SWIGTYPE_p_BWAPI__GameType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_GameTypes_Unknown_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable GameTypes_Unknown is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_GameTypes_Unknown_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::GameTypes::Unknown), SWIGTYPE_p_BWAPI__GameType,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_Order__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Order *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Order")) SWIG_fail;
  result = (BWAPI::Order *)new BWAPI::Order();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Order, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Order__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Order *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Order",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Order" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (BWAPI::Order *)new BWAPI::Order(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Order, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Order__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Order *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Order *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Order",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BWAPI__Order,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Order" "', argument " "1"" of type '" "BWAPI::Order const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Order" "', argument " "1"" of type '" "BWAPI::Order const &""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Order * >(argp1);
  result = (BWAPI::Order *)new BWAPI::Order((BWAPI::Order const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Order, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Order(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Order__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BWAPI__Order, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Order__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Order__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Order'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BWAPI::Order()\n"
    "    BWAPI::Order(int)\n"
    "    BWAPI::Order(BWAPI::Order const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Order___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Order *arg1 = (BWAPI::Order *) 0 ;
  BWAPI::Order *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Order___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Order, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Order___eq__" "', argument " "1"" of type '" "BWAPI::Order const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Order * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Order,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Order___eq__" "', argument " "2"" of type '" "BWAPI::Order const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Order___eq__" "', argument " "2"" of type '" "BWAPI::Order const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Order * >(argp2);
  result = (bool)((BWAPI::Order const *)arg1)->operator ==((BWAPI::Order const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Order___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Order *arg1 = (BWAPI::Order *) 0 ;
  BWAPI::Order *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Order___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Order, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Order___ne__" "', argument " "1"" of type '" "BWAPI::Order const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Order * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Order,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Order___ne__" "', argument " "2"" of type '" "BWAPI::Order const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Order___ne__" "', argument " "2"" of type '" "BWAPI::Order const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Order * >(argp2);
  result = (bool)((BWAPI::Order const *)arg1)->operator !=((BWAPI::Order const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Order___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Order *arg1 = (BWAPI::Order *) 0 ;
  BWAPI::Order *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Order___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Order, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Order___lt__" "', argument " "1"" of type '" "BWAPI::Order const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Order * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Order,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Order___lt__" "', argument " "2"" of type '" "BWAPI::Order const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Order___lt__" "', argument " "2"" of type '" "BWAPI::Order const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Order * >(argp2);
  result = (bool)((BWAPI::Order const *)arg1)->operator <((BWAPI::Order const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Order_getID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Order *arg1 = (BWAPI::Order *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Order_getID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Order, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Order_getID" "', argument " "1"" of type '" "BWAPI::Order const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Order * >(argp1);
  result = (int)((BWAPI::Order const *)arg1)->getID();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Order_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Order *arg1 = (BWAPI::Order *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Order_getName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Order, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Order_getName" "', argument " "1"" of type '" "BWAPI::Order const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Order * >(argp1);
  result = ((BWAPI::Order const *)arg1)->getName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Order(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Order *arg1 = (BWAPI::Order *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Order",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Order, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Order" "', argument " "1"" of type '" "BWAPI::Order *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Order * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Order_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BWAPI__Order, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_getOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  BWAPI::Order result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:getOrder",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "getOrder" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = BWAPI::Orders::getOrder(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::Order(static_cast< const BWAPI::Order& >(result))), SWIGTYPE_p_BWAPI__Order, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_allOrders(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< BWAPI::Order > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":allOrders")) SWIG_fail;
  result = (std::set< BWAPI::Order > *) &BWAPI::Orders::allOrders();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_BWAPI__Order_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Die_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Die is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Die_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Die), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Orders_Stop_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Orders_Stop is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Orders_Stop_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Stop), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Guard_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Guard is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Guard_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Guard), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_PlayerGuard_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PlayerGuard is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PlayerGuard_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::PlayerGuard), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_TurretGuard_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TurretGuard is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_TurretGuard_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::TurretGuard), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_BunkerGuard_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BunkerGuard is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_BunkerGuard_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::BunkerGuard), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Orders_Move_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Orders_Move is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Orders_Move_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Move), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_AttackUnit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AttackUnit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_AttackUnit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::AttackUnit), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_AttackTile_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AttackTile is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_AttackTile_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::AttackTile), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hover_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hover is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hover_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Hover), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_AttackMove_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AttackMove is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_AttackMove_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::AttackMove), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_InfestedCommandCenter_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable InfestedCommandCenter is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_InfestedCommandCenter_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::InfestedCommandCenter), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnusedNothing_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnusedNothing is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnusedNothing_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::UnusedNothing), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnusedPowerup_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnusedPowerup is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnusedPowerup_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::UnusedPowerup), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_TowerGuard_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TowerGuard is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_TowerGuard_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::TowerGuard), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_VultureMine_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable VultureMine is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_VultureMine_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::VultureMine), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Nothing_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Nothing is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Nothing_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Nothing), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Nothing3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Nothing3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Nothing3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Nothing3), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_CastInfestation_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CastInfestation is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CastInfestation_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::CastInfestation), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_InfestingCommandCenter_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable InfestingCommandCenter is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_InfestingCommandCenter_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::InfestingCommandCenter), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_PlaceBuilding_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PlaceBuilding is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PlaceBuilding_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::PlaceBuilding), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_BuildProtoss2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BuildProtoss2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_BuildProtoss2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::BuildProtoss2), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ConstructingBuilding_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ConstructingBuilding is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ConstructingBuilding_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::ConstructingBuilding), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Orders_Repair_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Orders_Repair is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Orders_Repair_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Repair), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_PlaceAddon_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PlaceAddon is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PlaceAddon_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::PlaceAddon), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_BuildAddon_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BuildAddon is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_BuildAddon_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::BuildAddon), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Orders_Train_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Orders_Train is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Orders_Train_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Train), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_RallyPointUnit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RallyPointUnit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_RallyPointUnit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::RallyPointUnit), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_RallyPointTile_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RallyPointTile is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_RallyPointTile_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::RallyPointTile), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ZergBirth_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ZergBirth is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ZergBirth_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::ZergBirth), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ZergUnitMorph_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ZergUnitMorph is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ZergUnitMorph_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::ZergUnitMorph), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ZergBuildingMorph_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ZergBuildingMorph is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ZergBuildingMorph_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::ZergBuildingMorph), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_IncompleteBuilding_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IncompleteBuilding is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_IncompleteBuilding_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::IncompleteBuilding), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_BuildNydusExit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BuildNydusExit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_BuildNydusExit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::BuildNydusExit), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_EnterNydusCanal_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EnterNydusCanal is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_EnterNydusCanal_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::EnterNydusCanal), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Orders_Follow_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Orders_Follow is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Orders_Follow_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Follow), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Carrier_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Carrier is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Carrier_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Carrier), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ReaverCarrierMove_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ReaverCarrierMove is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ReaverCarrierMove_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::ReaverCarrierMove), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_CarrierIgnore2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CarrierIgnore2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CarrierIgnore2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::CarrierIgnore2), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Reaver_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Reaver is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Reaver_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Reaver), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_TrainFighter_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TrainFighter is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_TrainFighter_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::TrainFighter), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_InterceptorAttack_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable InterceptorAttack is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_InterceptorAttack_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::InterceptorAttack), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ScarabAttack_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ScarabAttack is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ScarabAttack_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::ScarabAttack), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_RechargeShieldsUnit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RechargeShieldsUnit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_RechargeShieldsUnit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::RechargeShieldsUnit), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_RechargeShieldsBattery_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RechargeShieldsBattery is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_RechargeShieldsBattery_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::RechargeShieldsBattery), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ShieldBattery_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ShieldBattery is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ShieldBattery_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::ShieldBattery), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_InterceptorReturn_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable InterceptorReturn is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_InterceptorReturn_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::InterceptorReturn), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_BuildingLand_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BuildingLand is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_BuildingLand_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::BuildingLand), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_BuildingLiftOff_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BuildingLiftOff is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_BuildingLiftOff_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::BuildingLiftOff), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_DroneLiftOff_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DroneLiftOff is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DroneLiftOff_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::DroneLiftOff), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_LiftingOff_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable LiftingOff is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_LiftingOff_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::LiftingOff), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ResearchTech_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ResearchTech is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ResearchTech_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::ResearchTech), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Orders_Upgrade_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Orders_Upgrade is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Orders_Upgrade_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Upgrade), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Larva_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Larva is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Larva_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Larva), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SpawningLarva_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SpawningLarva is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SpawningLarva_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::SpawningLarva), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Harvest1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Harvest1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Harvest1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Harvest1), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Harvest2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Harvest2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Harvest2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Harvest2), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_MoveToGas_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MoveToGas is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_MoveToGas_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::MoveToGas), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WaitForGas_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WaitForGas is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WaitForGas_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::WaitForGas), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_HarvestGas_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable HarvestGas is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_HarvestGas_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::HarvestGas), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ReturnGas_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ReturnGas is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ReturnGas_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::ReturnGas), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_MoveToMinerals_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MoveToMinerals is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_MoveToMinerals_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::MoveToMinerals), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WaitForMinerals_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WaitForMinerals is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WaitForMinerals_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::WaitForMinerals), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_MiningMinerals_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MiningMinerals is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_MiningMinerals_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::MiningMinerals), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Harvest3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Harvest3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Harvest3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Harvest3), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Harvest4_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Harvest4 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Harvest4_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Harvest4), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ReturnMinerals_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ReturnMinerals is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ReturnMinerals_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::ReturnMinerals), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Interrupted_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Interrupted is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Interrupted_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Interrupted), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_EnterTransport_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EnterTransport is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_EnterTransport_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::EnterTransport), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_PickupIdle_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PickupIdle is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PickupIdle_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::PickupIdle), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_PickupTransport_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PickupTransport is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PickupTransport_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::PickupTransport), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_PickupBunker_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PickupBunker is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PickupBunker_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::PickupBunker), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Pickup4_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Pickup4 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Pickup4_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Pickup4), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_PowerupIdle_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PowerupIdle is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PowerupIdle_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::PowerupIdle), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Sieging_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Sieging is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Sieging_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Sieging), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Unsieging_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Unsieging is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Unsieging_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Unsieging), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_InitCreepGrowth_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable InitCreepGrowth is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_InitCreepGrowth_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::InitCreepGrowth), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SpreadCreep_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SpreadCreep is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SpreadCreep_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::SpreadCreep), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_StoppingCreepGrowth_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StoppingCreepGrowth is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_StoppingCreepGrowth_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::StoppingCreepGrowth), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_GuardianAspect_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable GuardianAspect is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_GuardianAspect_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::GuardianAspect), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ArchonWarp_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ArchonWarp is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ArchonWarp_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::ArchonWarp), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_CompletingArchonsummon_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CompletingArchonsummon is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CompletingArchonsummon_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::CompletingArchonsummon), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_HoldPosition_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable HoldPosition is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_HoldPosition_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::HoldPosition), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Orders_Cloak_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Orders_Cloak is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Orders_Cloak_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Cloak), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Orders_Decloak_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Orders_Decloak is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Orders_Decloak_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Decloak), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Orders_Unload_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Orders_Unload is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Orders_Unload_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Unload), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_MoveUnload_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MoveUnload is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_MoveUnload_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::MoveUnload), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_FireYamatoGun_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable FireYamatoGun is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_FireYamatoGun_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::FireYamatoGun), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_CastLockdown_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CastLockdown is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CastLockdown_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::CastLockdown), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Orders_Burrowing_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Orders_Burrowing is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Orders_Burrowing_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Burrowing), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Burrowed_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Burrowed is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Burrowed_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Burrowed), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Unburrowing_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Unburrowing is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Unburrowing_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Unburrowing), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_CastDarkSwarm_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CastDarkSwarm is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CastDarkSwarm_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::CastDarkSwarm), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_CastParasite_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CastParasite is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CastParasite_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::CastParasite), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_CastSpawnBroodlings_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CastSpawnBroodlings is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CastSpawnBroodlings_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::CastSpawnBroodlings), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_CastEMPShockwave_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CastEMPShockwave is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CastEMPShockwave_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::CastEMPShockwave), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_NukeWait_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable NukeWait is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_NukeWait_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::NukeWait), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_NukeTrain_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable NukeTrain is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_NukeTrain_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::NukeTrain), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_NukeLaunch_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable NukeLaunch is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_NukeLaunch_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::NukeLaunch), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_NukeUnit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable NukeUnit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_NukeUnit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::NukeUnit), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_CastNuclearStrike_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CastNuclearStrike is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CastNuclearStrike_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::CastNuclearStrike), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_NukeTrack_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable NukeTrack is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_NukeTrack_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::NukeTrack), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_CloakNearbyUnits_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CloakNearbyUnits is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CloakNearbyUnits_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::CloakNearbyUnits), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_PlaceMine_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PlaceMine is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PlaceMine_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::PlaceMine), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_RightClickAction_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RightClickAction is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_RightClickAction_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::RightClickAction), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_CastRecall_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CastRecall is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CastRecall_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::CastRecall), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_TeleporttoLocation_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TeleporttoLocation is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_TeleporttoLocation_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::TeleporttoLocation), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_CastScannerSweep_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CastScannerSweep is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CastScannerSweep_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::CastScannerSweep), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Scanner_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Scanner is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Scanner_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Scanner), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_CastDefensiveMatrix_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CastDefensiveMatrix is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CastDefensiveMatrix_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::CastDefensiveMatrix), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_CastPsionicStorm_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CastPsionicStorm is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CastPsionicStorm_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::CastPsionicStorm), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_CastIrradiate_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CastIrradiate is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CastIrradiate_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::CastIrradiate), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_CastPlague_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CastPlague is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CastPlague_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::CastPlague), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_CastConsume_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CastConsume is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CastConsume_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::CastConsume), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_CastEnsnare_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CastEnsnare is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CastEnsnare_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::CastEnsnare), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_CastStasisField_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CastStasisField is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CastStasisField_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::CastStasisField), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_CastHallucination_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CastHallucination is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CastHallucination_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::CastHallucination), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hallucination2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hallucination2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hallucination2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Hallucination2), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ResetCollision_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ResetCollision is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ResetCollision_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::ResetCollision), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Orders_Patrol_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Orders_Patrol is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Orders_Patrol_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Patrol), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_CTFCOPInit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CTFCOPInit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CTFCOPInit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::CTFCOPInit), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_CTFCOP1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CTFCOP1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CTFCOP1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::CTFCOP1), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_CTFCOP2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CTFCOP2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CTFCOP2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::CTFCOP2), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ComputerAI_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ComputerAI is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ComputerAI_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::ComputerAI), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_AtkMoveEP_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AtkMoveEP is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_AtkMoveEP_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::AtkMoveEP), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_HarassMove_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable HarassMove is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_HarassMove_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::HarassMove), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_AIPatrol_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AIPatrol is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_AIPatrol_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::AIPatrol), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_GuardPost_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable GuardPost is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_GuardPost_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::GuardPost), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Orders_RescuePassive_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Orders_RescuePassive is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Orders_RescuePassive_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::RescuePassive), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Orders_Neutral_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Orders_Neutral is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Orders_Neutral_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Neutral), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ComputerReturn_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ComputerReturn is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ComputerReturn_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::ComputerReturn), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SelfDestrucing_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SelfDestrucing is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SelfDestrucing_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::SelfDestrucing), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Critter_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Critter is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Critter_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Critter), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_HiddenGun_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable HiddenGun is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_HiddenGun_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::HiddenGun), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_OpenDoor_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OpenDoor is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_OpenDoor_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::OpenDoor), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_CloseDoor_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CloseDoor is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CloseDoor_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::CloseDoor), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_HideTrap_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable HideTrap is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_HideTrap_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::HideTrap), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_RevealTrap_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RevealTrap is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_RevealTrap_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::RevealTrap), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Enabledoodad_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Enabledoodad is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Enabledoodad_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Enabledoodad), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Disabledoodad_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Disabledoodad is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Disabledoodad_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Disabledoodad), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Warpin_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Warpin is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Warpin_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Warpin), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Medic_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Medic is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Medic_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Medic), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_MedicHeal1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MedicHeal1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_MedicHeal1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::MedicHeal1), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_HealMove_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable HealMove is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_HealMove_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::HealMove), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_MedicHeal2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MedicHeal2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_MedicHeal2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::MedicHeal2), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_CastRestoration_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CastRestoration is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CastRestoration_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::CastRestoration), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_CastDisruptionWeb_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CastDisruptionWeb is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CastDisruptionWeb_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::CastDisruptionWeb), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_CastMindControl_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CastMindControl is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CastMindControl_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::CastMindControl), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_DarkArchonMeld_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DarkArchonMeld is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DarkArchonMeld_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::DarkArchonMeld), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_CastFeedback_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CastFeedback is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CastFeedback_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::CastFeedback), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_CastOpticalFlare_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CastOpticalFlare is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CastOpticalFlare_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::CastOpticalFlare), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_CastMaelstrom_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CastMaelstrom is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CastMaelstrom_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::CastMaelstrom), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_JunkYardDog_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable JunkYardDog is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_JunkYardDog_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::JunkYardDog), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Fatal_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Fatal is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Fatal_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Fatal), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Orders_None_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Orders_None is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Orders_None_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::None), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Orders_Unknown_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Orders_Unknown is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Orders_Unknown_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Orders::Unknown), SWIGTYPE_p_BWAPI__Order,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Player_getID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Player_getID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_getID" "', argument " "1"" of type '" "BWAPI::Player const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  result = (int)((BWAPI::Player const *)arg1)->getID();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Player_getName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_getName" "', argument " "1"" of type '" "BWAPI::Player const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  result = ((BWAPI::Player const *)arg1)->getName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PlayerType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Player_getType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_getType" "', argument " "1"" of type '" "BWAPI::Player const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  result = ((BWAPI::Player const *)arg1)->getType();
  resultobj = SWIG_NewPointerObj((new PlayerType(static_cast< const PlayerType& >(result))), SWIGTYPE_p_PlayerType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_getForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Force *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Player_getForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_getForce" "', argument " "1"" of type '" "BWAPI::Player const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  result = (BWAPI::Force *)((BWAPI::Player const *)arg1)->getForce();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Force, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_isAlly(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Player_isAlly",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_isAlly" "', argument " "1"" of type '" "BWAPI::Player const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Player_isAlly" "', argument " "2"" of type '" "BWAPI::Player *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Player * >(argp2);
  result = (bool)((BWAPI::Player const *)arg1)->isAlly(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_isEnemy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Player_isEnemy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_isEnemy" "', argument " "1"" of type '" "BWAPI::Player const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Player_isEnemy" "', argument " "2"" of type '" "BWAPI::Player *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Player * >(argp2);
  result = (bool)((BWAPI::Player const *)arg1)->isEnemy(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_isNeutral(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Player_isNeutral",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_isNeutral" "', argument " "1"" of type '" "BWAPI::Player const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  result = (bool)((BWAPI::Player const *)arg1)->isNeutral();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_isVictorious(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Player_isVictorious",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_isVictorious" "', argument " "1"" of type '" "BWAPI::Player const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  result = (bool)((BWAPI::Player const *)arg1)->isVictorious();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_isDefeated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Player_isDefeated",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_isDefeated" "', argument " "1"" of type '" "BWAPI::Player const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  result = (bool)((BWAPI::Player const *)arg1)->isDefeated();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_leftGame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Player_leftGame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_leftGame" "', argument " "1"" of type '" "BWAPI::Player const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  result = (bool)((BWAPI::Player const *)arg1)->leftGame();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_minerals(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Player_minerals",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_minerals" "', argument " "1"" of type '" "BWAPI::Player const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  result = (int)((BWAPI::Player const *)arg1)->minerals();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_gas(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Player_gas",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_gas" "', argument " "1"" of type '" "BWAPI::Player const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  result = (int)((BWAPI::Player const *)arg1)->gas();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_cumulativeMinerals(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Player_cumulativeMinerals",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_cumulativeMinerals" "', argument " "1"" of type '" "BWAPI::Player const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  result = (int)((BWAPI::Player const *)arg1)->cumulativeMinerals();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_cumulativeGas(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Player_cumulativeGas",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_cumulativeGas" "', argument " "1"" of type '" "BWAPI::Player const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  result = (int)((BWAPI::Player const *)arg1)->cumulativeGas();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_supplyTotal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Player_supplyTotal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_supplyTotal" "', argument " "1"" of type '" "BWAPI::Player const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  result = (int)((BWAPI::Player const *)arg1)->supplyTotal();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_supplyTotal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  Race arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Player_supplyTotal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_supplyTotal" "', argument " "1"" of type '" "BWAPI::Player const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Race,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Player_supplyTotal" "', argument " "2"" of type '" "Race""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Player_supplyTotal" "', argument " "2"" of type '" "Race""'");
    } else {
      Race * temp = reinterpret_cast< Race * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (int)((BWAPI::Player const *)arg1)->supplyTotal(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_supplyTotal(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Player, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Player_supplyTotal__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Player, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Race, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Player_supplyTotal__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Player_supplyTotal'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    supplyTotal(BWAPI::Player const *)\n"
    "    supplyTotal(BWAPI::Player const *,Race)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_supplyUsed__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Player_supplyUsed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_supplyUsed" "', argument " "1"" of type '" "BWAPI::Player const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  result = (int)((BWAPI::Player const *)arg1)->supplyUsed();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_supplyUsed__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  Race arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Player_supplyUsed",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_supplyUsed" "', argument " "1"" of type '" "BWAPI::Player const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Race,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Player_supplyUsed" "', argument " "2"" of type '" "Race""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Player_supplyUsed" "', argument " "2"" of type '" "Race""'");
    } else {
      Race * temp = reinterpret_cast< Race * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (int)((BWAPI::Player const *)arg1)->supplyUsed(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_supplyUsed(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Player, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Player_supplyUsed__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Player, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Race, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Player_supplyUsed__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Player_supplyUsed'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    supplyUsed(BWAPI::Player const *)\n"
    "    supplyUsed(BWAPI::Player const *,Race)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_allUnitCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UnitType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Player_allUnitCount",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_allUnitCount" "', argument " "1"" of type '" "BWAPI::Player const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__UnitType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Player_allUnitCount" "', argument " "2"" of type '" "BWAPI::UnitType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Player_allUnitCount" "', argument " "2"" of type '" "BWAPI::UnitType""'");
    } else {
      BWAPI::UnitType * temp = reinterpret_cast< BWAPI::UnitType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (int)((BWAPI::Player const *)arg1)->allUnitCount(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_completedUnitCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UnitType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Player_completedUnitCount",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_completedUnitCount" "', argument " "1"" of type '" "BWAPI::Player const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__UnitType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Player_completedUnitCount" "', argument " "2"" of type '" "BWAPI::UnitType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Player_completedUnitCount" "', argument " "2"" of type '" "BWAPI::UnitType""'");
    } else {
      BWAPI::UnitType * temp = reinterpret_cast< BWAPI::UnitType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (int)((BWAPI::Player const *)arg1)->completedUnitCount(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_incompleteUnitCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UnitType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Player_incompleteUnitCount",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_incompleteUnitCount" "', argument " "1"" of type '" "BWAPI::Player const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__UnitType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Player_incompleteUnitCount" "', argument " "2"" of type '" "BWAPI::UnitType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Player_incompleteUnitCount" "', argument " "2"" of type '" "BWAPI::UnitType""'");
    } else {
      BWAPI::UnitType * temp = reinterpret_cast< BWAPI::UnitType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (int)((BWAPI::Player const *)arg1)->incompleteUnitCount(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_deadUnitCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UnitType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Player_deadUnitCount",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_deadUnitCount" "', argument " "1"" of type '" "BWAPI::Player const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__UnitType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Player_deadUnitCount" "', argument " "2"" of type '" "BWAPI::UnitType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Player_deadUnitCount" "', argument " "2"" of type '" "BWAPI::UnitType""'");
    } else {
      BWAPI::UnitType * temp = reinterpret_cast< BWAPI::UnitType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (int)((BWAPI::Player const *)arg1)->deadUnitCount(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_killedUnitCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UnitType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Player_killedUnitCount",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_killedUnitCount" "', argument " "1"" of type '" "BWAPI::Player const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__UnitType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Player_killedUnitCount" "', argument " "2"" of type '" "BWAPI::UnitType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Player_killedUnitCount" "', argument " "2"" of type '" "BWAPI::UnitType""'");
    } else {
      BWAPI::UnitType * temp = reinterpret_cast< BWAPI::UnitType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (int)((BWAPI::Player const *)arg1)->killedUnitCount(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_getUpgradeLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  UpgradeType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Player_getUpgradeLevel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_getUpgradeLevel" "', argument " "1"" of type '" "BWAPI::Player const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_UpgradeType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Player_getUpgradeLevel" "', argument " "2"" of type '" "UpgradeType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Player_getUpgradeLevel" "', argument " "2"" of type '" "UpgradeType""'");
    } else {
      UpgradeType * temp = reinterpret_cast< UpgradeType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (int)((BWAPI::Player const *)arg1)->getUpgradeLevel(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_hasResearched(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  TechType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Player_hasResearched",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_hasResearched" "', argument " "1"" of type '" "BWAPI::Player const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_TechType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Player_hasResearched" "', argument " "2"" of type '" "TechType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Player_hasResearched" "', argument " "2"" of type '" "TechType""'");
    } else {
      TechType * temp = reinterpret_cast< TechType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)((BWAPI::Player const *)arg1)->hasResearched(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_isResearching(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  TechType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Player_isResearching",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_isResearching" "', argument " "1"" of type '" "BWAPI::Player const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_TechType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Player_isResearching" "', argument " "2"" of type '" "TechType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Player_isResearching" "', argument " "2"" of type '" "TechType""'");
    } else {
      TechType * temp = reinterpret_cast< TechType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)((BWAPI::Player const *)arg1)->isResearching(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_isUpgrading(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  UpgradeType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Player_isUpgrading",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_isUpgrading" "', argument " "1"" of type '" "BWAPI::Player const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_UpgradeType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Player_isUpgrading" "', argument " "2"" of type '" "UpgradeType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Player_isUpgrading" "', argument " "2"" of type '" "UpgradeType""'");
    } else {
      UpgradeType * temp = reinterpret_cast< UpgradeType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)((BWAPI::Player const *)arg1)->isUpgrading(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_getColor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Color result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Player_getColor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_getColor" "', argument " "1"" of type '" "BWAPI::Player const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  result = ((BWAPI::Player const *)arg1)->getColor();
  resultobj = SWIG_NewPointerObj((new BWAPI::Color(static_cast< const BWAPI::Color& >(result))), SWIGTYPE_p_BWAPI__Color, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_getTextColor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Player_getTextColor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_getTextColor" "', argument " "1"" of type '" "BWAPI::Player const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  result = (int)((BWAPI::Player const *)arg1)->getTextColor();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_maxEnergy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UnitType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Player_maxEnergy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_maxEnergy" "', argument " "1"" of type '" "BWAPI::Player const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__UnitType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Player_maxEnergy" "', argument " "2"" of type '" "BWAPI::UnitType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Player_maxEnergy" "', argument " "2"" of type '" "BWAPI::UnitType""'");
    } else {
      BWAPI::UnitType * temp = reinterpret_cast< BWAPI::UnitType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (int)((BWAPI::Player const *)arg1)->maxEnergy(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_topSpeed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UnitType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Player_topSpeed",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_topSpeed" "', argument " "1"" of type '" "BWAPI::Player const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__UnitType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Player_topSpeed" "', argument " "2"" of type '" "BWAPI::UnitType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Player_topSpeed" "', argument " "2"" of type '" "BWAPI::UnitType""'");
    } else {
      BWAPI::UnitType * temp = reinterpret_cast< BWAPI::UnitType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (double)((BWAPI::Player const *)arg1)->topSpeed(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_groundWeaponMaxRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UnitType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Player_groundWeaponMaxRange",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_groundWeaponMaxRange" "', argument " "1"" of type '" "BWAPI::Player const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__UnitType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Player_groundWeaponMaxRange" "', argument " "2"" of type '" "BWAPI::UnitType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Player_groundWeaponMaxRange" "', argument " "2"" of type '" "BWAPI::UnitType""'");
    } else {
      BWAPI::UnitType * temp = reinterpret_cast< BWAPI::UnitType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (int)((BWAPI::Player const *)arg1)->groundWeaponMaxRange(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_airWeaponMaxRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UnitType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Player_airWeaponMaxRange",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_airWeaponMaxRange" "', argument " "1"" of type '" "BWAPI::Player const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__UnitType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Player_airWeaponMaxRange" "', argument " "2"" of type '" "BWAPI::UnitType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Player_airWeaponMaxRange" "', argument " "2"" of type '" "BWAPI::UnitType""'");
    } else {
      BWAPI::UnitType * temp = reinterpret_cast< BWAPI::UnitType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (int)((BWAPI::Player const *)arg1)->airWeaponMaxRange(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_sightRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UnitType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Player_sightRange",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_sightRange" "', argument " "1"" of type '" "BWAPI::Player const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__UnitType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Player_sightRange" "', argument " "2"" of type '" "BWAPI::UnitType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Player_sightRange" "', argument " "2"" of type '" "BWAPI::UnitType""'");
    } else {
      BWAPI::UnitType * temp = reinterpret_cast< BWAPI::UnitType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (int)((BWAPI::Player const *)arg1)->sightRange(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_groundWeaponDamageCooldown(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UnitType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Player_groundWeaponDamageCooldown",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_groundWeaponDamageCooldown" "', argument " "1"" of type '" "BWAPI::Player const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__UnitType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Player_groundWeaponDamageCooldown" "', argument " "2"" of type '" "BWAPI::UnitType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Player_groundWeaponDamageCooldown" "', argument " "2"" of type '" "BWAPI::UnitType""'");
    } else {
      BWAPI::UnitType * temp = reinterpret_cast< BWAPI::UnitType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (int)((BWAPI::Player const *)arg1)->groundWeaponDamageCooldown(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_armor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UnitType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Player_armor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_armor" "', argument " "1"" of type '" "BWAPI::Player const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__UnitType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Player_armor" "', argument " "2"" of type '" "BWAPI::UnitType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Player_armor" "', argument " "2"" of type '" "BWAPI::UnitType""'");
    } else {
      BWAPI::UnitType * temp = reinterpret_cast< BWAPI::UnitType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (int)((BWAPI::Player const *)arg1)->armor(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_getUnits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SetWrapper< BWAPI::Unit * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Player_getUnits",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_getUnits" "', argument " "1"" of type '" "BWAPI::Player *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  result = (SetWrapper< BWAPI::Unit * > *)BWAPI_Player_getUnits(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapperT_BWAPI__Unit_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_getRace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Race result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Player_getRace",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_getRace" "', argument " "1"" of type '" "BWAPI::Player *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  result = BWAPI_Player_getRace(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::Race(static_cast< const BWAPI::Race& >(result))), SWIGTYPE_p_BWAPI__Race, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_getStartLocation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::TilePosition result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Player_getStartLocation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_getStartLocation" "', argument " "1"" of type '" "BWAPI::Player *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  result = BWAPI_Player_getStartLocation(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::TilePosition(static_cast< const BWAPI::TilePosition& >(result))), SWIGTYPE_p_BWAPI__TilePosition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Player(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Player",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Player, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Player" "', argument " "1"" of type '" "BWAPI::Player *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Player * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Player_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BWAPI__Player, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PlayerType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::PlayerType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PlayerType")) SWIG_fail;
  result = (BWAPI::PlayerType *)new BWAPI::PlayerType();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__PlayerType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PlayerType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::PlayerType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PlayerType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PlayerType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (BWAPI::PlayerType *)new BWAPI::PlayerType(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__PlayerType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PlayerType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::PlayerType *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::PlayerType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PlayerType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BWAPI__PlayerType,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PlayerType" "', argument " "1"" of type '" "BWAPI::PlayerType const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PlayerType" "', argument " "1"" of type '" "BWAPI::PlayerType const &""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::PlayerType * >(argp1);
  result = (BWAPI::PlayerType *)new BWAPI::PlayerType((BWAPI::PlayerType const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__PlayerType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PlayerType(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_PlayerType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BWAPI__PlayerType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PlayerType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_PlayerType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_PlayerType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BWAPI::PlayerType()\n"
    "    BWAPI::PlayerType(int)\n"
    "    BWAPI::PlayerType(BWAPI::PlayerType const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerType___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::PlayerType *arg1 = (BWAPI::PlayerType *) 0 ;
  BWAPI::PlayerType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PlayerType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__PlayerType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerType___eq__" "', argument " "1"" of type '" "BWAPI::PlayerType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::PlayerType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__PlayerType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PlayerType___eq__" "', argument " "2"" of type '" "BWAPI::PlayerType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PlayerType___eq__" "', argument " "2"" of type '" "BWAPI::PlayerType const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::PlayerType * >(argp2);
  result = (bool)((BWAPI::PlayerType const *)arg1)->operator ==((BWAPI::PlayerType const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerType___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::PlayerType *arg1 = (BWAPI::PlayerType *) 0 ;
  BWAPI::PlayerType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PlayerType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__PlayerType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerType___ne__" "', argument " "1"" of type '" "BWAPI::PlayerType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::PlayerType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__PlayerType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PlayerType___ne__" "', argument " "2"" of type '" "BWAPI::PlayerType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PlayerType___ne__" "', argument " "2"" of type '" "BWAPI::PlayerType const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::PlayerType * >(argp2);
  result = (bool)((BWAPI::PlayerType const *)arg1)->operator !=((BWAPI::PlayerType const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerType___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::PlayerType *arg1 = (BWAPI::PlayerType *) 0 ;
  BWAPI::PlayerType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PlayerType___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__PlayerType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerType___lt__" "', argument " "1"" of type '" "BWAPI::PlayerType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::PlayerType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__PlayerType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PlayerType___lt__" "', argument " "2"" of type '" "BWAPI::PlayerType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PlayerType___lt__" "', argument " "2"" of type '" "BWAPI::PlayerType const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::PlayerType * >(argp2);
  result = (bool)((BWAPI::PlayerType const *)arg1)->operator <((BWAPI::PlayerType const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerType_getID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::PlayerType *arg1 = (BWAPI::PlayerType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PlayerType_getID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__PlayerType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerType_getID" "', argument " "1"" of type '" "BWAPI::PlayerType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::PlayerType * >(argp1);
  result = (int)((BWAPI::PlayerType const *)arg1)->getID();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlayerType_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::PlayerType *arg1 = (BWAPI::PlayerType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PlayerType_getName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__PlayerType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlayerType_getName" "', argument " "1"" of type '" "BWAPI::PlayerType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::PlayerType * >(argp1);
  result = ((BWAPI::PlayerType const *)arg1)->getName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PlayerType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::PlayerType *arg1 = (BWAPI::PlayerType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PlayerType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__PlayerType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PlayerType" "', argument " "1"" of type '" "BWAPI::PlayerType *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::PlayerType * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PlayerType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BWAPI__PlayerType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_getPlayerType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  BWAPI::PlayerType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:getPlayerType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "getPlayerType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = BWAPI::PlayerTypes::getPlayerType(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::PlayerType(static_cast< const BWAPI::PlayerType& >(result))), SWIGTYPE_p_BWAPI__PlayerType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_allPlayerTypes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< BWAPI::PlayerType > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":allPlayerTypes")) SWIG_fail;
  result = (std::set< BWAPI::PlayerType > *) &BWAPI::PlayerTypes::allPlayerTypes();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_BWAPI__PlayerType_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_PlayerTypes_None_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PlayerTypes_None is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PlayerTypes_None_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::PlayerTypes::None), SWIGTYPE_p_BWAPI__PlayerType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Computer_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Computer is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Computer_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::PlayerTypes::Computer), SWIGTYPE_p_BWAPI__PlayerType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_PlayerTypes_Player_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PlayerTypes_Player is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PlayerTypes_Player_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::PlayerTypes::Player), SWIGTYPE_p_BWAPI__PlayerType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_PlayerTypes_RescuePassive_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PlayerTypes_RescuePassive is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PlayerTypes_RescuePassive_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::PlayerTypes::RescuePassive), SWIGTYPE_p_BWAPI__PlayerType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_EitherPreferComputer_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EitherPreferComputer is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_EitherPreferComputer_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::PlayerTypes::EitherPreferComputer), SWIGTYPE_p_BWAPI__PlayerType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_EitherPreferHuman_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EitherPreferHuman is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_EitherPreferHuman_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::PlayerTypes::EitherPreferHuman), SWIGTYPE_p_BWAPI__PlayerType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_PlayerTypes_Neutral_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PlayerTypes_Neutral is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PlayerTypes_Neutral_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::PlayerTypes::Neutral), SWIGTYPE_p_BWAPI__PlayerType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Closed_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Closed is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Closed_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::PlayerTypes::Closed), SWIGTYPE_p_BWAPI__PlayerType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_PlayerTypes_PlayerLeft_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PlayerTypes_PlayerLeft is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PlayerTypes_PlayerLeft_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::PlayerTypes::PlayerLeft), SWIGTYPE_p_BWAPI__PlayerType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ComputerLeft_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ComputerLeft is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ComputerLeft_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::PlayerTypes::ComputerLeft), SWIGTYPE_p_BWAPI__PlayerType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_PlayerTypes_Unknown_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PlayerTypes_Unknown is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PlayerTypes_Unknown_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::PlayerTypes::Unknown), SWIGTYPE_p_BWAPI__PlayerType,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_Position__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Position *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Position")) SWIG_fail;
  result = (BWAPI::Position *)new BWAPI::Position();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Position, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Position__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TilePosition *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Position *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Position",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BWAPI__TilePosition,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Position" "', argument " "1"" of type '" "BWAPI::TilePosition const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Position" "', argument " "1"" of type '" "BWAPI::TilePosition const &""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::TilePosition * >(argp1);
  result = (BWAPI::Position *)new BWAPI::Position((BWAPI::TilePosition const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Position, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Position__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::Position *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Position",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Position" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Position" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (BWAPI::Position *)new BWAPI::Position(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Position, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Position(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Position__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BWAPI__TilePosition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Position__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Position__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Position'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BWAPI::Position()\n"
    "    BWAPI::Position(BWAPI::TilePosition const &)\n"
    "    BWAPI::Position(int,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Position___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  BWAPI::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Position___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position___eq__" "', argument " "1"" of type '" "BWAPI::Position const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Position * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Position,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position___eq__" "', argument " "2"" of type '" "BWAPI::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position___eq__" "', argument " "2"" of type '" "BWAPI::Position const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Position * >(argp2);
  result = (bool)((BWAPI::Position const *)arg1)->operator ==((BWAPI::Position const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Position___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  BWAPI::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Position___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position___ne__" "', argument " "1"" of type '" "BWAPI::Position const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Position * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Position,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position___ne__" "', argument " "2"" of type '" "BWAPI::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position___ne__" "', argument " "2"" of type '" "BWAPI::Position const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Position * >(argp2);
  result = (bool)((BWAPI::Position const *)arg1)->operator !=((BWAPI::Position const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Position___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  BWAPI::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Position___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position___lt__" "', argument " "1"" of type '" "BWAPI::Position const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Position * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Position,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position___lt__" "', argument " "2"" of type '" "BWAPI::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position___lt__" "', argument " "2"" of type '" "BWAPI::Position const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Position * >(argp2);
  result = (bool)((BWAPI::Position const *)arg1)->operator <((BWAPI::Position const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Position_isValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Position_isValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_isValid" "', argument " "1"" of type '" "BWAPI::Position const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Position * >(argp1);
  result = (bool)((BWAPI::Position const *)arg1)->isValid();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Position___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  BWAPI::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::Position result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Position___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position___add__" "', argument " "1"" of type '" "BWAPI::Position const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Position * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Position,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position___add__" "', argument " "2"" of type '" "BWAPI::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position___add__" "', argument " "2"" of type '" "BWAPI::Position const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Position * >(argp2);
  result = ((BWAPI::Position const *)arg1)->operator +((BWAPI::Position const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BWAPI::Position(static_cast< const BWAPI::Position& >(result))), SWIGTYPE_p_BWAPI__Position, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Position___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  BWAPI::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::Position result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Position___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position___sub__" "', argument " "1"" of type '" "BWAPI::Position const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Position * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Position,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position___sub__" "', argument " "2"" of type '" "BWAPI::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position___sub__" "', argument " "2"" of type '" "BWAPI::Position const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Position * >(argp2);
  result = ((BWAPI::Position const *)arg1)->operator -((BWAPI::Position const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BWAPI::Position(static_cast< const BWAPI::Position& >(result))), SWIGTYPE_p_BWAPI__Position, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Position_makeValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Position *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Position_makeValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_makeValid" "', argument " "1"" of type '" "BWAPI::Position *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Position * >(argp1);
  result = (BWAPI::Position *) &(arg1)->makeValid();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Position, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Position___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  BWAPI::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::Position *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Position___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Position, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position___iadd__" "', argument " "1"" of type '" "BWAPI::Position *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Position * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Position,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position___iadd__" "', argument " "2"" of type '" "BWAPI::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position___iadd__" "', argument " "2"" of type '" "BWAPI::Position const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Position * >(argp2);
  result = (BWAPI::Position *) &(arg1)->operator +=((BWAPI::Position const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Position, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Position___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  BWAPI::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::Position *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Position___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Position, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position___isub__" "', argument " "1"" of type '" "BWAPI::Position *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Position * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Position,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position___isub__" "', argument " "2"" of type '" "BWAPI::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position___isub__" "', argument " "2"" of type '" "BWAPI::Position const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Position * >(argp2);
  result = (BWAPI::Position *) &(arg1)->operator -=((BWAPI::Position const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Position, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Position_getDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  BWAPI::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Position_getDistance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_getDistance" "', argument " "1"" of type '" "BWAPI::Position const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Position * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Position,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_getDistance" "', argument " "2"" of type '" "BWAPI::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_getDistance" "', argument " "2"" of type '" "BWAPI::Position const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Position * >(argp2);
  result = (double)((BWAPI::Position const *)arg1)->getDistance((BWAPI::Position const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Position_getApproxDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  BWAPI::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Position_getApproxDistance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_getApproxDistance" "', argument " "1"" of type '" "BWAPI::Position const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Position * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Position,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_getApproxDistance" "', argument " "2"" of type '" "BWAPI::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_getApproxDistance" "', argument " "2"" of type '" "BWAPI::Position const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Position * >(argp2);
  result = (double)((BWAPI::Position const *)arg1)->getApproxDistance((BWAPI::Position const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Position_getLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Position_getLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_getLength" "', argument " "1"" of type '" "BWAPI::Position const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Position * >(argp1);
  result = (double)((BWAPI::Position const *)arg1)->getLength();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Position_getX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Position_getX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_getX" "', argument " "1"" of type '" "BWAPI::Position *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Position * >(argp1);
  result = (int)BWAPI_Position_getX(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Position_getY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Position_getY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_getY" "', argument " "1"" of type '" "BWAPI::Position *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Position * >(argp1);
  result = (int)BWAPI_Position_getY(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Position(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Position",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Position, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Position" "', argument " "1"" of type '" "BWAPI::Position *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Position * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Position_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BWAPI__Position, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_Positions_Invalid_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Positions_Invalid is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Positions_Invalid_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Positions::Invalid), SWIGTYPE_p_BWAPI__Position,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Positions_None_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Positions_None is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Positions_None_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Positions::None), SWIGTYPE_p_BWAPI__Position,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Positions_Unknown_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Positions_Unknown is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Positions_Unknown_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Positions::Unknown), SWIGTYPE_p_BWAPI__Position,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_Race__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Race *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Race")) SWIG_fail;
  result = (BWAPI::Race *)new BWAPI::Race();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Race, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Race__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Race *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Race",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Race" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (BWAPI::Race *)new BWAPI::Race(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Race, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Race__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Race *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Race *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Race",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BWAPI__Race,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Race" "', argument " "1"" of type '" "BWAPI::Race const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Race" "', argument " "1"" of type '" "BWAPI::Race const &""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Race * >(argp1);
  result = (BWAPI::Race *)new BWAPI::Race((BWAPI::Race const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Race, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Race(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Race__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BWAPI__Race, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Race__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Race__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Race'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BWAPI::Race()\n"
    "    BWAPI::Race(int)\n"
    "    BWAPI::Race(BWAPI::Race const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Race___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  BWAPI::Race *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Race___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Race, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Race___eq__" "', argument " "1"" of type '" "BWAPI::Race const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Race * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Race,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Race___eq__" "', argument " "2"" of type '" "BWAPI::Race const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Race___eq__" "', argument " "2"" of type '" "BWAPI::Race const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Race * >(argp2);
  result = (bool)((BWAPI::Race const *)arg1)->operator ==((BWAPI::Race const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Race___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  BWAPI::Race *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Race___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Race, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Race___ne__" "', argument " "1"" of type '" "BWAPI::Race const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Race * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Race,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Race___ne__" "', argument " "2"" of type '" "BWAPI::Race const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Race___ne__" "', argument " "2"" of type '" "BWAPI::Race const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Race * >(argp2);
  result = (bool)((BWAPI::Race const *)arg1)->operator !=((BWAPI::Race const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Race___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  BWAPI::Race *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Race___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Race, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Race___lt__" "', argument " "1"" of type '" "BWAPI::Race const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Race * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Race,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Race___lt__" "', argument " "2"" of type '" "BWAPI::Race const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Race___lt__" "', argument " "2"" of type '" "BWAPI::Race const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Race * >(argp2);
  result = (bool)((BWAPI::Race const *)arg1)->operator <((BWAPI::Race const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Race_getID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Race_getID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Race, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Race_getID" "', argument " "1"" of type '" "BWAPI::Race const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Race * >(argp1);
  result = (int)((BWAPI::Race const *)arg1)->getID();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Race_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Race_getName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Race, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Race_getName" "', argument " "1"" of type '" "BWAPI::Race const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Race * >(argp1);
  result = ((BWAPI::Race const *)arg1)->getName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Race_getWorker(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Race_getWorker",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Race, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Race_getWorker" "', argument " "1"" of type '" "BWAPI::Race const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Race * >(argp1);
  result = ((BWAPI::Race const *)arg1)->getWorker();
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitType(static_cast< const BWAPI::UnitType& >(result))), SWIGTYPE_p_BWAPI__UnitType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Race_getCenter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Race_getCenter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Race, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Race_getCenter" "', argument " "1"" of type '" "BWAPI::Race const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Race * >(argp1);
  result = ((BWAPI::Race const *)arg1)->getCenter();
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitType(static_cast< const BWAPI::UnitType& >(result))), SWIGTYPE_p_BWAPI__UnitType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Race_getRefinery(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Race_getRefinery",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Race, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Race_getRefinery" "', argument " "1"" of type '" "BWAPI::Race const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Race * >(argp1);
  result = ((BWAPI::Race const *)arg1)->getRefinery();
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitType(static_cast< const BWAPI::UnitType& >(result))), SWIGTYPE_p_BWAPI__UnitType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Race_getTransport(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Race_getTransport",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Race, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Race_getTransport" "', argument " "1"" of type '" "BWAPI::Race const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Race * >(argp1);
  result = ((BWAPI::Race const *)arg1)->getTransport();
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitType(static_cast< const BWAPI::UnitType& >(result))), SWIGTYPE_p_BWAPI__UnitType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Race_getSupplyProvider(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Race_getSupplyProvider",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Race, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Race_getSupplyProvider" "', argument " "1"" of type '" "BWAPI::Race const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Race * >(argp1);
  result = ((BWAPI::Race const *)arg1)->getSupplyProvider();
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitType(static_cast< const BWAPI::UnitType& >(result))), SWIGTYPE_p_BWAPI__UnitType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Race(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Race",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Race, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Race" "', argument " "1"" of type '" "BWAPI::Race *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Race * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Race_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BWAPI__Race, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_getRace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  BWAPI::Race result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:getRace",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "getRace" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = BWAPI::Races::getRace(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::Race(static_cast< const BWAPI::Race& >(result))), SWIGTYPE_p_BWAPI__Race, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_allRaces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< BWAPI::Race > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":allRaces")) SWIG_fail;
  result = (std::set< BWAPI::Race > *) &BWAPI::Races::allRaces();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_BWAPI__Race_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Zerg_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Races::Zerg), SWIGTYPE_p_BWAPI__Race,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Races::Terran), SWIGTYPE_p_BWAPI__Race,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Races::Protoss), SWIGTYPE_p_BWAPI__Race,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Random_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Random is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Random_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Races::Random), SWIGTYPE_p_BWAPI__Race,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Other_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Other is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Other_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Races::Other), SWIGTYPE_p_BWAPI__Race,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Races_None_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Races_None is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Races_None_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Races::None), SWIGTYPE_p_BWAPI__Race,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Races_Unknown_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Races_Unknown is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Races_Unknown_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::Races::Unknown), SWIGTYPE_p_BWAPI__Race,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_TechType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TechType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TechType")) SWIG_fail;
  result = (BWAPI::TechType *)new BWAPI::TechType();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__TechType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TechType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::TechType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TechType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TechType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (BWAPI::TechType *)new BWAPI::TechType(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__TechType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TechType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TechType *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::TechType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TechType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BWAPI__TechType,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TechType" "', argument " "1"" of type '" "BWAPI::TechType const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TechType" "', argument " "1"" of type '" "BWAPI::TechType const &""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::TechType * >(argp1);
  result = (BWAPI::TechType *)new BWAPI::TechType((BWAPI::TechType const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__TechType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TechType(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TechType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BWAPI__TechType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TechType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_TechType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TechType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BWAPI::TechType()\n"
    "    BWAPI::TechType(int)\n"
    "    BWAPI::TechType(BWAPI::TechType const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_TechType___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  BWAPI::TechType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TechType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__TechType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TechType___eq__" "', argument " "1"" of type '" "BWAPI::TechType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::TechType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__TechType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TechType___eq__" "', argument " "2"" of type '" "BWAPI::TechType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TechType___eq__" "', argument " "2"" of type '" "BWAPI::TechType const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::TechType * >(argp2);
  result = (bool)((BWAPI::TechType const *)arg1)->operator ==((BWAPI::TechType const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TechType___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  BWAPI::TechType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TechType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__TechType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TechType___ne__" "', argument " "1"" of type '" "BWAPI::TechType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::TechType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__TechType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TechType___ne__" "', argument " "2"" of type '" "BWAPI::TechType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TechType___ne__" "', argument " "2"" of type '" "BWAPI::TechType const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::TechType * >(argp2);
  result = (bool)((BWAPI::TechType const *)arg1)->operator !=((BWAPI::TechType const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TechType___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  BWAPI::TechType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TechType___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__TechType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TechType___lt__" "', argument " "1"" of type '" "BWAPI::TechType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::TechType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__TechType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TechType___lt__" "', argument " "2"" of type '" "BWAPI::TechType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TechType___lt__" "', argument " "2"" of type '" "BWAPI::TechType const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::TechType * >(argp2);
  result = (bool)((BWAPI::TechType const *)arg1)->operator <((BWAPI::TechType const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TechType_getID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TechType_getID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__TechType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TechType_getID" "', argument " "1"" of type '" "BWAPI::TechType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::TechType * >(argp1);
  result = (int)((BWAPI::TechType const *)arg1)->getID();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TechType_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TechType_getName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__TechType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TechType_getName" "', argument " "1"" of type '" "BWAPI::TechType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::TechType * >(argp1);
  result = ((BWAPI::TechType const *)arg1)->getName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TechType_getRace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Race result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TechType_getRace",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__TechType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TechType_getRace" "', argument " "1"" of type '" "BWAPI::TechType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::TechType * >(argp1);
  result = ((BWAPI::TechType const *)arg1)->getRace();
  resultobj = SWIG_NewPointerObj((new BWAPI::Race(static_cast< const BWAPI::Race& >(result))), SWIGTYPE_p_BWAPI__Race, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TechType_mineralPrice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TechType_mineralPrice",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__TechType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TechType_mineralPrice" "', argument " "1"" of type '" "BWAPI::TechType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::TechType * >(argp1);
  result = (int)((BWAPI::TechType const *)arg1)->mineralPrice();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TechType_gasPrice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TechType_gasPrice",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__TechType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TechType_gasPrice" "', argument " "1"" of type '" "BWAPI::TechType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::TechType * >(argp1);
  result = (int)((BWAPI::TechType const *)arg1)->gasPrice();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TechType_researchTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TechType_researchTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__TechType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TechType_researchTime" "', argument " "1"" of type '" "BWAPI::TechType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::TechType * >(argp1);
  result = (int)((BWAPI::TechType const *)arg1)->researchTime();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TechType_energyUsed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TechType_energyUsed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__TechType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TechType_energyUsed" "', argument " "1"" of type '" "BWAPI::TechType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::TechType * >(argp1);
  result = (int)((BWAPI::TechType const *)arg1)->energyUsed();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TechType_whatResearches(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TechType_whatResearches",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__TechType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TechType_whatResearches" "', argument " "1"" of type '" "BWAPI::TechType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::TechType * >(argp1);
  result = ((BWAPI::TechType const *)arg1)->whatResearches();
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitType(static_cast< const BWAPI::UnitType& >(result))), SWIGTYPE_p_BWAPI__UnitType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TechType_getWeapon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::WeaponType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TechType_getWeapon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__TechType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TechType_getWeapon" "', argument " "1"" of type '" "BWAPI::TechType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::TechType * >(argp1);
  result = ((BWAPI::TechType const *)arg1)->getWeapon();
  resultobj = SWIG_NewPointerObj((new BWAPI::WeaponType(static_cast< const BWAPI::WeaponType& >(result))), SWIGTYPE_p_BWAPI__WeaponType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TechType_targetsUnit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TechType_targetsUnit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__TechType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TechType_targetsUnit" "', argument " "1"" of type '" "BWAPI::TechType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::TechType * >(argp1);
  result = (bool)((BWAPI::TechType const *)arg1)->targetsUnit();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TechType_targetsPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TechType_targetsPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__TechType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TechType_targetsPosition" "', argument " "1"" of type '" "BWAPI::TechType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::TechType * >(argp1);
  result = (bool)((BWAPI::TechType const *)arg1)->targetsPosition();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TechType_whatUses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< BWAPI::UnitType > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TechType_whatUses",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__TechType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TechType_whatUses" "', argument " "1"" of type '" "BWAPI::TechType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::TechType * >(argp1);
  result = (std::set< BWAPI::UnitType > *) &((BWAPI::TechType const *)arg1)->whatUses();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_BWAPI__UnitType_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TechType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TechType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__TechType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TechType" "', argument " "1"" of type '" "BWAPI::TechType *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::TechType * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TechType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BWAPI__TechType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_getTechType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  BWAPI::TechType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:getTechType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "getTechType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = BWAPI::TechTypes::getTechType(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::TechType(static_cast< const BWAPI::TechType& >(result))), SWIGTYPE_p_BWAPI__TechType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_allTechTypes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< BWAPI::TechType > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":allTechTypes")) SWIG_fail;
  result = (std::set< BWAPI::TechType > *) &BWAPI::TechTypes::allTechTypes();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_BWAPI__TechType_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Stim_Packs_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Stim_Packs is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Stim_Packs_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TechTypes::Stim_Packs), SWIGTYPE_p_BWAPI__TechType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_TechTypes_Lockdown_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TechTypes_Lockdown is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_TechTypes_Lockdown_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TechTypes::Lockdown), SWIGTYPE_p_BWAPI__TechType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_TechTypes_EMP_Shockwave_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TechTypes_EMP_Shockwave is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_TechTypes_EMP_Shockwave_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TechTypes::EMP_Shockwave), SWIGTYPE_p_BWAPI__TechType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_TechTypes_Spider_Mines_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TechTypes_Spider_Mines is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_TechTypes_Spider_Mines_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TechTypes::Spider_Mines), SWIGTYPE_p_BWAPI__TechType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Scanner_Sweep_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Scanner_Sweep is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Scanner_Sweep_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TechTypes::Scanner_Sweep), SWIGTYPE_p_BWAPI__TechType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Tank_Siege_Mode_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Tank_Siege_Mode is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Tank_Siege_Mode_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TechTypes::Tank_Siege_Mode), SWIGTYPE_p_BWAPI__TechType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Defensive_Matrix_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Defensive_Matrix is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Defensive_Matrix_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TechTypes::Defensive_Matrix), SWIGTYPE_p_BWAPI__TechType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_TechTypes_Irradiate_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TechTypes_Irradiate is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_TechTypes_Irradiate_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TechTypes::Irradiate), SWIGTYPE_p_BWAPI__TechType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_TechTypes_Yamato_Gun_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TechTypes_Yamato_Gun is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_TechTypes_Yamato_Gun_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TechTypes::Yamato_Gun), SWIGTYPE_p_BWAPI__TechType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Cloaking_Field_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Cloaking_Field is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Cloaking_Field_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TechTypes::Cloaking_Field), SWIGTYPE_p_BWAPI__TechType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Personnel_Cloaking_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Personnel_Cloaking is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Personnel_Cloaking_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TechTypes::Personnel_Cloaking), SWIGTYPE_p_BWAPI__TechType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_TechTypes_Burrowing_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TechTypes_Burrowing is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_TechTypes_Burrowing_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TechTypes::Burrowing), SWIGTYPE_p_BWAPI__TechType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Infestation_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Infestation is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Infestation_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TechTypes::Infestation), SWIGTYPE_p_BWAPI__TechType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_TechTypes_Spawn_Broodlings_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TechTypes_Spawn_Broodlings is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_TechTypes_Spawn_Broodlings_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TechTypes::Spawn_Broodlings), SWIGTYPE_p_BWAPI__TechType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_TechTypes_Dark_Swarm_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TechTypes_Dark_Swarm is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_TechTypes_Dark_Swarm_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TechTypes::Dark_Swarm), SWIGTYPE_p_BWAPI__TechType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_TechTypes_Plague_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TechTypes_Plague is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_TechTypes_Plague_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TechTypes::Plague), SWIGTYPE_p_BWAPI__TechType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_TechTypes_Consume_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TechTypes_Consume is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_TechTypes_Consume_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TechTypes::Consume), SWIGTYPE_p_BWAPI__TechType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_TechTypes_Ensnare_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TechTypes_Ensnare is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_TechTypes_Ensnare_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TechTypes::Ensnare), SWIGTYPE_p_BWAPI__TechType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_TechTypes_Parasite_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TechTypes_Parasite is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_TechTypes_Parasite_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TechTypes::Parasite), SWIGTYPE_p_BWAPI__TechType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_TechTypes_Psionic_Storm_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TechTypes_Psionic_Storm is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_TechTypes_Psionic_Storm_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TechTypes::Psionic_Storm), SWIGTYPE_p_BWAPI__TechType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hallucination_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hallucination is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hallucination_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TechTypes::Hallucination), SWIGTYPE_p_BWAPI__TechType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Recall_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Recall is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Recall_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TechTypes::Recall), SWIGTYPE_p_BWAPI__TechType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_TechTypes_Stasis_Field_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TechTypes_Stasis_Field is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_TechTypes_Stasis_Field_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TechTypes::Stasis_Field), SWIGTYPE_p_BWAPI__TechType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Archon_Warp_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Archon_Warp is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Archon_Warp_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TechTypes::Archon_Warp), SWIGTYPE_p_BWAPI__TechType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_TechTypes_Restoration_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TechTypes_Restoration is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_TechTypes_Restoration_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TechTypes::Restoration), SWIGTYPE_p_BWAPI__TechType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_TechTypes_Disruption_Web_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TechTypes_Disruption_Web is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_TechTypes_Disruption_Web_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TechTypes::Disruption_Web), SWIGTYPE_p_BWAPI__TechType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_TechTypes_Mind_Control_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TechTypes_Mind_Control is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_TechTypes_Mind_Control_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TechTypes::Mind_Control), SWIGTYPE_p_BWAPI__TechType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Dark_Archon_Meld_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Dark_Archon_Meld is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Dark_Archon_Meld_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TechTypes::Dark_Archon_Meld), SWIGTYPE_p_BWAPI__TechType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_TechTypes_Feedback_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TechTypes_Feedback is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_TechTypes_Feedback_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TechTypes::Feedback), SWIGTYPE_p_BWAPI__TechType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_TechTypes_Optical_Flare_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TechTypes_Optical_Flare is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_TechTypes_Optical_Flare_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TechTypes::Optical_Flare), SWIGTYPE_p_BWAPI__TechType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_TechTypes_Maelstrom_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TechTypes_Maelstrom is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_TechTypes_Maelstrom_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TechTypes::Maelstrom), SWIGTYPE_p_BWAPI__TechType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Lurker_Aspect_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Lurker_Aspect is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Lurker_Aspect_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TechTypes::Lurker_Aspect), SWIGTYPE_p_BWAPI__TechType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Healing_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Healing is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Healing_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TechTypes::Healing), SWIGTYPE_p_BWAPI__TechType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_TechTypes_None_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TechTypes_None is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_TechTypes_None_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TechTypes::None), SWIGTYPE_p_BWAPI__TechType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_TechTypes_Unknown_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TechTypes_Unknown is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_TechTypes_Unknown_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TechTypes::Unknown), SWIGTYPE_p_BWAPI__TechType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_TechTypes_Nuclear_Strike_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TechTypes_Nuclear_Strike is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_TechTypes_Nuclear_Strike_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TechTypes::Nuclear_Strike), SWIGTYPE_p_BWAPI__TechType,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_TilePosition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TilePosition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TilePosition")) SWIG_fail;
  result = (BWAPI::TilePosition *)new BWAPI::TilePosition();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__TilePosition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TilePosition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Position *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::TilePosition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TilePosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BWAPI__Position,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TilePosition" "', argument " "1"" of type '" "BWAPI::Position const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TilePosition" "', argument " "1"" of type '" "BWAPI::Position const &""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Position * >(argp1);
  result = (BWAPI::TilePosition *)new BWAPI::TilePosition((BWAPI::Position const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__TilePosition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TilePosition__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::TilePosition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_TilePosition",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TilePosition" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TilePosition" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (BWAPI::TilePosition *)new BWAPI::TilePosition(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__TilePosition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TilePosition(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TilePosition__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BWAPI__Position, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TilePosition__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_TilePosition__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TilePosition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BWAPI::TilePosition()\n"
    "    BWAPI::TilePosition(BWAPI::Position const &)\n"
    "    BWAPI::TilePosition(int,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_TilePosition___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  BWAPI::TilePosition *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TilePosition___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__TilePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TilePosition___eq__" "', argument " "1"" of type '" "BWAPI::TilePosition const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::TilePosition * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__TilePosition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TilePosition___eq__" "', argument " "2"" of type '" "BWAPI::TilePosition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TilePosition___eq__" "', argument " "2"" of type '" "BWAPI::TilePosition const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::TilePosition * >(argp2);
  result = (bool)((BWAPI::TilePosition const *)arg1)->operator ==((BWAPI::TilePosition const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TilePosition___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  BWAPI::TilePosition *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TilePosition___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__TilePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TilePosition___ne__" "', argument " "1"" of type '" "BWAPI::TilePosition const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::TilePosition * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__TilePosition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TilePosition___ne__" "', argument " "2"" of type '" "BWAPI::TilePosition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TilePosition___ne__" "', argument " "2"" of type '" "BWAPI::TilePosition const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::TilePosition * >(argp2);
  result = (bool)((BWAPI::TilePosition const *)arg1)->operator !=((BWAPI::TilePosition const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TilePosition___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  BWAPI::TilePosition *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TilePosition___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__TilePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TilePosition___lt__" "', argument " "1"" of type '" "BWAPI::TilePosition const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::TilePosition * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__TilePosition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TilePosition___lt__" "', argument " "2"" of type '" "BWAPI::TilePosition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TilePosition___lt__" "', argument " "2"" of type '" "BWAPI::TilePosition const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::TilePosition * >(argp2);
  result = (bool)((BWAPI::TilePosition const *)arg1)->operator <((BWAPI::TilePosition const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TilePosition_isValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TilePosition_isValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__TilePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TilePosition_isValid" "', argument " "1"" of type '" "BWAPI::TilePosition const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::TilePosition * >(argp1);
  result = (bool)((BWAPI::TilePosition const *)arg1)->isValid();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TilePosition___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  BWAPI::TilePosition *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::TilePosition result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TilePosition___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__TilePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TilePosition___add__" "', argument " "1"" of type '" "BWAPI::TilePosition const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::TilePosition * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__TilePosition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TilePosition___add__" "', argument " "2"" of type '" "BWAPI::TilePosition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TilePosition___add__" "', argument " "2"" of type '" "BWAPI::TilePosition const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::TilePosition * >(argp2);
  result = ((BWAPI::TilePosition const *)arg1)->operator +((BWAPI::TilePosition const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BWAPI::TilePosition(static_cast< const BWAPI::TilePosition& >(result))), SWIGTYPE_p_BWAPI__TilePosition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TilePosition___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  BWAPI::TilePosition *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::TilePosition result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TilePosition___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__TilePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TilePosition___sub__" "', argument " "1"" of type '" "BWAPI::TilePosition const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::TilePosition * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__TilePosition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TilePosition___sub__" "', argument " "2"" of type '" "BWAPI::TilePosition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TilePosition___sub__" "', argument " "2"" of type '" "BWAPI::TilePosition const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::TilePosition * >(argp2);
  result = ((BWAPI::TilePosition const *)arg1)->operator -((BWAPI::TilePosition const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BWAPI::TilePosition(static_cast< const BWAPI::TilePosition& >(result))), SWIGTYPE_p_BWAPI__TilePosition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TilePosition_makeValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::TilePosition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TilePosition_makeValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__TilePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TilePosition_makeValid" "', argument " "1"" of type '" "BWAPI::TilePosition *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::TilePosition * >(argp1);
  result = (BWAPI::TilePosition *) &(arg1)->makeValid();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__TilePosition, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TilePosition___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  BWAPI::TilePosition *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::TilePosition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TilePosition___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__TilePosition, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TilePosition___iadd__" "', argument " "1"" of type '" "BWAPI::TilePosition *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::TilePosition * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__TilePosition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TilePosition___iadd__" "', argument " "2"" of type '" "BWAPI::TilePosition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TilePosition___iadd__" "', argument " "2"" of type '" "BWAPI::TilePosition const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::TilePosition * >(argp2);
  result = (BWAPI::TilePosition *) &(arg1)->operator +=((BWAPI::TilePosition const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__TilePosition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TilePosition___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  BWAPI::TilePosition *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::TilePosition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TilePosition___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__TilePosition, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TilePosition___isub__" "', argument " "1"" of type '" "BWAPI::TilePosition *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::TilePosition * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__TilePosition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TilePosition___isub__" "', argument " "2"" of type '" "BWAPI::TilePosition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TilePosition___isub__" "', argument " "2"" of type '" "BWAPI::TilePosition const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::TilePosition * >(argp2);
  result = (BWAPI::TilePosition *) &(arg1)->operator -=((BWAPI::TilePosition const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__TilePosition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TilePosition_getDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  BWAPI::TilePosition *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TilePosition_getDistance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__TilePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TilePosition_getDistance" "', argument " "1"" of type '" "BWAPI::TilePosition const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::TilePosition * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__TilePosition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TilePosition_getDistance" "', argument " "2"" of type '" "BWAPI::TilePosition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TilePosition_getDistance" "', argument " "2"" of type '" "BWAPI::TilePosition const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::TilePosition * >(argp2);
  result = (double)((BWAPI::TilePosition const *)arg1)->getDistance((BWAPI::TilePosition const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TilePosition_getLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TilePosition_getLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__TilePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TilePosition_getLength" "', argument " "1"" of type '" "BWAPI::TilePosition const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::TilePosition * >(argp1);
  result = (double)((BWAPI::TilePosition const *)arg1)->getLength();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TilePosition_getX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TilePosition_getX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__TilePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TilePosition_getX" "', argument " "1"" of type '" "BWAPI::TilePosition *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::TilePosition * >(argp1);
  result = (int)BWAPI_TilePosition_getX(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TilePosition_getY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TilePosition_getY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__TilePosition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TilePosition_getY" "', argument " "1"" of type '" "BWAPI::TilePosition *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::TilePosition * >(argp1);
  result = (int)BWAPI_TilePosition_getY(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TilePosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TilePosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__TilePosition, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TilePosition" "', argument " "1"" of type '" "BWAPI::TilePosition *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::TilePosition * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TilePosition_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BWAPI__TilePosition, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_TilePositions_Invalid_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TilePositions_Invalid is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_TilePositions_Invalid_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TilePositions::Invalid), SWIGTYPE_p_BWAPI__TilePosition,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_TilePositions_None_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TilePositions_None is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_TilePositions_None_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TilePositions::None), SWIGTYPE_p_BWAPI__TilePosition,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_TilePositions_Unknown_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TilePositions_Unknown is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_TilePositions_Unknown_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::TilePositions::Unknown), SWIGTYPE_p_BWAPI__TilePosition,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Unit_getID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getID" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (int)((BWAPI::Unit const *)arg1)->getID();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getPlayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Player *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getPlayer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getPlayer" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (BWAPI::Player *)((BWAPI::Unit const *)arg1)->getPlayer();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getType" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = ((BWAPI::Unit const *)arg1)->getType();
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitType(static_cast< const BWAPI::UnitType& >(result))), SWIGTYPE_p_BWAPI__UnitType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Position result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getPosition" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = ((BWAPI::Unit const *)arg1)->getPosition();
  resultobj = SWIG_NewPointerObj((new BWAPI::Position(static_cast< const BWAPI::Position& >(result))), SWIGTYPE_p_BWAPI__Position, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getTilePosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::TilePosition result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getTilePosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getTilePosition" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = ((BWAPI::Unit const *)arg1)->getTilePosition();
  resultobj = SWIG_NewPointerObj((new BWAPI::TilePosition(static_cast< const BWAPI::TilePosition& >(result))), SWIGTYPE_p_BWAPI__TilePosition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getAngle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getAngle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getAngle" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (double)((BWAPI::Unit const *)arg1)->getAngle();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getVelocityX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getVelocityX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getVelocityX" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (double)((BWAPI::Unit const *)arg1)->getVelocityX();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getVelocityY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getVelocityY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getVelocityY" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (double)((BWAPI::Unit const *)arg1)->getVelocityY();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getHitPoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getHitPoints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getHitPoints" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (int)((BWAPI::Unit const *)arg1)->getHitPoints();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getShields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getShields",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getShields" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (int)((BWAPI::Unit const *)arg1)->getShields();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getEnergy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getEnergy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getEnergy" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (int)((BWAPI::Unit const *)arg1)->getEnergy();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getResources(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getResources",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getResources" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (int)((BWAPI::Unit const *)arg1)->getResources();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getResourceGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getResourceGroup",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getResourceGroup" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (int)((BWAPI::Unit const *)arg1)->getResourceGroup();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getDistance__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unit_getDistance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getDistance" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unit_getDistance" "', argument " "2"" of type '" "BWAPI::Unit *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Unit * >(argp2);
  result = (double)((BWAPI::Unit const *)arg1)->getDistance(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getDistance__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unit_getDistance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getDistance" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Position,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unit_getDistance" "', argument " "2"" of type '" "BWAPI::Position""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unit_getDistance" "', argument " "2"" of type '" "BWAPI::Position""'");
    } else {
      BWAPI::Position * temp = reinterpret_cast< BWAPI::Position * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (double)((BWAPI::Unit const *)arg1)->getDistance(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getDistance(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Unit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BWAPI__Unit, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Unit_getDistance__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Unit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BWAPI__Position, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Unit_getDistance__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Unit_getDistance'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getDistance(BWAPI::Unit const *,BWAPI::Unit *)\n"
    "    getDistance(BWAPI::Unit const *,BWAPI::Position)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_hasPath__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unit_hasPath",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_hasPath" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unit_hasPath" "', argument " "2"" of type '" "BWAPI::Unit *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Unit * >(argp2);
  result = (bool)((BWAPI::Unit const *)arg1)->hasPath(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_hasPath__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unit_hasPath",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_hasPath" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Position,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unit_hasPath" "', argument " "2"" of type '" "BWAPI::Position""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unit_hasPath" "', argument " "2"" of type '" "BWAPI::Position""'");
    } else {
      BWAPI::Position * temp = reinterpret_cast< BWAPI::Position * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)((BWAPI::Unit const *)arg1)->hasPath(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_hasPath(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Unit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BWAPI__Unit, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Unit_hasPath__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Unit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BWAPI__Position, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Unit_hasPath__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Unit_hasPath'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hasPath(BWAPI::Unit const *,BWAPI::Unit *)\n"
    "    hasPath(BWAPI::Unit const *,BWAPI::Position)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getLastOrderFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getLastOrderFrame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getLastOrderFrame" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (int)((BWAPI::Unit const *)arg1)->getLastOrderFrame();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getUpgradeLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  UpgradeType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unit_getUpgradeLevel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getUpgradeLevel" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_UpgradeType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unit_getUpgradeLevel" "', argument " "2"" of type '" "UpgradeType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unit_getUpgradeLevel" "', argument " "2"" of type '" "UpgradeType""'");
    } else {
      UpgradeType * temp = reinterpret_cast< UpgradeType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (int)((BWAPI::Unit const *)arg1)->getUpgradeLevel(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getInitialType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getInitialType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getInitialType" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = ((BWAPI::Unit const *)arg1)->getInitialType();
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitType(static_cast< const BWAPI::UnitType& >(result))), SWIGTYPE_p_BWAPI__UnitType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getInitialPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Position result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getInitialPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getInitialPosition" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = ((BWAPI::Unit const *)arg1)->getInitialPosition();
  resultobj = SWIG_NewPointerObj((new BWAPI::Position(static_cast< const BWAPI::Position& >(result))), SWIGTYPE_p_BWAPI__Position, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getInitialTilePosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::TilePosition result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getInitialTilePosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getInitialTilePosition" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = ((BWAPI::Unit const *)arg1)->getInitialTilePosition();
  resultobj = SWIG_NewPointerObj((new BWAPI::TilePosition(static_cast< const BWAPI::TilePosition& >(result))), SWIGTYPE_p_BWAPI__TilePosition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getInitialHitPoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getInitialHitPoints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getInitialHitPoints" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (int)((BWAPI::Unit const *)arg1)->getInitialHitPoints();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getInitialResources(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getInitialResources",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getInitialResources" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (int)((BWAPI::Unit const *)arg1)->getInitialResources();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getKillCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getKillCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getKillCount" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (int)((BWAPI::Unit const *)arg1)->getKillCount();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getInterceptorCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getInterceptorCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getInterceptorCount" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (int)((BWAPI::Unit const *)arg1)->getInterceptorCount();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getScarabCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getScarabCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getScarabCount" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (int)((BWAPI::Unit const *)arg1)->getScarabCount();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getSpiderMineCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getSpiderMineCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getSpiderMineCount" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (int)((BWAPI::Unit const *)arg1)->getSpiderMineCount();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getGroundWeaponCooldown(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getGroundWeaponCooldown",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getGroundWeaponCooldown" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (int)((BWAPI::Unit const *)arg1)->getGroundWeaponCooldown();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getAirWeaponCooldown(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getAirWeaponCooldown",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getAirWeaponCooldown" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (int)((BWAPI::Unit const *)arg1)->getAirWeaponCooldown();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getSpellCooldown(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getSpellCooldown",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getSpellCooldown" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (int)((BWAPI::Unit const *)arg1)->getSpellCooldown();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getDefenseMatrixPoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getDefenseMatrixPoints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getDefenseMatrixPoints" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (int)((BWAPI::Unit const *)arg1)->getDefenseMatrixPoints();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getDefenseMatrixTimer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getDefenseMatrixTimer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getDefenseMatrixTimer" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (int)((BWAPI::Unit const *)arg1)->getDefenseMatrixTimer();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getEnsnareTimer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getEnsnareTimer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getEnsnareTimer" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (int)((BWAPI::Unit const *)arg1)->getEnsnareTimer();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getIrradiateTimer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getIrradiateTimer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getIrradiateTimer" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (int)((BWAPI::Unit const *)arg1)->getIrradiateTimer();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getLockdownTimer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getLockdownTimer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getLockdownTimer" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (int)((BWAPI::Unit const *)arg1)->getLockdownTimer();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getMaelstromTimer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getMaelstromTimer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getMaelstromTimer" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (int)((BWAPI::Unit const *)arg1)->getMaelstromTimer();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getOrderTimer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getOrderTimer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getOrderTimer" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (int)((BWAPI::Unit const *)arg1)->getOrderTimer();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getPlagueTimer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getPlagueTimer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getPlagueTimer" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (int)((BWAPI::Unit const *)arg1)->getPlagueTimer();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getRemoveTimer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getRemoveTimer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getRemoveTimer" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (int)((BWAPI::Unit const *)arg1)->getRemoveTimer();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getStasisTimer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getStasisTimer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getStasisTimer" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (int)((BWAPI::Unit const *)arg1)->getStasisTimer();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getStimTimer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getStimTimer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getStimTimer" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (int)((BWAPI::Unit const *)arg1)->getStimTimer();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getBuildType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getBuildType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getBuildType" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = ((BWAPI::Unit const *)arg1)->getBuildType();
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitType(static_cast< const BWAPI::UnitType& >(result))), SWIGTYPE_p_BWAPI__UnitType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getTech(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::TechType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getTech",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getTech" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = ((BWAPI::Unit const *)arg1)->getTech();
  resultobj = SWIG_NewPointerObj((new BWAPI::TechType(static_cast< const BWAPI::TechType& >(result))), SWIGTYPE_p_BWAPI__TechType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getUpgrade(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UpgradeType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getUpgrade",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getUpgrade" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = ((BWAPI::Unit const *)arg1)->getUpgrade();
  resultobj = SWIG_NewPointerObj((new UpgradeType(static_cast< const UpgradeType& >(result))), SWIGTYPE_p_UpgradeType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getRemainingBuildTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getRemainingBuildTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getRemainingBuildTime" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (int)((BWAPI::Unit const *)arg1)->getRemainingBuildTime();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getRemainingTrainTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getRemainingTrainTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getRemainingTrainTime" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (int)((BWAPI::Unit const *)arg1)->getRemainingTrainTime();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getRemainingResearchTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getRemainingResearchTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getRemainingResearchTime" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (int)((BWAPI::Unit const *)arg1)->getRemainingResearchTime();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getRemainingUpgradeTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getRemainingUpgradeTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getRemainingUpgradeTime" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (int)((BWAPI::Unit const *)arg1)->getRemainingUpgradeTime();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getBuildUnit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Unit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getBuildUnit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getBuildUnit" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (BWAPI::Unit *)((BWAPI::Unit const *)arg1)->getBuildUnit();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getTarget(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Unit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getTarget",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getTarget" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (BWAPI::Unit *)((BWAPI::Unit const *)arg1)->getTarget();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getTargetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Position result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getTargetPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getTargetPosition" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = ((BWAPI::Unit const *)arg1)->getTargetPosition();
  resultobj = SWIG_NewPointerObj((new BWAPI::Position(static_cast< const BWAPI::Position& >(result))), SWIGTYPE_p_BWAPI__Position, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Order result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getOrder" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = ((BWAPI::Unit const *)arg1)->getOrder();
  resultobj = SWIG_NewPointerObj((new BWAPI::Order(static_cast< const BWAPI::Order& >(result))), SWIGTYPE_p_BWAPI__Order, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getOrderTarget(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Unit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getOrderTarget",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getOrderTarget" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (BWAPI::Unit *)((BWAPI::Unit const *)arg1)->getOrderTarget();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getSecondaryOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Order result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getSecondaryOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getSecondaryOrder" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = ((BWAPI::Unit const *)arg1)->getSecondaryOrder();
  resultobj = SWIG_NewPointerObj((new BWAPI::Order(static_cast< const BWAPI::Order& >(result))), SWIGTYPE_p_BWAPI__Order, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getRallyPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Position result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getRallyPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getRallyPosition" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = ((BWAPI::Unit const *)arg1)->getRallyPosition();
  resultobj = SWIG_NewPointerObj((new BWAPI::Position(static_cast< const BWAPI::Position& >(result))), SWIGTYPE_p_BWAPI__Position, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getRallyUnit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Unit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getRallyUnit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getRallyUnit" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (BWAPI::Unit *)((BWAPI::Unit const *)arg1)->getRallyUnit();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getAddon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Unit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getAddon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getAddon" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (BWAPI::Unit *)((BWAPI::Unit const *)arg1)->getAddon();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getNydusExit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Unit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getNydusExit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getNydusExit" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (BWAPI::Unit *)((BWAPI::Unit const *)arg1)->getNydusExit();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getPowerUp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Unit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getPowerUp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getPowerUp" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (BWAPI::Unit *)((BWAPI::Unit const *)arg1)->getPowerUp();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getTransport(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Unit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getTransport",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getTransport" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (BWAPI::Unit *)((BWAPI::Unit const *)arg1)->getTransport();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getCarrier(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Unit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getCarrier",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getCarrier" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (BWAPI::Unit *)((BWAPI::Unit const *)arg1)->getCarrier();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getInterceptors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::set< BWAPI::Unit * > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getInterceptors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getInterceptors" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = ((BWAPI::Unit const *)arg1)->getInterceptors();
  resultobj = SWIG_NewPointerObj((new std::set< BWAPI::Unit * >(static_cast< const std::set< BWAPI::Unit * >& >(result))), SWIGTYPE_p_std__setT_BWAPI__Unit_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getHatchery(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Unit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getHatchery",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getHatchery" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (BWAPI::Unit *)((BWAPI::Unit const *)arg1)->getHatchery();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getLarva(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::set< BWAPI::Unit * > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getLarva",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getLarva" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = ((BWAPI::Unit const *)arg1)->getLarva();
  resultobj = SWIG_NewPointerObj((new std::set< BWAPI::Unit * >(static_cast< const std::set< BWAPI::Unit * >& >(result))), SWIGTYPE_p_std__setT_BWAPI__Unit_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_exists(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_exists",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_exists" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->exists();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_hasNuke(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_hasNuke",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_hasNuke" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->hasNuke();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isAccelerating(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isAccelerating",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isAccelerating" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isAccelerating();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isAttacking(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isAttacking",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isAttacking" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isAttacking();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isBeingConstructed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isBeingConstructed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isBeingConstructed" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isBeingConstructed();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isBeingGathered(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isBeingGathered",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isBeingGathered" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isBeingGathered();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isBeingHealed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isBeingHealed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isBeingHealed" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isBeingHealed();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isBlind(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isBlind",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isBlind" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isBlind();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isBraking(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isBraking",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isBraking" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isBraking();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isBurrowed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isBurrowed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isBurrowed" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isBurrowed();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isCarryingGas(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isCarryingGas",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isCarryingGas" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isCarryingGas();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isCarryingMinerals(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isCarryingMinerals",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isCarryingMinerals" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isCarryingMinerals();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isCloaked(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isCloaked",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isCloaked" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isCloaked();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isCompleted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isCompleted",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isCompleted" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isCompleted();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isConstructing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isConstructing",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isConstructing" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isConstructing();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isDefenseMatrixed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isDefenseMatrixed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isDefenseMatrixed" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isDefenseMatrixed();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isDetected(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isDetected",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isDetected" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isDetected();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isEnsnared(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isEnsnared",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isEnsnared" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isEnsnared();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isFollowing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isFollowing",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isFollowing" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isFollowing();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isGatheringGas(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isGatheringGas",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isGatheringGas" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isGatheringGas();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isGatheringMinerals(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isGatheringMinerals",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isGatheringMinerals" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isGatheringMinerals();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isHallucination(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isHallucination",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isHallucination" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isHallucination();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isHoldingPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isHoldingPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isHoldingPosition" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isHoldingPosition();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isIdle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isIdle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isIdle" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isIdle();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isInterruptible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isInterruptible",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isInterruptible" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isInterruptible();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isIrradiated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isIrradiated",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isIrradiated" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isIrradiated();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isLifted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isLifted",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isLifted" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isLifted();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isLoaded(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isLoaded",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isLoaded" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isLoaded();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isLockedDown(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isLockedDown",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isLockedDown" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isLockedDown();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isMaelstrommed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isMaelstrommed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isMaelstrommed" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isMaelstrommed();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isMorphing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isMorphing",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isMorphing" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isMorphing();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isMoving(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isMoving",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isMoving" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isMoving();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isParasited(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isParasited",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isParasited" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isParasited();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isPatrolling(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isPatrolling",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isPatrolling" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isPatrolling();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isPlagued(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isPlagued",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isPlagued" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isPlagued();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isRepairing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isRepairing",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isRepairing" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isRepairing();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isResearching(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isResearching",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isResearching" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isResearching();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isSelected(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isSelected",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isSelected" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isSelected();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isSieged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isSieged",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isSieged" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isSieged();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isStartingAttack(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isStartingAttack",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isStartingAttack" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isStartingAttack();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isStasised(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isStasised",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isStasised" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isStasised();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isStimmed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isStimmed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isStimmed" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isStimmed();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isStuck(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isStuck",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isStuck" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isStuck();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isTraining(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isTraining",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isTraining" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isTraining();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isUnderStorm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isUnderStorm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isUnderStorm" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isUnderStorm();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isUnpowered(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isUnpowered",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isUnpowered" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isUnpowered();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isUpgrading(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isUpgrading",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isUpgrading" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isUpgrading();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isVisible__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_isVisible",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isVisible" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)((BWAPI::Unit const *)arg1)->isVisible();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isVisible__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unit_isVisible",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_isVisible" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Player, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unit_isVisible" "', argument " "2"" of type '" "BWAPI::Player *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Player * >(argp2);
  result = (bool)((BWAPI::Unit const *)arg1)->isVisible(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_isVisible(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Unit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Unit_isVisible__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Unit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BWAPI__Player, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Unit_isVisible__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Unit_isVisible'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    isVisible(BWAPI::Unit const *)\n"
    "    isVisible(BWAPI::Unit const *,BWAPI::Player *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_canIssueCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  UnitCommand arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unit_canIssueCommand",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_canIssueCommand" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_UnitCommand,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unit_canIssueCommand" "', argument " "2"" of type '" "UnitCommand""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unit_canIssueCommand" "', argument " "2"" of type '" "UnitCommand""'");
    } else {
      UnitCommand * temp = reinterpret_cast< UnitCommand * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)((BWAPI::Unit const *)arg1)->canIssueCommand(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_issueCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  UnitCommand arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unit_issueCommand",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_issueCommand" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_UnitCommand,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unit_issueCommand" "', argument " "2"" of type '" "UnitCommand""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unit_issueCommand" "', argument " "2"" of type '" "UnitCommand""'");
    } else {
      UnitCommand * temp = reinterpret_cast< UnitCommand * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->issueCommand(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_attackMove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unit_attackMove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_attackMove" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Position,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unit_attackMove" "', argument " "2"" of type '" "BWAPI::Position""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unit_attackMove" "', argument " "2"" of type '" "BWAPI::Position""'");
    } else {
      BWAPI::Position * temp = reinterpret_cast< BWAPI::Position * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->attackMove(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_attackUnit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unit_attackUnit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_attackUnit" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unit_attackUnit" "', argument " "2"" of type '" "BWAPI::Unit *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Unit * >(argp2);
  result = (bool)(arg1)->attackUnit(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_build(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::UnitType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Unit_build",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_build" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__TilePosition,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unit_build" "', argument " "2"" of type '" "BWAPI::TilePosition""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unit_build" "', argument " "2"" of type '" "BWAPI::TilePosition""'");
    } else {
      BWAPI::TilePosition * temp = reinterpret_cast< BWAPI::TilePosition * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BWAPI__UnitType,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Unit_build" "', argument " "3"" of type '" "BWAPI::UnitType""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unit_build" "', argument " "3"" of type '" "BWAPI::UnitType""'");
    } else {
      BWAPI::UnitType * temp = reinterpret_cast< BWAPI::UnitType * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (bool)(arg1)->build(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_buildAddon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unit_buildAddon",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_buildAddon" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__UnitType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unit_buildAddon" "', argument " "2"" of type '" "BWAPI::UnitType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unit_buildAddon" "', argument " "2"" of type '" "BWAPI::UnitType""'");
    } else {
      BWAPI::UnitType * temp = reinterpret_cast< BWAPI::UnitType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->buildAddon(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_train(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unit_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_train" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__UnitType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unit_train" "', argument " "2"" of type '" "BWAPI::UnitType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unit_train" "', argument " "2"" of type '" "BWAPI::UnitType""'");
    } else {
      BWAPI::UnitType * temp = reinterpret_cast< BWAPI::UnitType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_morph(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unit_morph",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_morph" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__UnitType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unit_morph" "', argument " "2"" of type '" "BWAPI::UnitType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unit_morph" "', argument " "2"" of type '" "BWAPI::UnitType""'");
    } else {
      BWAPI::UnitType * temp = reinterpret_cast< BWAPI::UnitType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->morph(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_research(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TechType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unit_research",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_research" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__TechType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unit_research" "', argument " "2"" of type '" "BWAPI::TechType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unit_research" "', argument " "2"" of type '" "BWAPI::TechType""'");
    } else {
      BWAPI::TechType * temp = reinterpret_cast< BWAPI::TechType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->research(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_upgrade(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  UpgradeType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unit_upgrade",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_upgrade" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_UpgradeType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unit_upgrade" "', argument " "2"" of type '" "UpgradeType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unit_upgrade" "', argument " "2"" of type '" "UpgradeType""'");
    } else {
      UpgradeType * temp = reinterpret_cast< UpgradeType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->upgrade(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_setRallyPoint__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unit_setRallyPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_setRallyPoint" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Position,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unit_setRallyPoint" "', argument " "2"" of type '" "BWAPI::Position""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unit_setRallyPoint" "', argument " "2"" of type '" "BWAPI::Position""'");
    } else {
      BWAPI::Position * temp = reinterpret_cast< BWAPI::Position * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->setRallyPoint(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_setRallyPoint__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unit_setRallyPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_setRallyPoint" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unit_setRallyPoint" "', argument " "2"" of type '" "BWAPI::Unit *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Unit * >(argp2);
  result = (bool)(arg1)->setRallyPoint(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_setRallyPoint(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Unit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BWAPI__Position, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Unit_setRallyPoint__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Unit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BWAPI__Unit, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Unit_setRallyPoint__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Unit_setRallyPoint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setRallyPoint(BWAPI::Unit *,BWAPI::Position)\n"
    "    setRallyPoint(BWAPI::Unit *,BWAPI::Unit *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_move(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unit_move",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_move" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Position,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unit_move" "', argument " "2"" of type '" "BWAPI::Position""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unit_move" "', argument " "2"" of type '" "BWAPI::Position""'");
    } else {
      BWAPI::Position * temp = reinterpret_cast< BWAPI::Position * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->move(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_patrol(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unit_patrol",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_patrol" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Position,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unit_patrol" "', argument " "2"" of type '" "BWAPI::Position""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unit_patrol" "', argument " "2"" of type '" "BWAPI::Position""'");
    } else {
      BWAPI::Position * temp = reinterpret_cast< BWAPI::Position * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->patrol(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_holdPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_holdPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_holdPosition" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)(arg1)->holdPosition();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_stop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_stop" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)(arg1)->stop();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_follow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unit_follow",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_follow" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unit_follow" "', argument " "2"" of type '" "BWAPI::Unit *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Unit * >(argp2);
  result = (bool)(arg1)->follow(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_gather(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unit_gather",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_gather" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unit_gather" "', argument " "2"" of type '" "BWAPI::Unit *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Unit * >(argp2);
  result = (bool)(arg1)->gather(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_returnCargo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_returnCargo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_returnCargo" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)(arg1)->returnCargo();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_repair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unit_repair",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_repair" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unit_repair" "', argument " "2"" of type '" "BWAPI::Unit *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Unit * >(argp2);
  result = (bool)(arg1)->repair(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_burrow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_burrow",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_burrow" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)(arg1)->burrow();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_unburrow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_unburrow",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_unburrow" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)(arg1)->unburrow();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_cloak(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_cloak",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_cloak" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)(arg1)->cloak();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_decloak(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_decloak",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_decloak" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)(arg1)->decloak();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_siege(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_siege",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_siege" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)(arg1)->siege();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_unsiege(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_unsiege",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_unsiege" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)(arg1)->unsiege();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_lift(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_lift",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_lift" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)(arg1)->lift();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_land(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TilePosition arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unit_land",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_land" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__TilePosition,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unit_land" "', argument " "2"" of type '" "BWAPI::TilePosition""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unit_land" "', argument " "2"" of type '" "BWAPI::TilePosition""'");
    } else {
      BWAPI::TilePosition * temp = reinterpret_cast< BWAPI::TilePosition * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->land(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_load(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unit_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_load" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unit_load" "', argument " "2"" of type '" "BWAPI::Unit *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Unit * >(argp2);
  result = (bool)(arg1)->load(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_unload(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unit_unload",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_unload" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unit_unload" "', argument " "2"" of type '" "BWAPI::Unit *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Unit * >(argp2);
  result = (bool)(arg1)->unload(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_unloadAll__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_unloadAll",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_unloadAll" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)(arg1)->unloadAll();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_unloadAll__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unit_unloadAll",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_unloadAll" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Position,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unit_unloadAll" "', argument " "2"" of type '" "BWAPI::Position""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unit_unloadAll" "', argument " "2"" of type '" "BWAPI::Position""'");
    } else {
      BWAPI::Position * temp = reinterpret_cast< BWAPI::Position * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->unloadAll(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_unloadAll(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Unit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Unit_unloadAll__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Unit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BWAPI__Position, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Unit_unloadAll__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Unit_unloadAll'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    unloadAll(BWAPI::Unit *)\n"
    "    unloadAll(BWAPI::Unit *,BWAPI::Position)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_rightClick__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unit_rightClick",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_rightClick" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Position,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unit_rightClick" "', argument " "2"" of type '" "BWAPI::Position""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unit_rightClick" "', argument " "2"" of type '" "BWAPI::Position""'");
    } else {
      BWAPI::Position * temp = reinterpret_cast< BWAPI::Position * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->rightClick(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_rightClick__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unit_rightClick",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_rightClick" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unit_rightClick" "', argument " "2"" of type '" "BWAPI::Unit *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Unit * >(argp2);
  result = (bool)(arg1)->rightClick(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_rightClick(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Unit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BWAPI__Position, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Unit_rightClick__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Unit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BWAPI__Unit, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Unit_rightClick__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Unit_rightClick'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    rightClick(BWAPI::Unit *,BWAPI::Position)\n"
    "    rightClick(BWAPI::Unit *,BWAPI::Unit *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_haltConstruction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_haltConstruction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_haltConstruction" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)(arg1)->haltConstruction();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_cancelConstruction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_cancelConstruction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_cancelConstruction" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)(arg1)->cancelConstruction();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_cancelAddon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_cancelAddon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_cancelAddon" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)(arg1)->cancelAddon();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_cancelTrain__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unit_cancelTrain",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_cancelTrain" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Unit_cancelTrain" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)(arg1)->cancelTrain(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_cancelTrain__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_cancelTrain",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_cancelTrain" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)(arg1)->cancelTrain();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_cancelTrain(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Unit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Unit_cancelTrain__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Unit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Unit_cancelTrain__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Unit_cancelTrain'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cancelTrain(BWAPI::Unit *,int)\n"
    "    cancelTrain(BWAPI::Unit *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_cancelMorph(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_cancelMorph",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_cancelMorph" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)(arg1)->cancelMorph();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_cancelResearch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_cancelResearch",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_cancelResearch" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)(arg1)->cancelResearch();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_cancelUpgrade(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_cancelUpgrade",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_cancelUpgrade" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (bool)(arg1)->cancelUpgrade();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_useTech__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TechType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unit_useTech",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_useTech" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__TechType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unit_useTech" "', argument " "2"" of type '" "BWAPI::TechType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unit_useTech" "', argument " "2"" of type '" "BWAPI::TechType""'");
    } else {
      BWAPI::TechType * temp = reinterpret_cast< BWAPI::TechType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->useTech(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_useTech__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TechType arg2 ;
  BWAPI::Position arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Unit_useTech",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_useTech" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__TechType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unit_useTech" "', argument " "2"" of type '" "BWAPI::TechType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unit_useTech" "', argument " "2"" of type '" "BWAPI::TechType""'");
    } else {
      BWAPI::TechType * temp = reinterpret_cast< BWAPI::TechType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BWAPI__Position,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Unit_useTech" "', argument " "3"" of type '" "BWAPI::Position""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unit_useTech" "', argument " "3"" of type '" "BWAPI::Position""'");
    } else {
      BWAPI::Position * temp = reinterpret_cast< BWAPI::Position * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (bool)(arg1)->useTech(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_useTech__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TechType arg2 ;
  BWAPI::Unit *arg3 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Unit_useTech",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_useTech" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__TechType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unit_useTech" "', argument " "2"" of type '" "BWAPI::TechType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unit_useTech" "', argument " "2"" of type '" "BWAPI::TechType""'");
    } else {
      BWAPI::TechType * temp = reinterpret_cast< BWAPI::TechType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Unit_useTech" "', argument " "3"" of type '" "BWAPI::Unit *""'"); 
  }
  arg3 = reinterpret_cast< BWAPI::Unit * >(argp3);
  result = (bool)(arg1)->useTech(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_useTech(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Unit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BWAPI__TechType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Unit_useTech__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Unit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BWAPI__TechType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BWAPI__Position, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Unit_useTech__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Unit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BWAPI__TechType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_BWAPI__Unit, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Unit_useTech__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Unit_useTech'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    useTech(BWAPI::Unit *,BWAPI::TechType)\n"
    "    useTech(BWAPI::Unit *,BWAPI::TechType,BWAPI::Position)\n"
    "    useTech(BWAPI::Unit *,BWAPI::TechType,BWAPI::Unit *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_setClientInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unit_setClientInfo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_setClientInfo" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unit_setClientInfo" "', argument " "2"" of type '" "void *""'"); 
  }
  (arg1)->setClientInfo(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getClientInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  void *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getClientInfo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getClientInfo" "', argument " "1"" of type '" "BWAPI::Unit const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (void *)((BWAPI::Unit const *)arg1)->getClientInfo();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getLoadedUnits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SetWrapper< BWAPI::Unit * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getLoadedUnits",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getLoadedUnits" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (SetWrapper< BWAPI::Unit * > *)BWAPI_Unit_getLoadedUnits(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetWrapperT_BWAPI__Unit_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unit_getTrainingQueue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ListWrapper_PtrNext< BWAPI::UnitType > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unit_getTrainingQueue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unit_getTrainingQueue" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = (ListWrapper_PtrNext< BWAPI::UnitType > *)BWAPI_Unit_getTrainingQueue(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ListWrapper_PtrNextT_BWAPI__UnitType_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Unit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Unit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Unit" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Unit_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BWAPI__Unit, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_UnitCommand__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitCommand *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_UnitCommand")) SWIG_fail;
  result = (BWAPI::UnitCommand *)new BWAPI::UnitCommand();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UnitCommand__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  UnitCommandType arg2 ;
  BWAPI::Unit *arg3 = (BWAPI::Unit *) 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  BWAPI::UnitCommand *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_UnitCommand",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UnitCommand" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_UnitCommandType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_UnitCommand" "', argument " "2"" of type '" "UnitCommandType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UnitCommand" "', argument " "2"" of type '" "UnitCommandType""'");
    } else {
      UnitCommandType * temp = reinterpret_cast< UnitCommandType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_UnitCommand" "', argument " "3"" of type '" "BWAPI::Unit *""'"); 
  }
  arg3 = reinterpret_cast< BWAPI::Unit * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_UnitCommand" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_UnitCommand" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_UnitCommand" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  result = (BWAPI::UnitCommand *)new BWAPI::UnitCommand(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UnitCommand(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 6); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_UnitCommand__SWIG_0(self, args);
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Unit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_UnitCommandType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_BWAPI__Unit, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_UnitCommand__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_UnitCommand'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BWAPI::UnitCommand()\n"
    "    BWAPI::UnitCommand(BWAPI::Unit *,UnitCommandType,BWAPI::Unit *,int,int,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_attackMove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitCommand_attackMove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_attackMove" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Position,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitCommand_attackMove" "', argument " "2"" of type '" "BWAPI::Position""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitCommand_attackMove" "', argument " "2"" of type '" "BWAPI::Position""'");
    } else {
      BWAPI::Position * temp = reinterpret_cast< BWAPI::Position * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = BWAPI::UnitCommand::attackMove(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_attackUnit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitCommand_attackUnit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_attackUnit" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitCommand_attackUnit" "', argument " "2"" of type '" "BWAPI::Unit *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Unit * >(argp2);
  result = BWAPI::UnitCommand::attackUnit(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_build(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::UnitType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UnitCommand_build",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_build" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__TilePosition,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitCommand_build" "', argument " "2"" of type '" "BWAPI::TilePosition""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitCommand_build" "', argument " "2"" of type '" "BWAPI::TilePosition""'");
    } else {
      BWAPI::TilePosition * temp = reinterpret_cast< BWAPI::TilePosition * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BWAPI__UnitType,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "UnitCommand_build" "', argument " "3"" of type '" "BWAPI::UnitType""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitCommand_build" "', argument " "3"" of type '" "BWAPI::UnitType""'");
    } else {
      BWAPI::UnitType * temp = reinterpret_cast< BWAPI::UnitType * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = BWAPI::UnitCommand::build(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_buildAddon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitCommand_buildAddon",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_buildAddon" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__UnitType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitCommand_buildAddon" "', argument " "2"" of type '" "BWAPI::UnitType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitCommand_buildAddon" "', argument " "2"" of type '" "BWAPI::UnitType""'");
    } else {
      BWAPI::UnitType * temp = reinterpret_cast< BWAPI::UnitType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = BWAPI::UnitCommand::buildAddon(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_train(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitCommand_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_train" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__UnitType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitCommand_train" "', argument " "2"" of type '" "BWAPI::UnitType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitCommand_train" "', argument " "2"" of type '" "BWAPI::UnitType""'");
    } else {
      BWAPI::UnitType * temp = reinterpret_cast< BWAPI::UnitType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = BWAPI::UnitCommand::train(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_morph(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitCommand_morph",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_morph" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__UnitType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitCommand_morph" "', argument " "2"" of type '" "BWAPI::UnitType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitCommand_morph" "', argument " "2"" of type '" "BWAPI::UnitType""'");
    } else {
      BWAPI::UnitType * temp = reinterpret_cast< BWAPI::UnitType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = BWAPI::UnitCommand::morph(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_research(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TechType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitCommand_research",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_research" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__TechType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitCommand_research" "', argument " "2"" of type '" "BWAPI::TechType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitCommand_research" "', argument " "2"" of type '" "BWAPI::TechType""'");
    } else {
      BWAPI::TechType * temp = reinterpret_cast< BWAPI::TechType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = BWAPI::UnitCommand::research(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_upgrade(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  UpgradeType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitCommand_upgrade",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_upgrade" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_UpgradeType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitCommand_upgrade" "', argument " "2"" of type '" "UpgradeType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitCommand_upgrade" "', argument " "2"" of type '" "UpgradeType""'");
    } else {
      UpgradeType * temp = reinterpret_cast< UpgradeType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = BWAPI::UnitCommand::upgrade(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_setRallyPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitCommand_setRallyPosition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_setRallyPosition" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Position,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitCommand_setRallyPosition" "', argument " "2"" of type '" "BWAPI::Position""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitCommand_setRallyPosition" "', argument " "2"" of type '" "BWAPI::Position""'");
    } else {
      BWAPI::Position * temp = reinterpret_cast< BWAPI::Position * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = BWAPI::UnitCommand::setRallyPosition(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_setRallyUnit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitCommand_setRallyUnit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_setRallyUnit" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitCommand_setRallyUnit" "', argument " "2"" of type '" "BWAPI::Unit *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Unit * >(argp2);
  result = BWAPI::UnitCommand::setRallyUnit(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_move(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitCommand_move",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_move" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Position,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitCommand_move" "', argument " "2"" of type '" "BWAPI::Position""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitCommand_move" "', argument " "2"" of type '" "BWAPI::Position""'");
    } else {
      BWAPI::Position * temp = reinterpret_cast< BWAPI::Position * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = BWAPI::UnitCommand::move(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_patrol(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitCommand_patrol",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_patrol" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Position,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitCommand_patrol" "', argument " "2"" of type '" "BWAPI::Position""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitCommand_patrol" "', argument " "2"" of type '" "BWAPI::Position""'");
    } else {
      BWAPI::Position * temp = reinterpret_cast< BWAPI::Position * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = BWAPI::UnitCommand::patrol(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_holdPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitCommand_holdPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_holdPosition" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = BWAPI::UnitCommand::holdPosition(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitCommand_stop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_stop" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = BWAPI::UnitCommand::stop(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_follow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitCommand_follow",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_follow" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitCommand_follow" "', argument " "2"" of type '" "BWAPI::Unit *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Unit * >(argp2);
  result = BWAPI::UnitCommand::follow(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_gather(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitCommand_gather",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_gather" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitCommand_gather" "', argument " "2"" of type '" "BWAPI::Unit *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Unit * >(argp2);
  result = BWAPI::UnitCommand::gather(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_returnCargo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitCommand_returnCargo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_returnCargo" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = BWAPI::UnitCommand::returnCargo(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_repair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitCommand_repair",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_repair" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitCommand_repair" "', argument " "2"" of type '" "BWAPI::Unit *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Unit * >(argp2);
  result = BWAPI::UnitCommand::repair(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_burrow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitCommand_burrow",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_burrow" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = BWAPI::UnitCommand::burrow(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_unburrow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitCommand_unburrow",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_unburrow" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = BWAPI::UnitCommand::unburrow(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_cloak(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitCommand_cloak",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_cloak" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = BWAPI::UnitCommand::cloak(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_decloak(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitCommand_decloak",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_decloak" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = BWAPI::UnitCommand::decloak(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_siege(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitCommand_siege",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_siege" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = BWAPI::UnitCommand::siege(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_unsiege(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitCommand_unsiege",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_unsiege" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = BWAPI::UnitCommand::unsiege(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_lift(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitCommand_lift",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_lift" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = BWAPI::UnitCommand::lift(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_land(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TilePosition arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitCommand_land",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_land" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__TilePosition,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitCommand_land" "', argument " "2"" of type '" "BWAPI::TilePosition""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitCommand_land" "', argument " "2"" of type '" "BWAPI::TilePosition""'");
    } else {
      BWAPI::TilePosition * temp = reinterpret_cast< BWAPI::TilePosition * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = BWAPI::UnitCommand::land(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_load(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitCommand_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_load" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitCommand_load" "', argument " "2"" of type '" "BWAPI::Unit *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Unit * >(argp2);
  result = BWAPI::UnitCommand::load(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_unload(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitCommand_unload",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_unload" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitCommand_unload" "', argument " "2"" of type '" "BWAPI::Unit *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Unit * >(argp2);
  result = BWAPI::UnitCommand::unload(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_unloadAll__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitCommand_unloadAll",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_unloadAll" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = BWAPI::UnitCommand::unloadAll(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_unloadAll__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitCommand_unloadAll",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_unloadAll" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Position,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitCommand_unloadAll" "', argument " "2"" of type '" "BWAPI::Position""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitCommand_unloadAll" "', argument " "2"" of type '" "BWAPI::Position""'");
    } else {
      BWAPI::Position * temp = reinterpret_cast< BWAPI::Position * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = BWAPI::UnitCommand::unloadAll(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_unloadAll(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Unit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_UnitCommand_unloadAll__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Unit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BWAPI__Position, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_UnitCommand_unloadAll__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UnitCommand_unloadAll'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    unloadAll(BWAPI::Unit *)\n"
    "    BWAPI::UnitCommand::unloadAll(BWAPI::Unit *,BWAPI::Position)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_rightClick__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitCommand_rightClick",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_rightClick" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__Position,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitCommand_rightClick" "', argument " "2"" of type '" "BWAPI::Position""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitCommand_rightClick" "', argument " "2"" of type '" "BWAPI::Position""'");
    } else {
      BWAPI::Position * temp = reinterpret_cast< BWAPI::Position * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = BWAPI::UnitCommand::rightClick(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_rightClick__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitCommand_rightClick",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_rightClick" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitCommand_rightClick" "', argument " "2"" of type '" "BWAPI::Unit *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Unit * >(argp2);
  result = BWAPI::UnitCommand::rightClick(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_rightClick(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Unit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BWAPI__Position, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_UnitCommand_rightClick__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Unit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BWAPI__Unit, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_UnitCommand_rightClick__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UnitCommand_rightClick'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    rightClick(BWAPI::Unit *,BWAPI::Position)\n"
    "    BWAPI::UnitCommand::rightClick(BWAPI::Unit *,BWAPI::Unit *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_haltConstruction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitCommand_haltConstruction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_haltConstruction" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = BWAPI::UnitCommand::haltConstruction(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_cancelConstruction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitCommand_cancelConstruction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_cancelConstruction" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = BWAPI::UnitCommand::cancelConstruction(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_cancelAddon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitCommand_cancelAddon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_cancelAddon" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = BWAPI::UnitCommand::cancelAddon(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_cancelTrain__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitCommand_cancelTrain",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_cancelTrain" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UnitCommand_cancelTrain" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = BWAPI::UnitCommand::cancelTrain(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_cancelTrain__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitCommand_cancelTrain",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_cancelTrain" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = BWAPI::UnitCommand::cancelTrain(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_cancelTrain(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Unit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_UnitCommand_cancelTrain__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Unit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_UnitCommand_cancelTrain__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UnitCommand_cancelTrain'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    cancelTrain(BWAPI::Unit *,int)\n"
    "    BWAPI::UnitCommand::cancelTrain(BWAPI::Unit *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_cancelMorph(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitCommand_cancelMorph",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_cancelMorph" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = BWAPI::UnitCommand::cancelMorph(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_cancelResearch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitCommand_cancelResearch",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_cancelResearch" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = BWAPI::UnitCommand::cancelResearch(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_cancelUpgrade(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitCommand_cancelUpgrade",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_cancelUpgrade" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  result = BWAPI::UnitCommand::cancelUpgrade(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_useTech__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TechType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitCommand_useTech",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_useTech" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__TechType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitCommand_useTech" "', argument " "2"" of type '" "BWAPI::TechType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitCommand_useTech" "', argument " "2"" of type '" "BWAPI::TechType""'");
    } else {
      BWAPI::TechType * temp = reinterpret_cast< BWAPI::TechType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = BWAPI::UnitCommand::useTech(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_useTech__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TechType arg2 ;
  BWAPI::Position arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UnitCommand_useTech",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_useTech" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__TechType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitCommand_useTech" "', argument " "2"" of type '" "BWAPI::TechType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitCommand_useTech" "', argument " "2"" of type '" "BWAPI::TechType""'");
    } else {
      BWAPI::TechType * temp = reinterpret_cast< BWAPI::TechType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BWAPI__Position,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "UnitCommand_useTech" "', argument " "3"" of type '" "BWAPI::Position""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitCommand_useTech" "', argument " "3"" of type '" "BWAPI::Position""'");
    } else {
      BWAPI::Position * temp = reinterpret_cast< BWAPI::Position * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = BWAPI::UnitCommand::useTech(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_useTech__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TechType arg2 ;
  BWAPI::Unit *arg3 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BWAPI::UnitCommand result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UnitCommand_useTech",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_useTech" "', argument " "1"" of type '" "BWAPI::Unit *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::Unit * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__TechType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitCommand_useTech" "', argument " "2"" of type '" "BWAPI::TechType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitCommand_useTech" "', argument " "2"" of type '" "BWAPI::TechType""'");
    } else {
      BWAPI::TechType * temp = reinterpret_cast< BWAPI::TechType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "UnitCommand_useTech" "', argument " "3"" of type '" "BWAPI::Unit *""'"); 
  }
  arg3 = reinterpret_cast< BWAPI::Unit * >(argp3);
  result = BWAPI::UnitCommand::useTech(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommand(static_cast< const BWAPI::UnitCommand& >(result))), SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_useTech(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Unit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BWAPI__TechType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_UnitCommand_useTech__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Unit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BWAPI__TechType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BWAPI__Position, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_UnitCommand_useTech__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BWAPI__Unit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BWAPI__TechType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_BWAPI__Unit, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_UnitCommand_useTech__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UnitCommand_useTech'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    useTech(BWAPI::Unit *,BWAPI::TechType)\n"
    "    useTech(BWAPI::Unit *,BWAPI::TechType,BWAPI::Position)\n"
    "    BWAPI::UnitCommand::useTech(BWAPI::Unit *,BWAPI::TechType,BWAPI::Unit *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_unit_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitCommand_unit_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitCommand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_unit_set" "', argument " "1"" of type '" "BWAPI::UnitCommand *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitCommand * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Unit, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitCommand_unit_set" "', argument " "2"" of type '" "BWAPI::Unit *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Unit * >(argp2);
  if (arg1) (arg1)->unit = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_unit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Unit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitCommand_unit_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitCommand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_unit_get" "', argument " "1"" of type '" "BWAPI::UnitCommand *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitCommand * >(argp1);
  result = (BWAPI::Unit *) ((arg1)->unit);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_type_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  UnitCommandType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitCommand_type_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitCommand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_type_set" "', argument " "1"" of type '" "BWAPI::UnitCommand *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitCommand * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_UnitCommandType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitCommand_type_set" "', argument " "2"" of type '" "UnitCommandType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitCommand_type_set" "', argument " "2"" of type '" "UnitCommandType""'");
    } else {
      UnitCommandType * temp = reinterpret_cast< UnitCommandType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->type = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_type_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UnitCommandType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitCommand_type_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitCommand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_type_get" "', argument " "1"" of type '" "BWAPI::UnitCommand *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitCommand * >(argp1);
  result =  ((arg1)->type);
  resultobj = SWIG_NewPointerObj((new UnitCommandType(static_cast< const UnitCommandType& >(result))), SWIGTYPE_p_UnitCommandType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_target_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitCommand_target_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitCommand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_target_set" "', argument " "1"" of type '" "BWAPI::UnitCommand *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitCommand * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BWAPI__Unit, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitCommand_target_set" "', argument " "2"" of type '" "BWAPI::Unit *""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::Unit * >(argp2);
  if (arg1) (arg1)->target = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_target_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Unit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitCommand_target_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitCommand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_target_get" "', argument " "1"" of type '" "BWAPI::UnitCommand *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitCommand * >(argp1);
  result = (BWAPI::Unit *) ((arg1)->target);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__Unit, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitCommand_x_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitCommand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_x_set" "', argument " "1"" of type '" "BWAPI::UnitCommand *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitCommand * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UnitCommand_x_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->x = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitCommand_x_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitCommand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_x_get" "', argument " "1"" of type '" "BWAPI::UnitCommand *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitCommand * >(argp1);
  result = (int) ((arg1)->x);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitCommand_y_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitCommand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_y_set" "', argument " "1"" of type '" "BWAPI::UnitCommand *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitCommand * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UnitCommand_y_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->y = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitCommand_y_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitCommand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_y_get" "', argument " "1"" of type '" "BWAPI::UnitCommand *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitCommand * >(argp1);
  result = (int) ((arg1)->y);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_extra_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitCommand_extra_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitCommand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_extra_set" "', argument " "1"" of type '" "BWAPI::UnitCommand *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitCommand * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UnitCommand_extra_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->extra = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommand_extra_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitCommand_extra_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitCommand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommand_extra_get" "', argument " "1"" of type '" "BWAPI::UnitCommand *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitCommand * >(argp1);
  result = (int) ((arg1)->extra);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UnitCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_UnitCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitCommand, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UnitCommand" "', argument " "1"" of type '" "BWAPI::UnitCommand *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitCommand * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UnitCommand_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BWAPI__UnitCommand, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_UnitCommandType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitCommandType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_UnitCommandType")) SWIG_fail;
  result = (BWAPI::UnitCommandType *)new BWAPI::UnitCommandType();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__UnitCommandType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UnitCommandType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitCommandType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UnitCommandType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UnitCommandType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (BWAPI::UnitCommandType *)new BWAPI::UnitCommandType(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__UnitCommandType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UnitCommandType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitCommandType *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitCommandType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UnitCommandType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BWAPI__UnitCommandType,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UnitCommandType" "', argument " "1"" of type '" "BWAPI::UnitCommandType const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UnitCommandType" "', argument " "1"" of type '" "BWAPI::UnitCommandType const &""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitCommandType * >(argp1);
  result = (BWAPI::UnitCommandType *)new BWAPI::UnitCommandType((BWAPI::UnitCommandType const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__UnitCommandType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UnitCommandType(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_UnitCommandType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BWAPI__UnitCommandType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_UnitCommandType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_UnitCommandType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_UnitCommandType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BWAPI::UnitCommandType()\n"
    "    BWAPI::UnitCommandType(int)\n"
    "    BWAPI::UnitCommandType(BWAPI::UnitCommandType const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommandType___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitCommandType *arg1 = (BWAPI::UnitCommandType *) 0 ;
  BWAPI::UnitCommandType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitCommandType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitCommandType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommandType___eq__" "', argument " "1"" of type '" "BWAPI::UnitCommandType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitCommandType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__UnitCommandType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitCommandType___eq__" "', argument " "2"" of type '" "BWAPI::UnitCommandType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitCommandType___eq__" "', argument " "2"" of type '" "BWAPI::UnitCommandType const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::UnitCommandType * >(argp2);
  result = (bool)((BWAPI::UnitCommandType const *)arg1)->operator ==((BWAPI::UnitCommandType const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommandType___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitCommandType *arg1 = (BWAPI::UnitCommandType *) 0 ;
  BWAPI::UnitCommandType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitCommandType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitCommandType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommandType___ne__" "', argument " "1"" of type '" "BWAPI::UnitCommandType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitCommandType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__UnitCommandType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitCommandType___ne__" "', argument " "2"" of type '" "BWAPI::UnitCommandType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitCommandType___ne__" "', argument " "2"" of type '" "BWAPI::UnitCommandType const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::UnitCommandType * >(argp2);
  result = (bool)((BWAPI::UnitCommandType const *)arg1)->operator !=((BWAPI::UnitCommandType const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommandType___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitCommandType *arg1 = (BWAPI::UnitCommandType *) 0 ;
  BWAPI::UnitCommandType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitCommandType___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitCommandType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommandType___lt__" "', argument " "1"" of type '" "BWAPI::UnitCommandType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitCommandType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__UnitCommandType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitCommandType___lt__" "', argument " "2"" of type '" "BWAPI::UnitCommandType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitCommandType___lt__" "', argument " "2"" of type '" "BWAPI::UnitCommandType const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::UnitCommandType * >(argp2);
  result = (bool)((BWAPI::UnitCommandType const *)arg1)->operator <((BWAPI::UnitCommandType const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommandType_getID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitCommandType *arg1 = (BWAPI::UnitCommandType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitCommandType_getID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitCommandType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommandType_getID" "', argument " "1"" of type '" "BWAPI::UnitCommandType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitCommandType * >(argp1);
  result = (int)((BWAPI::UnitCommandType const *)arg1)->getID();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitCommandType_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitCommandType *arg1 = (BWAPI::UnitCommandType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitCommandType_getName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitCommandType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitCommandType_getName" "', argument " "1"" of type '" "BWAPI::UnitCommandType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitCommandType * >(argp1);
  result = ((BWAPI::UnitCommandType const *)arg1)->getName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UnitCommandType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitCommandType *arg1 = (BWAPI::UnitCommandType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_UnitCommandType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitCommandType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UnitCommandType" "', argument " "1"" of type '" "BWAPI::UnitCommandType *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitCommandType * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UnitCommandType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BWAPI__UnitCommandType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_getUnitCommandType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitCommandType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:getUnitCommandType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "getUnitCommandType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = BWAPI::UnitCommandTypes::getUnitCommandType(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitCommandType(static_cast< const BWAPI::UnitCommandType& >(result))), SWIGTYPE_p_BWAPI__UnitCommandType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_allUnitCommandTypes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< BWAPI::UnitCommandType > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":allUnitCommandTypes")) SWIG_fail;
  result = (std::set< BWAPI::UnitCommandType > *) &BWAPI::UnitCommandTypes::allUnitCommandTypes();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_BWAPI__UnitCommandType_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Attack_Move_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Attack_Move is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Attack_Move_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Attack_Move), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Attack_Unit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Attack_Unit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Attack_Unit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Attack_Unit), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Build_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Build is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Build_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Build), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Build_Addon_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Build_Addon is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Build_Addon_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Build_Addon), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Train_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Train is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Train_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Train), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Morph_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Morph is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Morph_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Morph), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Research_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Research is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Research_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Research), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Upgrade_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Upgrade is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Upgrade_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Upgrade), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Set_Rally_Position_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Set_Rally_Position is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Set_Rally_Position_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Set_Rally_Position), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Set_Rally_Unit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Set_Rally_Unit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Set_Rally_Unit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Set_Rally_Unit), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Move_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Move is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Move_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Move), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Patrol_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Patrol is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Patrol_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Patrol), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Hold_Position_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Hold_Position is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Hold_Position_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Hold_Position), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Stop_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Stop is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Stop_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Stop), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Follow_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Follow is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Follow_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Follow), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Gather_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Gather is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Gather_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Gather), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Return_Cargo_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Return_Cargo is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Return_Cargo_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Return_Cargo), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Repair_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Repair is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Repair_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Repair), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Burrow_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Burrow is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Burrow_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Burrow), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Unburrow_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Unburrow is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Unburrow_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Unburrow), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Cloak_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Cloak is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Cloak_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Cloak), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Decloak_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Decloak is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Decloak_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Decloak), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Siege_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Siege is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Siege_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Siege), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Unsiege_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Unsiege is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Unsiege_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Unsiege), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Lift_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Lift is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Lift_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Lift), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Land_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Land is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Land_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Land), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Load_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Load is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Load_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Load), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Unload_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Unload is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Unload_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Unload), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Unload_All_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Unload_All is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Unload_All_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Unload_All), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Unload_All_Position_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Unload_All_Position is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Unload_All_Position_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Unload_All_Position), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Right_Click_Position_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Right_Click_Position is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Right_Click_Position_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Right_Click_Position), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Right_Click_Unit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Right_Click_Unit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Right_Click_Unit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Right_Click_Unit), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Halt_Construction_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Halt_Construction is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Halt_Construction_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Halt_Construction), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Cancel_Construction_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Cancel_Construction is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Cancel_Construction_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Cancel_Construction), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Cancel_Addon_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Cancel_Addon is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Cancel_Addon_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Cancel_Addon), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Cancel_Train_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Cancel_Train is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Cancel_Train_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Cancel_Train), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Cancel_Train_Slot_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Cancel_Train_Slot is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Cancel_Train_Slot_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Cancel_Train_Slot), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Cancel_Morph_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Cancel_Morph is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Cancel_Morph_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Cancel_Morph), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Cancel_Research_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Cancel_Research is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Cancel_Research_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Cancel_Research), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Cancel_Upgrade_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Cancel_Upgrade is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Cancel_Upgrade_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Cancel_Upgrade), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Use_Tech_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Use_Tech is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Use_Tech_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Use_Tech), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Use_Tech_Position_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Use_Tech_Position is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Use_Tech_Position_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Use_Tech_Position), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Use_Tech_Unit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Use_Tech_Unit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Use_Tech_Unit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Use_Tech_Unit), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_None_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_None is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_None_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::None), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitCommandTypes_Unknown_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitCommandTypes_Unknown is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitCommandTypes_Unknown_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitCommandTypes::Unknown), SWIGTYPE_p_BWAPI__UnitCommandType,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_UnitSizeType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitSizeType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_UnitSizeType")) SWIG_fail;
  result = (BWAPI::UnitSizeType *)new BWAPI::UnitSizeType();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__UnitSizeType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UnitSizeType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitSizeType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UnitSizeType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UnitSizeType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (BWAPI::UnitSizeType *)new BWAPI::UnitSizeType(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__UnitSizeType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UnitSizeType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitSizeType *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitSizeType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UnitSizeType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BWAPI__UnitSizeType,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UnitSizeType" "', argument " "1"" of type '" "BWAPI::UnitSizeType const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UnitSizeType" "', argument " "1"" of type '" "BWAPI::UnitSizeType const &""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitSizeType * >(argp1);
  result = (BWAPI::UnitSizeType *)new BWAPI::UnitSizeType((BWAPI::UnitSizeType const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__UnitSizeType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UnitSizeType(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_UnitSizeType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BWAPI__UnitSizeType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_UnitSizeType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_UnitSizeType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_UnitSizeType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BWAPI::UnitSizeType()\n"
    "    BWAPI::UnitSizeType(int)\n"
    "    BWAPI::UnitSizeType(BWAPI::UnitSizeType const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitSizeType___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitSizeType *arg1 = (BWAPI::UnitSizeType *) 0 ;
  BWAPI::UnitSizeType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitSizeType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitSizeType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitSizeType___eq__" "', argument " "1"" of type '" "BWAPI::UnitSizeType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitSizeType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__UnitSizeType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitSizeType___eq__" "', argument " "2"" of type '" "BWAPI::UnitSizeType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitSizeType___eq__" "', argument " "2"" of type '" "BWAPI::UnitSizeType const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::UnitSizeType * >(argp2);
  result = (bool)((BWAPI::UnitSizeType const *)arg1)->operator ==((BWAPI::UnitSizeType const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitSizeType___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitSizeType *arg1 = (BWAPI::UnitSizeType *) 0 ;
  BWAPI::UnitSizeType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitSizeType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitSizeType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitSizeType___ne__" "', argument " "1"" of type '" "BWAPI::UnitSizeType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitSizeType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__UnitSizeType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitSizeType___ne__" "', argument " "2"" of type '" "BWAPI::UnitSizeType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitSizeType___ne__" "', argument " "2"" of type '" "BWAPI::UnitSizeType const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::UnitSizeType * >(argp2);
  result = (bool)((BWAPI::UnitSizeType const *)arg1)->operator !=((BWAPI::UnitSizeType const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitSizeType___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitSizeType *arg1 = (BWAPI::UnitSizeType *) 0 ;
  BWAPI::UnitSizeType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitSizeType___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitSizeType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitSizeType___lt__" "', argument " "1"" of type '" "BWAPI::UnitSizeType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitSizeType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__UnitSizeType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitSizeType___lt__" "', argument " "2"" of type '" "BWAPI::UnitSizeType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitSizeType___lt__" "', argument " "2"" of type '" "BWAPI::UnitSizeType const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::UnitSizeType * >(argp2);
  result = (bool)((BWAPI::UnitSizeType const *)arg1)->operator <((BWAPI::UnitSizeType const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitSizeType_getID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitSizeType *arg1 = (BWAPI::UnitSizeType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitSizeType_getID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitSizeType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitSizeType_getID" "', argument " "1"" of type '" "BWAPI::UnitSizeType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitSizeType * >(argp1);
  result = (int)((BWAPI::UnitSizeType const *)arg1)->getID();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitSizeType_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitSizeType *arg1 = (BWAPI::UnitSizeType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitSizeType_getName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitSizeType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitSizeType_getName" "', argument " "1"" of type '" "BWAPI::UnitSizeType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitSizeType * >(argp1);
  result = ((BWAPI::UnitSizeType const *)arg1)->getName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UnitSizeType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitSizeType *arg1 = (BWAPI::UnitSizeType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_UnitSizeType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitSizeType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UnitSizeType" "', argument " "1"" of type '" "BWAPI::UnitSizeType *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitSizeType * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UnitSizeType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BWAPI__UnitSizeType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_getUnitSizeType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitSizeType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:getUnitSizeType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "getUnitSizeType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = BWAPI::UnitSizeTypes::getUnitSizeType(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitSizeType(static_cast< const BWAPI::UnitSizeType& >(result))), SWIGTYPE_p_BWAPI__UnitSizeType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_allUnitSizeTypes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< BWAPI::UnitSizeType > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":allUnitSizeTypes")) SWIG_fail;
  result = (std::set< BWAPI::UnitSizeType > *) &BWAPI::UnitSizeTypes::allUnitSizeTypes();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_BWAPI__UnitSizeType_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_UnitSizeTypes_Independent_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitSizeTypes_Independent is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitSizeTypes_Independent_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitSizeTypes::Independent), SWIGTYPE_p_BWAPI__UnitSizeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Small_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Small is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Small_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitSizeTypes::Small), SWIGTYPE_p_BWAPI__UnitSizeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Medium_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Medium is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Medium_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitSizeTypes::Medium), SWIGTYPE_p_BWAPI__UnitSizeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Large_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Large is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Large_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitSizeTypes::Large), SWIGTYPE_p_BWAPI__UnitSizeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitSizeTypes_None_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitSizeTypes_None is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitSizeTypes_None_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitSizeTypes::None), SWIGTYPE_p_BWAPI__UnitSizeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitSizeTypes_Unknown_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitSizeTypes_Unknown is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitSizeTypes_Unknown_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitSizeTypes::Unknown), SWIGTYPE_p_BWAPI__UnitSizeType,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_UnitType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_UnitType")) SWIG_fail;
  result = (BWAPI::UnitType *)new BWAPI::UnitType();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__UnitType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UnitType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UnitType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UnitType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (BWAPI::UnitType *)new BWAPI::UnitType(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__UnitType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UnitType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UnitType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BWAPI__UnitType,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UnitType" "', argument " "1"" of type '" "BWAPI::UnitType const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UnitType" "', argument " "1"" of type '" "BWAPI::UnitType const &""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (BWAPI::UnitType *)new BWAPI::UnitType((BWAPI::UnitType const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__UnitType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UnitType(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_UnitType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BWAPI__UnitType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_UnitType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_UnitType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_UnitType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BWAPI::UnitType()\n"
    "    BWAPI::UnitType(int)\n"
    "    BWAPI::UnitType(BWAPI::UnitType const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  BWAPI::UnitType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType___eq__" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__UnitType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitType___eq__" "', argument " "2"" of type '" "BWAPI::UnitType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitType___eq__" "', argument " "2"" of type '" "BWAPI::UnitType const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::UnitType * >(argp2);
  result = (bool)((BWAPI::UnitType const *)arg1)->operator ==((BWAPI::UnitType const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  BWAPI::UnitType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType___ne__" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__UnitType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitType___ne__" "', argument " "2"" of type '" "BWAPI::UnitType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitType___ne__" "', argument " "2"" of type '" "BWAPI::UnitType const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::UnitType * >(argp2);
  result = (bool)((BWAPI::UnitType const *)arg1)->operator !=((BWAPI::UnitType const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  BWAPI::UnitType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnitType___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType___lt__" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__UnitType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitType___lt__" "', argument " "2"" of type '" "BWAPI::UnitType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitType___lt__" "', argument " "2"" of type '" "BWAPI::UnitType const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::UnitType * >(argp2);
  result = (bool)((BWAPI::UnitType const *)arg1)->operator <((BWAPI::UnitType const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_getID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_getID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_getID" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (int)((BWAPI::UnitType const *)arg1)->getID();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_getName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_getName" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = ((BWAPI::UnitType const *)arg1)->getName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_getRace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Race result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_getRace",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_getRace" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = ((BWAPI::UnitType const *)arg1)->getRace();
  resultobj = SWIG_NewPointerObj((new BWAPI::Race(static_cast< const BWAPI::Race& >(result))), SWIGTYPE_p_BWAPI__Race, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_requiredTech(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::TechType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_requiredTech",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_requiredTech" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = ((BWAPI::UnitType const *)arg1)->requiredTech();
  resultobj = SWIG_NewPointerObj((new BWAPI::TechType(static_cast< const BWAPI::TechType& >(result))), SWIGTYPE_p_BWAPI__TechType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_cloakingTech(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::TechType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_cloakingTech",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_cloakingTech" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = ((BWAPI::UnitType const *)arg1)->cloakingTech();
  resultobj = SWIG_NewPointerObj((new BWAPI::TechType(static_cast< const BWAPI::TechType& >(result))), SWIGTYPE_p_BWAPI__TechType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_abilities(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< BWAPI::TechType > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_abilities",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_abilities" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (std::set< BWAPI::TechType > *) &((BWAPI::UnitType const *)arg1)->abilities();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_BWAPI__TechType_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_upgrades(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< BWAPI::UpgradeType > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_upgrades",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_upgrades" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (std::set< BWAPI::UpgradeType > *) &((BWAPI::UnitType const *)arg1)->upgrades();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_BWAPI__UpgradeType_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_armorUpgrade(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UpgradeType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_armorUpgrade",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_armorUpgrade" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = ((BWAPI::UnitType const *)arg1)->armorUpgrade();
  resultobj = SWIG_NewPointerObj((new BWAPI::UpgradeType(static_cast< const BWAPI::UpgradeType& >(result))), SWIGTYPE_p_BWAPI__UpgradeType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_maxHitPoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_maxHitPoints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_maxHitPoints" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (int)((BWAPI::UnitType const *)arg1)->maxHitPoints();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_maxShields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_maxShields",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_maxShields" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (int)((BWAPI::UnitType const *)arg1)->maxShields();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_maxEnergy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_maxEnergy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_maxEnergy" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (int)((BWAPI::UnitType const *)arg1)->maxEnergy();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_armor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_armor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_armor" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (int)((BWAPI::UnitType const *)arg1)->armor();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_mineralPrice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_mineralPrice",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_mineralPrice" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (int)((BWAPI::UnitType const *)arg1)->mineralPrice();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_gasPrice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_gasPrice",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_gasPrice" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (int)((BWAPI::UnitType const *)arg1)->gasPrice();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_buildTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_buildTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_buildTime" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (int)((BWAPI::UnitType const *)arg1)->buildTime();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_supplyRequired(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_supplyRequired",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_supplyRequired" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (int)((BWAPI::UnitType const *)arg1)->supplyRequired();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_supplyProvided(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_supplyProvided",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_supplyProvided" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (int)((BWAPI::UnitType const *)arg1)->supplyProvided();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_spaceRequired(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_spaceRequired",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_spaceRequired" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (int)((BWAPI::UnitType const *)arg1)->spaceRequired();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_spaceProvided(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_spaceProvided",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_spaceProvided" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (int)((BWAPI::UnitType const *)arg1)->spaceProvided();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_buildScore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_buildScore",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_buildScore" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (int)((BWAPI::UnitType const *)arg1)->buildScore();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_destroyScore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_destroyScore",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_destroyScore" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (int)((BWAPI::UnitType const *)arg1)->destroyScore();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitSizeType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_size" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = ((BWAPI::UnitType const *)arg1)->size();
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitSizeType(static_cast< const BWAPI::UnitSizeType& >(result))), SWIGTYPE_p_BWAPI__UnitSizeType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_tileWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_tileWidth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_tileWidth" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (int)((BWAPI::UnitType const *)arg1)->tileWidth();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_tileHeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_tileHeight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_tileHeight" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (int)((BWAPI::UnitType const *)arg1)->tileHeight();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_dimensionLeft(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_dimensionLeft",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_dimensionLeft" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (int)((BWAPI::UnitType const *)arg1)->dimensionLeft();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_dimensionUp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_dimensionUp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_dimensionUp" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (int)((BWAPI::UnitType const *)arg1)->dimensionUp();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_dimensionRight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_dimensionRight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_dimensionRight" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (int)((BWAPI::UnitType const *)arg1)->dimensionRight();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_dimensionDown(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_dimensionDown",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_dimensionDown" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (int)((BWAPI::UnitType const *)arg1)->dimensionDown();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_seekRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_seekRange",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_seekRange" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (int)((BWAPI::UnitType const *)arg1)->seekRange();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_sightRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_sightRange",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_sightRange" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (int)((BWAPI::UnitType const *)arg1)->sightRange();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_groundWeapon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::WeaponType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_groundWeapon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_groundWeapon" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = ((BWAPI::UnitType const *)arg1)->groundWeapon();
  resultobj = SWIG_NewPointerObj((new BWAPI::WeaponType(static_cast< const BWAPI::WeaponType& >(result))), SWIGTYPE_p_BWAPI__WeaponType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_maxGroundHits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_maxGroundHits",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_maxGroundHits" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (int)((BWAPI::UnitType const *)arg1)->maxGroundHits();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_airWeapon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::WeaponType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_airWeapon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_airWeapon" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = ((BWAPI::UnitType const *)arg1)->airWeapon();
  resultobj = SWIG_NewPointerObj((new BWAPI::WeaponType(static_cast< const BWAPI::WeaponType& >(result))), SWIGTYPE_p_BWAPI__WeaponType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_maxAirHits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_maxAirHits",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_maxAirHits" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (int)((BWAPI::UnitType const *)arg1)->maxAirHits();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_topSpeed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_topSpeed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_topSpeed" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (double)((BWAPI::UnitType const *)arg1)->topSpeed();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_acceleration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_acceleration",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_acceleration" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (int)((BWAPI::UnitType const *)arg1)->acceleration();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_haltDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_haltDistance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_haltDistance" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (int)((BWAPI::UnitType const *)arg1)->haltDistance();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_turnRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_turnRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_turnRadius" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (int)((BWAPI::UnitType const *)arg1)->turnRadius();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_canProduce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_canProduce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_canProduce" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (bool)((BWAPI::UnitType const *)arg1)->canProduce();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_canAttack(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_canAttack",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_canAttack" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (bool)((BWAPI::UnitType const *)arg1)->canAttack();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_canMove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_canMove",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_canMove" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (bool)((BWAPI::UnitType const *)arg1)->canMove();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_isFlyer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_isFlyer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_isFlyer" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (bool)((BWAPI::UnitType const *)arg1)->isFlyer();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_regeneratesHP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_regeneratesHP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_regeneratesHP" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (bool)((BWAPI::UnitType const *)arg1)->regeneratesHP();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_isSpellcaster(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_isSpellcaster",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_isSpellcaster" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (bool)((BWAPI::UnitType const *)arg1)->isSpellcaster();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_hasPermanentCloak(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_hasPermanentCloak",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_hasPermanentCloak" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (bool)((BWAPI::UnitType const *)arg1)->hasPermanentCloak();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_isInvincible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_isInvincible",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_isInvincible" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (bool)((BWAPI::UnitType const *)arg1)->isInvincible();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_isOrganic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_isOrganic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_isOrganic" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (bool)((BWAPI::UnitType const *)arg1)->isOrganic();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_isMechanical(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_isMechanical",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_isMechanical" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (bool)((BWAPI::UnitType const *)arg1)->isMechanical();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_isRobotic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_isRobotic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_isRobotic" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (bool)((BWAPI::UnitType const *)arg1)->isRobotic();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_isDetector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_isDetector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_isDetector" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (bool)((BWAPI::UnitType const *)arg1)->isDetector();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_isResourceContainer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_isResourceContainer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_isResourceContainer" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (bool)((BWAPI::UnitType const *)arg1)->isResourceContainer();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_isResourceDepot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_isResourceDepot",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_isResourceDepot" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (bool)((BWAPI::UnitType const *)arg1)->isResourceDepot();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_isRefinery(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_isRefinery",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_isRefinery" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (bool)((BWAPI::UnitType const *)arg1)->isRefinery();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_isWorker(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_isWorker",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_isWorker" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (bool)((BWAPI::UnitType const *)arg1)->isWorker();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_requiresPsi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_requiresPsi",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_requiresPsi" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (bool)((BWAPI::UnitType const *)arg1)->requiresPsi();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_requiresCreep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_requiresCreep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_requiresCreep" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (bool)((BWAPI::UnitType const *)arg1)->requiresCreep();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_isTwoUnitsInOneEgg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_isTwoUnitsInOneEgg",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_isTwoUnitsInOneEgg" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (bool)((BWAPI::UnitType const *)arg1)->isTwoUnitsInOneEgg();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_isBurrowable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_isBurrowable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_isBurrowable" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (bool)((BWAPI::UnitType const *)arg1)->isBurrowable();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_isCloakable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_isCloakable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_isCloakable" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (bool)((BWAPI::UnitType const *)arg1)->isCloakable();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_isBuilding(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_isBuilding",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_isBuilding" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (bool)((BWAPI::UnitType const *)arg1)->isBuilding();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_isAddon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_isAddon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_isAddon" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (bool)((BWAPI::UnitType const *)arg1)->isAddon();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_isFlyingBuilding(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_isFlyingBuilding",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_isFlyingBuilding" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (bool)((BWAPI::UnitType const *)arg1)->isFlyingBuilding();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_isNeutral(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_isNeutral",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_isNeutral" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (bool)((BWAPI::UnitType const *)arg1)->isNeutral();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_isHero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_isHero",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_isHero" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (bool)((BWAPI::UnitType const *)arg1)->isHero();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_isPowerup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_isPowerup",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_isPowerup" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (bool)((BWAPI::UnitType const *)arg1)->isPowerup();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_isBeacon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_isBeacon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_isBeacon" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (bool)((BWAPI::UnitType const *)arg1)->isBeacon();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_isFlagBeacon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_isFlagBeacon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_isFlagBeacon" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (bool)((BWAPI::UnitType const *)arg1)->isFlagBeacon();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_isSpecialBuilding(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_isSpecialBuilding",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_isSpecialBuilding" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (bool)((BWAPI::UnitType const *)arg1)->isSpecialBuilding();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_isSpell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_isSpell",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_isSpell" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (bool)((BWAPI::UnitType const *)arg1)->isSpell();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_producesLarva(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_producesLarva",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_producesLarva" "', argument " "1"" of type '" "BWAPI::UnitType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (bool)((BWAPI::UnitType const *)arg1)->producesLarva();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitType_whatBuilds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnitType_whatBuilds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitType_whatBuilds" "', argument " "1"" of type '" "BWAPI::UnitType *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  result = (BWAPI::UnitType *)BWAPI_UnitType_whatBuilds(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__UnitType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UnitType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_UnitType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UnitType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UnitType" "', argument " "1"" of type '" "BWAPI::UnitType *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UnitType * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UnitType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BWAPI__UnitType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_getUnitType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:getUnitType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "getUnitType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = BWAPI::UnitTypes::getUnitType(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitType(static_cast< const BWAPI::UnitType& >(result))), SWIGTYPE_p_BWAPI__UnitType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_allUnitTypes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< BWAPI::UnitType > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":allUnitTypes")) SWIG_fail;
  result = (std::set< BWAPI::UnitType > *) &BWAPI::UnitTypes::allUnitTypes();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_BWAPI__UnitType_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Terran_Marine_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Marine is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Marine_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Terran_Marine), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Jim_Raynor_Marine_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Jim_Raynor_Marine is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Jim_Raynor_Marine_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Jim_Raynor_Marine), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Ghost_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Ghost is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Ghost_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Terran_Ghost), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Sarah_Kerrigan_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Sarah_Kerrigan is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Sarah_Kerrigan_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Sarah_Kerrigan), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Samir_Duran_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Samir_Duran is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Samir_Duran_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Samir_Duran), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Infested_Duran_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Infested_Duran is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Infested_Duran_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Infested_Duran), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Alexei_Stukov_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Alexei_Stukov is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Alexei_Stukov_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Alexei_Stukov), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Vulture_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Vulture is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Vulture_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Terran_Vulture), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Jim_Raynor_Vulture_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Jim_Raynor_Vulture is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Jim_Raynor_Vulture_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Jim_Raynor_Vulture), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Goliath_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Goliath is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Goliath_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Terran_Goliath), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Alan_Schezar_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Alan_Schezar is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Alan_Schezar_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Alan_Schezar), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Siege_Tank_Tank_Mode_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Siege_Tank_Tank_Mode is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Siege_Tank_Tank_Mode_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Terran_Siege_Tank_Tank_Mode), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Edmund_Duke_Tank_Mode_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Edmund_Duke_Tank_Mode is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Edmund_Duke_Tank_Mode_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Edmund_Duke_Tank_Mode), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_SCV_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_SCV is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_SCV_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Terran_SCV), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Wraith_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Wraith is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Wraith_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Terran_Wraith), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Tom_Kazansky_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Tom_Kazansky is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Tom_Kazansky_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Tom_Kazansky), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Science_Vessel_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Science_Vessel is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Science_Vessel_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Terran_Science_Vessel), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Magellan_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Magellan is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Magellan_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Magellan), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Dropship_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Dropship is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Dropship_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Terran_Dropship), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Battlecruiser_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Battlecruiser is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Battlecruiser_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Terran_Battlecruiser), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Arcturus_Mengsk_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Arcturus_Mengsk is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Arcturus_Mengsk_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Arcturus_Mengsk), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Hyperion_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Hyperion is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Hyperion_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Hyperion), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Norad_II_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Norad_II is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Norad_II_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Norad_II), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Gerard_DuGalle_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Gerard_DuGalle is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Gerard_DuGalle_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Gerard_DuGalle), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Vulture_Spider_Mine_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Vulture_Spider_Mine is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Vulture_Spider_Mine_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Terran_Vulture_Spider_Mine), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Nuclear_Missile_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Nuclear_Missile is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Nuclear_Missile_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Terran_Nuclear_Missile), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Siege_Tank_Siege_Mode_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Siege_Tank_Siege_Mode is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Siege_Tank_Siege_Mode_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Terran_Siege_Tank_Siege_Mode), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Edmund_Duke_Siege_Mode_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Edmund_Duke_Siege_Mode is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Edmund_Duke_Siege_Mode_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Edmund_Duke_Siege_Mode), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Firebat_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Firebat is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Firebat_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Terran_Firebat), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Gui_Montag_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Gui_Montag is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Gui_Montag_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Gui_Montag), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Spell_Scanner_Sweep_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Spell_Scanner_Sweep is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Spell_Scanner_Sweep_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Spell_Scanner_Sweep), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Medic_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Medic is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Medic_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Terran_Medic), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Civilian_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Civilian is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Civilian_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Terran_Civilian), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Larva_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Larva is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Larva_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Zerg_Larva), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Egg_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Egg is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Egg_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Zerg_Egg), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Zergling_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Zergling is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Zergling_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Zerg_Zergling), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Devouring_One_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Devouring_One is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Devouring_One_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Devouring_One), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Infested_Kerrigan_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Infested_Kerrigan is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Infested_Kerrigan_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Infested_Kerrigan), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Hydralisk_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Hydralisk is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Hydralisk_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Zerg_Hydralisk), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Hunter_Killer_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Hunter_Killer is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Hunter_Killer_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Hunter_Killer), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Ultralisk_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Ultralisk is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Ultralisk_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Zerg_Ultralisk), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Torrasque_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Torrasque is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Torrasque_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Torrasque), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Broodling_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Broodling is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Broodling_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Zerg_Broodling), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Drone_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Drone is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Drone_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Zerg_Drone), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Overlord_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Overlord is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Overlord_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Zerg_Overlord), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Yggdrasill_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Yggdrasill is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Yggdrasill_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Yggdrasill), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Mutalisk_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Mutalisk is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Mutalisk_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Zerg_Mutalisk), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Kukulza_Mutalisk_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Kukulza_Mutalisk is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Kukulza_Mutalisk_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Kukulza_Mutalisk), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Guardian_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Guardian is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Guardian_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Zerg_Guardian), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Kukulza_Guardian_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Kukulza_Guardian is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Kukulza_Guardian_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Kukulza_Guardian), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Queen_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Queen is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Queen_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Zerg_Queen), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Matriarch_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Matriarch is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Matriarch_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Matriarch), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Defiler_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Defiler is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Defiler_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Zerg_Defiler), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Unclean_One_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Unclean_One is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Unclean_One_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Unclean_One), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Scourge_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Scourge is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Scourge_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Zerg_Scourge), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Infested_Terran_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Infested_Terran is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Infested_Terran_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Zerg_Infested_Terran), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Valkyrie_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Valkyrie is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Valkyrie_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Terran_Valkyrie), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Cocoon_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Cocoon is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Cocoon_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Zerg_Cocoon), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_Corsair_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_Corsair is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_Corsair_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Protoss_Corsair), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Raszagal_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Raszagal is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Raszagal_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Raszagal), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_Dark_Templar_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_Dark_Templar is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_Dark_Templar_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Protoss_Dark_Templar), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Dark_Templar_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Dark_Templar is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Dark_Templar_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Dark_Templar), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Zeratul_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Zeratul is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Zeratul_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Zeratul), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Devourer_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Devourer is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Devourer_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Zerg_Devourer), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_Dark_Archon_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_Dark_Archon is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_Dark_Archon_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Protoss_Dark_Archon), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_Probe_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_Probe is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_Probe_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Protoss_Probe), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_Zealot_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_Zealot is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_Zealot_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Protoss_Zealot), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Fenix_Zealot_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Fenix_Zealot is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Fenix_Zealot_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Fenix_Zealot), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_Dragoon_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_Dragoon is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_Dragoon_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Protoss_Dragoon), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Fenix_Dragoon_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Fenix_Dragoon is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Fenix_Dragoon_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Fenix_Dragoon), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_High_Templar_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_High_Templar is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_High_Templar_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Protoss_High_Templar), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Tassadar_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Tassadar is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Tassadar_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Tassadar), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Aldaris_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Aldaris is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Aldaris_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Aldaris), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_Archon_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_Archon is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_Archon_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Protoss_Archon), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Tassadar_Zeratul_Archon_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Tassadar_Zeratul_Archon is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Tassadar_Zeratul_Archon_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Tassadar_Zeratul_Archon), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_Shuttle_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_Shuttle is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_Shuttle_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Protoss_Shuttle), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_Scout_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_Scout is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_Scout_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Protoss_Scout), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Mojo_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Mojo is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Mojo_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Mojo), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Artanis_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Artanis is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Artanis_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Artanis), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_Arbiter_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_Arbiter is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_Arbiter_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Protoss_Arbiter), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Danimoth_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Danimoth is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Danimoth_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Danimoth), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_Carrier_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_Carrier is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_Carrier_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Protoss_Carrier), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Gantrithor_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Gantrithor is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Gantrithor_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Gantrithor), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_Interceptor_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_Interceptor is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_Interceptor_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Protoss_Interceptor), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_Reaver_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_Reaver is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_Reaver_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Protoss_Reaver), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hero_Warbringer_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hero_Warbringer is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hero_Warbringer_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Hero_Warbringer), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_Observer_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_Observer is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_Observer_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Protoss_Observer), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_Scarab_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_Scarab is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_Scarab_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Protoss_Scarab), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Critter_Rhynadon_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Critter_Rhynadon is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Critter_Rhynadon_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Critter_Rhynadon), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Critter_Bengalaas_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Critter_Bengalaas is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Critter_Bengalaas_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Critter_Bengalaas), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Critter_Scantid_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Critter_Scantid is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Critter_Scantid_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Critter_Scantid), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Critter_Kakaru_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Critter_Kakaru is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Critter_Kakaru_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Critter_Kakaru), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Critter_Ragnasaur_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Critter_Ragnasaur is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Critter_Ragnasaur_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Critter_Ragnasaur), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Critter_Ursadon_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Critter_Ursadon is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Critter_Ursadon_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Critter_Ursadon), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Lurker_Egg_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Lurker_Egg is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Lurker_Egg_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Zerg_Lurker_Egg), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Lurker_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Lurker is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Lurker_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Zerg_Lurker), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Spell_Disruption_Web_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Spell_Disruption_Web is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Spell_Disruption_Web_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Spell_Disruption_Web), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Command_Center_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Command_Center is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Command_Center_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Terran_Command_Center), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Comsat_Station_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Comsat_Station is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Comsat_Station_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Terran_Comsat_Station), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Nuclear_Silo_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Nuclear_Silo is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Nuclear_Silo_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Terran_Nuclear_Silo), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Supply_Depot_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Supply_Depot is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Supply_Depot_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Terran_Supply_Depot), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Refinery_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Refinery is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Refinery_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Terran_Refinery), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Barracks_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Barracks is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Barracks_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Terran_Barracks), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Academy_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Academy is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Academy_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Terran_Academy), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Factory_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Factory is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Factory_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Terran_Factory), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Starport_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Starport is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Starport_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Terran_Starport), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Control_Tower_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Control_Tower is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Control_Tower_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Terran_Control_Tower), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Science_Facility_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Science_Facility is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Science_Facility_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Terran_Science_Facility), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Covert_Ops_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Covert_Ops is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Covert_Ops_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Terran_Covert_Ops), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Physics_Lab_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Physics_Lab is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Physics_Lab_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Terran_Physics_Lab), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Machine_Shop_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Machine_Shop is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Machine_Shop_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Terran_Machine_Shop), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Engineering_Bay_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Engineering_Bay is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Engineering_Bay_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Terran_Engineering_Bay), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Armory_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Armory is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Armory_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Terran_Armory), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Missile_Turret_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Missile_Turret is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Missile_Turret_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Terran_Missile_Turret), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Bunker_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Bunker is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Bunker_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Terran_Bunker), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Special_Crashed_Norad_II_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Special_Crashed_Norad_II is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Special_Crashed_Norad_II_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Special_Crashed_Norad_II), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Special_Ion_Cannon_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Special_Ion_Cannon is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Special_Ion_Cannon_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Special_Ion_Cannon), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Infested_Command_Center_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Infested_Command_Center is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Infested_Command_Center_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Zerg_Infested_Command_Center), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Hatchery_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Hatchery is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Hatchery_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Zerg_Hatchery), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Lair_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Lair is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Lair_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Zerg_Lair), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Hive_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Hive is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Hive_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Zerg_Hive), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Nydus_Canal_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Nydus_Canal is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Nydus_Canal_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Zerg_Nydus_Canal), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Hydralisk_Den_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Hydralisk_Den is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Hydralisk_Den_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Zerg_Hydralisk_Den), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Defiler_Mound_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Defiler_Mound is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Defiler_Mound_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Zerg_Defiler_Mound), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Greater_Spire_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Greater_Spire is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Greater_Spire_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Zerg_Greater_Spire), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Queens_Nest_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Queens_Nest is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Queens_Nest_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Zerg_Queens_Nest), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Evolution_Chamber_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Evolution_Chamber is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Evolution_Chamber_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Zerg_Evolution_Chamber), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Ultralisk_Cavern_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Ultralisk_Cavern is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Ultralisk_Cavern_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Zerg_Ultralisk_Cavern), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Spire_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Spire is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Spire_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Zerg_Spire), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Spawning_Pool_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Spawning_Pool is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Spawning_Pool_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Zerg_Spawning_Pool), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Creep_Colony_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Creep_Colony is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Creep_Colony_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Zerg_Creep_Colony), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Spore_Colony_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Spore_Colony is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Spore_Colony_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Zerg_Spore_Colony), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Sunken_Colony_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Sunken_Colony is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Sunken_Colony_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Zerg_Sunken_Colony), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Special_Overmind_With_Shell_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Special_Overmind_With_Shell is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Special_Overmind_With_Shell_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Special_Overmind_With_Shell), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Special_Overmind_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Special_Overmind is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Special_Overmind_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Special_Overmind), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Extractor_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Extractor is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Extractor_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Zerg_Extractor), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Special_Mature_Chrysalis_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Special_Mature_Chrysalis is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Special_Mature_Chrysalis_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Special_Mature_Chrysalis), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Special_Cerebrate_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Special_Cerebrate is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Special_Cerebrate_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Special_Cerebrate), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Special_Cerebrate_Daggoth_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Special_Cerebrate_Daggoth is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Special_Cerebrate_Daggoth_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Special_Cerebrate_Daggoth), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_Nexus_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_Nexus is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_Nexus_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Protoss_Nexus), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_Robotics_Facility_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_Robotics_Facility is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_Robotics_Facility_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Protoss_Robotics_Facility), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_Pylon_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_Pylon is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_Pylon_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Protoss_Pylon), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_Assimilator_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_Assimilator is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_Assimilator_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Protoss_Assimilator), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_Observatory_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_Observatory is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_Observatory_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Protoss_Observatory), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_Gateway_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_Gateway is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_Gateway_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Protoss_Gateway), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_Photon_Cannon_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_Photon_Cannon is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_Photon_Cannon_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Protoss_Photon_Cannon), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_Citadel_of_Adun_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_Citadel_of_Adun is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_Citadel_of_Adun_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Protoss_Citadel_of_Adun), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_Cybernetics_Core_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_Cybernetics_Core is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_Cybernetics_Core_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Protoss_Cybernetics_Core), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_Templar_Archives_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_Templar_Archives is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_Templar_Archives_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Protoss_Templar_Archives), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_Forge_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_Forge is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_Forge_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Protoss_Forge), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_Stargate_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_Stargate is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_Stargate_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Protoss_Stargate), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Special_Stasis_Cell_Prison_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Special_Stasis_Cell_Prison is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Special_Stasis_Cell_Prison_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Special_Stasis_Cell_Prison), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_Fleet_Beacon_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_Fleet_Beacon is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_Fleet_Beacon_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Protoss_Fleet_Beacon), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_Arbiter_Tribunal_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_Arbiter_Tribunal is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_Arbiter_Tribunal_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Protoss_Arbiter_Tribunal), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_Robotics_Support_Bay_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_Robotics_Support_Bay is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_Robotics_Support_Bay_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Protoss_Robotics_Support_Bay), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_Shield_Battery_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_Shield_Battery is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_Shield_Battery_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Protoss_Shield_Battery), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Special_Khaydarin_Crystal_Form_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Special_Khaydarin_Crystal_Form is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Special_Khaydarin_Crystal_Form_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Special_Khaydarin_Crystal_Form), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Special_Protoss_Temple_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Special_Protoss_Temple is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Special_Protoss_Temple_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Special_Protoss_Temple), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Special_XelNaga_Temple_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Special_XelNaga_Temple is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Special_XelNaga_Temple_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Special_XelNaga_Temple), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Resource_Mineral_Field_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Resource_Mineral_Field is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Resource_Mineral_Field_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Resource_Mineral_Field), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Resource_Vespene_Geyser_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Resource_Vespene_Geyser is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Resource_Vespene_Geyser_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Resource_Vespene_Geyser), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Special_Warp_Gate_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Special_Warp_Gate is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Special_Warp_Gate_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Special_Warp_Gate), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Special_Psi_Disrupter_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Special_Psi_Disrupter is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Special_Psi_Disrupter_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Special_Psi_Disrupter), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Special_Power_Generator_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Special_Power_Generator is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Special_Power_Generator_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Special_Power_Generator), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Special_Overmind_Cocoon_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Special_Overmind_Cocoon is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Special_Overmind_Cocoon_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Special_Overmind_Cocoon), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Special_Zerg_Beacon_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Special_Zerg_Beacon is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Special_Zerg_Beacon_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Special_Zerg_Beacon), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Special_Terran_Beacon_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Special_Terran_Beacon is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Special_Terran_Beacon_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Special_Terran_Beacon), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Special_Protoss_Beacon_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Special_Protoss_Beacon is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Special_Protoss_Beacon_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Special_Protoss_Beacon), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Special_Zerg_Flag_Beacon_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Special_Zerg_Flag_Beacon is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Special_Zerg_Flag_Beacon_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Special_Zerg_Flag_Beacon), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Special_Terran_Flag_Beacon_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Special_Terran_Flag_Beacon is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Special_Terran_Flag_Beacon_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Special_Terran_Flag_Beacon), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Special_Protoss_Flag_Beacon_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Special_Protoss_Flag_Beacon is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Special_Protoss_Flag_Beacon_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Special_Protoss_Flag_Beacon), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Spell_Dark_Swarm_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Spell_Dark_Swarm is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Spell_Dark_Swarm_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Spell_Dark_Swarm), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Powerup_Uraj_Crystal_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Powerup_Uraj_Crystal is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Powerup_Uraj_Crystal_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Powerup_Uraj_Crystal), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Powerup_Khalis_Crystal_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Powerup_Khalis_Crystal is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Powerup_Khalis_Crystal_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Powerup_Khalis_Crystal), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Powerup_Flag_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Powerup_Flag is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Powerup_Flag_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Powerup_Flag), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Powerup_Young_Chrysalis_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Powerup_Young_Chrysalis is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Powerup_Young_Chrysalis_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Powerup_Young_Chrysalis), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Powerup_Psi_Emitter_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Powerup_Psi_Emitter is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Powerup_Psi_Emitter_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Powerup_Psi_Emitter), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Powerup_Data_Disk_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Powerup_Data_Disk is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Powerup_Data_Disk_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Powerup_Data_Disk), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Powerup_Khaydarin_Crystal_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Powerup_Khaydarin_Crystal is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Powerup_Khaydarin_Crystal_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Powerup_Khaydarin_Crystal), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitTypes_None_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitTypes_None is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitTypes_None_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::None), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UnitTypes_Unknown_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UnitTypes_Unknown is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UnitTypes_Unknown_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UnitTypes::Unknown), SWIGTYPE_p_BWAPI__UnitType,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_UpgradeType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UpgradeType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_UpgradeType")) SWIG_fail;
  result = (BWAPI::UpgradeType *)new BWAPI::UpgradeType();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__UpgradeType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UpgradeType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UpgradeType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UpgradeType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (BWAPI::UpgradeType *)new BWAPI::UpgradeType(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__UpgradeType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UpgradeType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UpgradeType *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UpgradeType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BWAPI__UpgradeType,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UpgradeType" "', argument " "1"" of type '" "BWAPI::UpgradeType const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UpgradeType" "', argument " "1"" of type '" "BWAPI::UpgradeType const &""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UpgradeType * >(argp1);
  result = (BWAPI::UpgradeType *)new BWAPI::UpgradeType((BWAPI::UpgradeType const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__UpgradeType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UpgradeType(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_UpgradeType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BWAPI__UpgradeType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_UpgradeType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_UpgradeType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_UpgradeType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BWAPI::UpgradeType()\n"
    "    BWAPI::UpgradeType(int)\n"
    "    BWAPI::UpgradeType(BWAPI::UpgradeType const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_UpgradeType___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  BWAPI::UpgradeType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UpgradeType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UpgradeType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UpgradeType___eq__" "', argument " "1"" of type '" "BWAPI::UpgradeType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UpgradeType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__UpgradeType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UpgradeType___eq__" "', argument " "2"" of type '" "BWAPI::UpgradeType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UpgradeType___eq__" "', argument " "2"" of type '" "BWAPI::UpgradeType const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::UpgradeType * >(argp2);
  result = (bool)((BWAPI::UpgradeType const *)arg1)->operator ==((BWAPI::UpgradeType const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UpgradeType___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  BWAPI::UpgradeType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UpgradeType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UpgradeType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UpgradeType___ne__" "', argument " "1"" of type '" "BWAPI::UpgradeType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UpgradeType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__UpgradeType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UpgradeType___ne__" "', argument " "2"" of type '" "BWAPI::UpgradeType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UpgradeType___ne__" "', argument " "2"" of type '" "BWAPI::UpgradeType const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::UpgradeType * >(argp2);
  result = (bool)((BWAPI::UpgradeType const *)arg1)->operator !=((BWAPI::UpgradeType const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UpgradeType___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  BWAPI::UpgradeType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UpgradeType___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UpgradeType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UpgradeType___lt__" "', argument " "1"" of type '" "BWAPI::UpgradeType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UpgradeType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__UpgradeType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UpgradeType___lt__" "', argument " "2"" of type '" "BWAPI::UpgradeType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UpgradeType___lt__" "', argument " "2"" of type '" "BWAPI::UpgradeType const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::UpgradeType * >(argp2);
  result = (bool)((BWAPI::UpgradeType const *)arg1)->operator <((BWAPI::UpgradeType const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UpgradeType_getID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UpgradeType_getID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UpgradeType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UpgradeType_getID" "', argument " "1"" of type '" "BWAPI::UpgradeType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UpgradeType * >(argp1);
  result = (int)((BWAPI::UpgradeType const *)arg1)->getID();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UpgradeType_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UpgradeType_getName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UpgradeType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UpgradeType_getName" "', argument " "1"" of type '" "BWAPI::UpgradeType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UpgradeType * >(argp1);
  result = ((BWAPI::UpgradeType const *)arg1)->getName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UpgradeType_getRace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::Race result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UpgradeType_getRace",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UpgradeType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UpgradeType_getRace" "', argument " "1"" of type '" "BWAPI::UpgradeType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UpgradeType * >(argp1);
  result = ((BWAPI::UpgradeType const *)arg1)->getRace();
  resultobj = SWIG_NewPointerObj((new BWAPI::Race(static_cast< const BWAPI::Race& >(result))), SWIGTYPE_p_BWAPI__Race, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UpgradeType_mineralPriceBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UpgradeType_mineralPriceBase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UpgradeType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UpgradeType_mineralPriceBase" "', argument " "1"" of type '" "BWAPI::UpgradeType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UpgradeType * >(argp1);
  result = (int)((BWAPI::UpgradeType const *)arg1)->mineralPriceBase();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UpgradeType_mineralPriceFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UpgradeType_mineralPriceFactor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UpgradeType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UpgradeType_mineralPriceFactor" "', argument " "1"" of type '" "BWAPI::UpgradeType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UpgradeType * >(argp1);
  result = (int)((BWAPI::UpgradeType const *)arg1)->mineralPriceFactor();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UpgradeType_gasPriceBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UpgradeType_gasPriceBase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UpgradeType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UpgradeType_gasPriceBase" "', argument " "1"" of type '" "BWAPI::UpgradeType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UpgradeType * >(argp1);
  result = (int)((BWAPI::UpgradeType const *)arg1)->gasPriceBase();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UpgradeType_gasPriceFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UpgradeType_gasPriceFactor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UpgradeType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UpgradeType_gasPriceFactor" "', argument " "1"" of type '" "BWAPI::UpgradeType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UpgradeType * >(argp1);
  result = (int)((BWAPI::UpgradeType const *)arg1)->gasPriceFactor();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UpgradeType_upgradeTimeBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UpgradeType_upgradeTimeBase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UpgradeType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UpgradeType_upgradeTimeBase" "', argument " "1"" of type '" "BWAPI::UpgradeType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UpgradeType * >(argp1);
  result = (int)((BWAPI::UpgradeType const *)arg1)->upgradeTimeBase();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UpgradeType_upgradeTimeFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UpgradeType_upgradeTimeFactor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UpgradeType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UpgradeType_upgradeTimeFactor" "', argument " "1"" of type '" "BWAPI::UpgradeType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UpgradeType * >(argp1);
  result = (int)((BWAPI::UpgradeType const *)arg1)->upgradeTimeFactor();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UpgradeType_maxRepeats(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UpgradeType_maxRepeats",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UpgradeType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UpgradeType_maxRepeats" "', argument " "1"" of type '" "BWAPI::UpgradeType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UpgradeType * >(argp1);
  result = (int)((BWAPI::UpgradeType const *)arg1)->maxRepeats();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UpgradeType_whatUpgrades(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UpgradeType_whatUpgrades",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UpgradeType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UpgradeType_whatUpgrades" "', argument " "1"" of type '" "BWAPI::UpgradeType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UpgradeType * >(argp1);
  result = ((BWAPI::UpgradeType const *)arg1)->whatUpgrades();
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitType(static_cast< const BWAPI::UnitType& >(result))), SWIGTYPE_p_BWAPI__UnitType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UpgradeType_whatUses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< BWAPI::UnitType > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UpgradeType_whatUses",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UpgradeType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UpgradeType_whatUses" "', argument " "1"" of type '" "BWAPI::UpgradeType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UpgradeType * >(argp1);
  result = (std::set< BWAPI::UnitType > *) &((BWAPI::UpgradeType const *)arg1)->whatUses();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_BWAPI__UnitType_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UpgradeType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_UpgradeType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__UpgradeType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UpgradeType" "', argument " "1"" of type '" "BWAPI::UpgradeType *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::UpgradeType * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UpgradeType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BWAPI__UpgradeType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_getUpgradeType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  BWAPI::UpgradeType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:getUpgradeType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "getUpgradeType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = BWAPI::UpgradeTypes::getUpgradeType(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::UpgradeType(static_cast< const BWAPI::UpgradeType& >(result))), SWIGTYPE_p_BWAPI__UpgradeType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_allUpgradeTypes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< BWAPI::UpgradeType > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":allUpgradeTypes")) SWIG_fail;
  result = (std::set< BWAPI::UpgradeType > *) &BWAPI::UpgradeTypes::allUpgradeTypes();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_BWAPI__UpgradeType_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Terran_Infantry_Armor_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Infantry_Armor is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Infantry_Armor_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Terran_Infantry_Armor), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Vehicle_Plating_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Vehicle_Plating is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Vehicle_Plating_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Terran_Vehicle_Plating), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Ship_Plating_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Ship_Plating is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Ship_Plating_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Terran_Ship_Plating), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Carapace_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Carapace is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Carapace_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Zerg_Carapace), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Flyer_Carapace_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Flyer_Carapace is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Flyer_Carapace_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Zerg_Flyer_Carapace), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_Ground_Armor_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_Ground_Armor is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_Ground_Armor_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Protoss_Ground_Armor), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_Air_Armor_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_Air_Armor is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_Air_Armor_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Protoss_Air_Armor), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Infantry_Weapons_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Infantry_Weapons is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Infantry_Weapons_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Terran_Infantry_Weapons), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Vehicle_Weapons_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Vehicle_Weapons is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Vehicle_Weapons_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Terran_Vehicle_Weapons), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Terran_Ship_Weapons_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Terran_Ship_Weapons is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Terran_Ship_Weapons_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Terran_Ship_Weapons), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Melee_Attacks_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Melee_Attacks is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Melee_Attacks_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Zerg_Melee_Attacks), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Missile_Attacks_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Missile_Attacks is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Missile_Attacks_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Zerg_Missile_Attacks), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Zerg_Flyer_Attacks_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Zerg_Flyer_Attacks is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Zerg_Flyer_Attacks_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Zerg_Flyer_Attacks), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_Ground_Weapons_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_Ground_Weapons is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_Ground_Weapons_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Protoss_Ground_Weapons), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_Air_Weapons_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_Air_Weapons is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_Air_Weapons_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Protoss_Air_Weapons), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Protoss_Plasma_Shields_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Protoss_Plasma_Shields is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Protoss_Plasma_Shields_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Protoss_Plasma_Shields), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_U_238_Shells_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable U_238_Shells is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_U_238_Shells_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::U_238_Shells), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Ion_Thrusters_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Ion_Thrusters is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Ion_Thrusters_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Ion_Thrusters), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Titan_Reactor_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Titan_Reactor is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Titan_Reactor_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Titan_Reactor), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Ocular_Implants_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Ocular_Implants is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Ocular_Implants_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Ocular_Implants), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Moebius_Reactor_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Moebius_Reactor is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Moebius_Reactor_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Moebius_Reactor), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Apollo_Reactor_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Apollo_Reactor is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Apollo_Reactor_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Apollo_Reactor), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Colossus_Reactor_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Colossus_Reactor is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Colossus_Reactor_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Colossus_Reactor), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Ventral_Sacs_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Ventral_Sacs is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Ventral_Sacs_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Ventral_Sacs), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Antennae_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Antennae is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Antennae_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Antennae), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Pneumatized_Carapace_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Pneumatized_Carapace is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Pneumatized_Carapace_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Pneumatized_Carapace), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Metabolic_Boost_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Metabolic_Boost is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Metabolic_Boost_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Metabolic_Boost), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Adrenal_Glands_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Adrenal_Glands is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Adrenal_Glands_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Adrenal_Glands), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Muscular_Augments_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Muscular_Augments is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Muscular_Augments_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Muscular_Augments), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Grooved_Spines_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Grooved_Spines is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Grooved_Spines_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Grooved_Spines), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Gamete_Meiosis_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Gamete_Meiosis is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Gamete_Meiosis_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Gamete_Meiosis), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Metasynaptic_Node_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Metasynaptic_Node is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Metasynaptic_Node_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Metasynaptic_Node), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Singularity_Charge_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Singularity_Charge is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Singularity_Charge_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Singularity_Charge), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Leg_Enhancements_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Leg_Enhancements is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Leg_Enhancements_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Leg_Enhancements), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Scarab_Damage_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Scarab_Damage is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Scarab_Damage_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Scarab_Damage), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Reaver_Capacity_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Reaver_Capacity is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Reaver_Capacity_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Reaver_Capacity), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Gravitic_Drive_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Gravitic_Drive is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Gravitic_Drive_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Gravitic_Drive), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Sensor_Array_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Sensor_Array is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Sensor_Array_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Sensor_Array), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Gravitic_Boosters_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Gravitic_Boosters is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Gravitic_Boosters_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Gravitic_Boosters), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Khaydarin_Amulet_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Khaydarin_Amulet is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Khaydarin_Amulet_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Khaydarin_Amulet), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Apial_Sensors_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Apial_Sensors is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Apial_Sensors_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Apial_Sensors), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Gravitic_Thrusters_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Gravitic_Thrusters is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Gravitic_Thrusters_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Gravitic_Thrusters), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Carrier_Capacity_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Carrier_Capacity is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Carrier_Capacity_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Carrier_Capacity), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Khaydarin_Core_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Khaydarin_Core is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Khaydarin_Core_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Khaydarin_Core), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Argus_Jewel_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Argus_Jewel is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Argus_Jewel_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Argus_Jewel), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Argus_Talisman_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Argus_Talisman is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Argus_Talisman_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Argus_Talisman), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Caduceus_Reactor_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Caduceus_Reactor is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Caduceus_Reactor_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Caduceus_Reactor), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Chitinous_Plating_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Chitinous_Plating is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Chitinous_Plating_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Chitinous_Plating), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Anabolic_Synthesis_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Anabolic_Synthesis is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Anabolic_Synthesis_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Anabolic_Synthesis), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Charon_Boosters_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Charon_Boosters is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Charon_Boosters_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Charon_Boosters), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UpgradeTypes_None_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UpgradeTypes_None is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UpgradeTypes_None_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::None), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_UpgradeTypes_Unknown_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UpgradeTypes_Unknown is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UpgradeTypes_Unknown_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::UpgradeTypes::Unknown), SWIGTYPE_p_BWAPI__UpgradeType,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_WeaponType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::WeaponType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_WeaponType")) SWIG_fail;
  result = (BWAPI::WeaponType *)new BWAPI::WeaponType();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__WeaponType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WeaponType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_WeaponType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_WeaponType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (BWAPI::WeaponType *)new BWAPI::WeaponType(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__WeaponType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WeaponType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::WeaponType *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_WeaponType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BWAPI__WeaponType,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_WeaponType" "', argument " "1"" of type '" "BWAPI::WeaponType const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_WeaponType" "', argument " "1"" of type '" "BWAPI::WeaponType const &""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::WeaponType * >(argp1);
  result = (BWAPI::WeaponType *)new BWAPI::WeaponType((BWAPI::WeaponType const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BWAPI__WeaponType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WeaponType(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_WeaponType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BWAPI__WeaponType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_WeaponType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_WeaponType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_WeaponType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BWAPI::WeaponType()\n"
    "    BWAPI::WeaponType(int)\n"
    "    BWAPI::WeaponType(BWAPI::WeaponType const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeaponType___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  BWAPI::WeaponType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WeaponType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__WeaponType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeaponType___eq__" "', argument " "1"" of type '" "BWAPI::WeaponType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::WeaponType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__WeaponType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeaponType___eq__" "', argument " "2"" of type '" "BWAPI::WeaponType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeaponType___eq__" "', argument " "2"" of type '" "BWAPI::WeaponType const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::WeaponType * >(argp2);
  result = (bool)((BWAPI::WeaponType const *)arg1)->operator ==((BWAPI::WeaponType const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeaponType___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  BWAPI::WeaponType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WeaponType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__WeaponType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeaponType___ne__" "', argument " "1"" of type '" "BWAPI::WeaponType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::WeaponType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__WeaponType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeaponType___ne__" "', argument " "2"" of type '" "BWAPI::WeaponType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeaponType___ne__" "', argument " "2"" of type '" "BWAPI::WeaponType const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::WeaponType * >(argp2);
  result = (bool)((BWAPI::WeaponType const *)arg1)->operator !=((BWAPI::WeaponType const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeaponType___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  BWAPI::WeaponType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WeaponType___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__WeaponType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeaponType___lt__" "', argument " "1"" of type '" "BWAPI::WeaponType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::WeaponType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BWAPI__WeaponType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeaponType___lt__" "', argument " "2"" of type '" "BWAPI::WeaponType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeaponType___lt__" "', argument " "2"" of type '" "BWAPI::WeaponType const &""'"); 
  }
  arg2 = reinterpret_cast< BWAPI::WeaponType * >(argp2);
  result = (bool)((BWAPI::WeaponType const *)arg1)->operator <((BWAPI::WeaponType const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeaponType_getID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeaponType_getID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__WeaponType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeaponType_getID" "', argument " "1"" of type '" "BWAPI::WeaponType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::WeaponType * >(argp1);
  result = (int)((BWAPI::WeaponType const *)arg1)->getID();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeaponType_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeaponType_getName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__WeaponType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeaponType_getName" "', argument " "1"" of type '" "BWAPI::WeaponType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::WeaponType * >(argp1);
  result = ((BWAPI::WeaponType const *)arg1)->getName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeaponType_getTech(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::TechType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeaponType_getTech",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__WeaponType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeaponType_getTech" "', argument " "1"" of type '" "BWAPI::WeaponType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::WeaponType * >(argp1);
  result = ((BWAPI::WeaponType const *)arg1)->getTech();
  resultobj = SWIG_NewPointerObj((new BWAPI::TechType(static_cast< const BWAPI::TechType& >(result))), SWIGTYPE_p_BWAPI__TechType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeaponType_whatUses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UnitType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeaponType_whatUses",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__WeaponType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeaponType_whatUses" "', argument " "1"" of type '" "BWAPI::WeaponType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::WeaponType * >(argp1);
  result = ((BWAPI::WeaponType const *)arg1)->whatUses();
  resultobj = SWIG_NewPointerObj((new BWAPI::UnitType(static_cast< const BWAPI::UnitType& >(result))), SWIGTYPE_p_BWAPI__UnitType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeaponType_damageAmount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeaponType_damageAmount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__WeaponType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeaponType_damageAmount" "', argument " "1"" of type '" "BWAPI::WeaponType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::WeaponType * >(argp1);
  result = (int)((BWAPI::WeaponType const *)arg1)->damageAmount();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeaponType_damageBonus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeaponType_damageBonus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__WeaponType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeaponType_damageBonus" "', argument " "1"" of type '" "BWAPI::WeaponType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::WeaponType * >(argp1);
  result = (int)((BWAPI::WeaponType const *)arg1)->damageBonus();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeaponType_damageCooldown(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeaponType_damageCooldown",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__WeaponType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeaponType_damageCooldown" "', argument " "1"" of type '" "BWAPI::WeaponType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::WeaponType * >(argp1);
  result = (int)((BWAPI::WeaponType const *)arg1)->damageCooldown();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeaponType_damageFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeaponType_damageFactor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__WeaponType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeaponType_damageFactor" "', argument " "1"" of type '" "BWAPI::WeaponType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::WeaponType * >(argp1);
  result = (int)((BWAPI::WeaponType const *)arg1)->damageFactor();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeaponType_upgradeType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::UpgradeType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeaponType_upgradeType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__WeaponType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeaponType_upgradeType" "', argument " "1"" of type '" "BWAPI::WeaponType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::WeaponType * >(argp1);
  result = ((BWAPI::WeaponType const *)arg1)->upgradeType();
  resultobj = SWIG_NewPointerObj((new BWAPI::UpgradeType(static_cast< const BWAPI::UpgradeType& >(result))), SWIGTYPE_p_BWAPI__UpgradeType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeaponType_damageType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::DamageType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeaponType_damageType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__WeaponType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeaponType_damageType" "', argument " "1"" of type '" "BWAPI::WeaponType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::WeaponType * >(argp1);
  result = ((BWAPI::WeaponType const *)arg1)->damageType();
  resultobj = SWIG_NewPointerObj((new BWAPI::DamageType(static_cast< const BWAPI::DamageType& >(result))), SWIGTYPE_p_BWAPI__DamageType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeaponType_explosionType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BWAPI::ExplosionType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeaponType_explosionType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__WeaponType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeaponType_explosionType" "', argument " "1"" of type '" "BWAPI::WeaponType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::WeaponType * >(argp1);
  result = ((BWAPI::WeaponType const *)arg1)->explosionType();
  resultobj = SWIG_NewPointerObj((new BWAPI::ExplosionType(static_cast< const BWAPI::ExplosionType& >(result))), SWIGTYPE_p_BWAPI__ExplosionType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeaponType_minRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeaponType_minRange",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__WeaponType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeaponType_minRange" "', argument " "1"" of type '" "BWAPI::WeaponType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::WeaponType * >(argp1);
  result = (int)((BWAPI::WeaponType const *)arg1)->minRange();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeaponType_maxRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeaponType_maxRange",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__WeaponType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeaponType_maxRange" "', argument " "1"" of type '" "BWAPI::WeaponType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::WeaponType * >(argp1);
  result = (int)((BWAPI::WeaponType const *)arg1)->maxRange();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeaponType_innerSplashRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeaponType_innerSplashRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__WeaponType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeaponType_innerSplashRadius" "', argument " "1"" of type '" "BWAPI::WeaponType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::WeaponType * >(argp1);
  result = (int)((BWAPI::WeaponType const *)arg1)->innerSplashRadius();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeaponType_medianSplashRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeaponType_medianSplashRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__WeaponType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeaponType_medianSplashRadius" "', argument " "1"" of type '" "BWAPI::WeaponType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::WeaponType * >(argp1);
  result = (int)((BWAPI::WeaponType const *)arg1)->medianSplashRadius();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeaponType_outerSplashRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeaponType_outerSplashRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__WeaponType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeaponType_outerSplashRadius" "', argument " "1"" of type '" "BWAPI::WeaponType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::WeaponType * >(argp1);
  result = (int)((BWAPI::WeaponType const *)arg1)->outerSplashRadius();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeaponType_targetsAir(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeaponType_targetsAir",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__WeaponType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeaponType_targetsAir" "', argument " "1"" of type '" "BWAPI::WeaponType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::WeaponType * >(argp1);
  result = (bool)((BWAPI::WeaponType const *)arg1)->targetsAir();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeaponType_targetsGround(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeaponType_targetsGround",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__WeaponType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeaponType_targetsGround" "', argument " "1"" of type '" "BWAPI::WeaponType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::WeaponType * >(argp1);
  result = (bool)((BWAPI::WeaponType const *)arg1)->targetsGround();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeaponType_targetsMechanical(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeaponType_targetsMechanical",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__WeaponType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeaponType_targetsMechanical" "', argument " "1"" of type '" "BWAPI::WeaponType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::WeaponType * >(argp1);
  result = (bool)((BWAPI::WeaponType const *)arg1)->targetsMechanical();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeaponType_targetsOrganic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeaponType_targetsOrganic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__WeaponType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeaponType_targetsOrganic" "', argument " "1"" of type '" "BWAPI::WeaponType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::WeaponType * >(argp1);
  result = (bool)((BWAPI::WeaponType const *)arg1)->targetsOrganic();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeaponType_targetsNonBuilding(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeaponType_targetsNonBuilding",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__WeaponType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeaponType_targetsNonBuilding" "', argument " "1"" of type '" "BWAPI::WeaponType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::WeaponType * >(argp1);
  result = (bool)((BWAPI::WeaponType const *)arg1)->targetsNonBuilding();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeaponType_targetsNonRobotic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeaponType_targetsNonRobotic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__WeaponType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeaponType_targetsNonRobotic" "', argument " "1"" of type '" "BWAPI::WeaponType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::WeaponType * >(argp1);
  result = (bool)((BWAPI::WeaponType const *)arg1)->targetsNonRobotic();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeaponType_targetsTerrain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeaponType_targetsTerrain",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__WeaponType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeaponType_targetsTerrain" "', argument " "1"" of type '" "BWAPI::WeaponType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::WeaponType * >(argp1);
  result = (bool)((BWAPI::WeaponType const *)arg1)->targetsTerrain();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeaponType_targetsOrgOrMech(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeaponType_targetsOrgOrMech",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__WeaponType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeaponType_targetsOrgOrMech" "', argument " "1"" of type '" "BWAPI::WeaponType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::WeaponType * >(argp1);
  result = (bool)((BWAPI::WeaponType const *)arg1)->targetsOrgOrMech();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeaponType_targetsOwn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeaponType_targetsOwn",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__WeaponType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeaponType_targetsOwn" "', argument " "1"" of type '" "BWAPI::WeaponType const *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::WeaponType * >(argp1);
  result = (bool)((BWAPI::WeaponType const *)arg1)->targetsOwn();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_WeaponType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_WeaponType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BWAPI__WeaponType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_WeaponType" "', argument " "1"" of type '" "BWAPI::WeaponType *""'"); 
  }
  arg1 = reinterpret_cast< BWAPI::WeaponType * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *WeaponType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BWAPI__WeaponType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_getWeaponType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  BWAPI::WeaponType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:getWeaponType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "getWeaponType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = BWAPI::WeaponTypes::getWeaponType(arg1);
  resultobj = SWIG_NewPointerObj((new BWAPI::WeaponType(static_cast< const BWAPI::WeaponType& >(result))), SWIGTYPE_p_BWAPI__WeaponType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_allWeaponTypes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< BWAPI::WeaponType > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":allWeaponTypes")) SWIG_fail;
  result = (std::set< BWAPI::WeaponType > *) &BWAPI::WeaponTypes::allWeaponTypes();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_BWAPI__WeaponType_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_normalWeaponTypes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< BWAPI::WeaponType > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":normalWeaponTypes")) SWIG_fail;
  result = (std::set< BWAPI::WeaponType > *) &BWAPI::WeaponTypes::normalWeaponTypes();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_BWAPI__WeaponType_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_specialWeaponTypes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< BWAPI::WeaponType > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":specialWeaponTypes")) SWIG_fail;
  result = (std::set< BWAPI::WeaponType > *) &BWAPI::WeaponTypes::specialWeaponTypes();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_BWAPI__WeaponType_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Gauss_Rifle_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Gauss_Rifle is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Gauss_Rifle_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Gauss_Rifle), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Gauss_Rifle_Jim_Raynor_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Gauss_Rifle_Jim_Raynor is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Gauss_Rifle_Jim_Raynor_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Gauss_Rifle_Jim_Raynor), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_C_10_Canister_Rifle_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable C_10_Canister_Rifle is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_C_10_Canister_Rifle_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::C_10_Canister_Rifle), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_C_10_Canister_Rifle_Sarah_Kerrigan_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable C_10_Canister_Rifle_Sarah_Kerrigan is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_C_10_Canister_Rifle_Sarah_Kerrigan_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::C_10_Canister_Rifle_Sarah_Kerrigan), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_C_10_Canister_Rifle_Samir_Duran_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable C_10_Canister_Rifle_Samir_Duran is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_C_10_Canister_Rifle_Samir_Duran_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::C_10_Canister_Rifle_Samir_Duran), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_C_10_Canister_Rifle_Infested_Duran_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable C_10_Canister_Rifle_Infested_Duran is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_C_10_Canister_Rifle_Infested_Duran_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::C_10_Canister_Rifle_Infested_Duran), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_C_10_Canister_Rifle_Alexei_Stukov_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable C_10_Canister_Rifle_Alexei_Stukov is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_C_10_Canister_Rifle_Alexei_Stukov_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::C_10_Canister_Rifle_Alexei_Stukov), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WeaponTypes_Fragmentation_Grenade_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WeaponTypes_Fragmentation_Grenade is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WeaponTypes_Fragmentation_Grenade_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Fragmentation_Grenade), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Fragmentation_Grenade_Jim_Raynor_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Fragmentation_Grenade_Jim_Raynor is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Fragmentation_Grenade_Jim_Raynor_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Fragmentation_Grenade_Jim_Raynor), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WeaponTypes_Spider_Mines_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WeaponTypes_Spider_Mines is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WeaponTypes_Spider_Mines_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Spider_Mines), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Twin_Autocannons_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Twin_Autocannons is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Twin_Autocannons_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Twin_Autocannons), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Twin_Autocannons_Alan_Schezar_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Twin_Autocannons_Alan_Schezar is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Twin_Autocannons_Alan_Schezar_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Twin_Autocannons_Alan_Schezar), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hellfire_Missile_Pack_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hellfire_Missile_Pack is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hellfire_Missile_Pack_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Hellfire_Missile_Pack), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Hellfire_Missile_Pack_Alan_Schezar_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Hellfire_Missile_Pack_Alan_Schezar is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Hellfire_Missile_Pack_Alan_Schezar_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Hellfire_Missile_Pack_Alan_Schezar), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Arclite_Cannon_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Arclite_Cannon is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Arclite_Cannon_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Arclite_Cannon), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Arclite_Cannon_Edmund_Duke_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Arclite_Cannon_Edmund_Duke is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Arclite_Cannon_Edmund_Duke_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Arclite_Cannon_Edmund_Duke), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Fusion_Cutter_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Fusion_Cutter is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Fusion_Cutter_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Fusion_Cutter), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WeaponTypes_Gemini_Missiles_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WeaponTypes_Gemini_Missiles is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WeaponTypes_Gemini_Missiles_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Gemini_Missiles), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Gemini_Missiles_Tom_Kazansky_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Gemini_Missiles_Tom_Kazansky is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Gemini_Missiles_Tom_Kazansky_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Gemini_Missiles_Tom_Kazansky), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WeaponTypes_Burst_Lasers_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WeaponTypes_Burst_Lasers is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WeaponTypes_Burst_Lasers_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Burst_Lasers), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Burst_Lasers_Tom_Kazansky_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Burst_Lasers_Tom_Kazansky is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Burst_Lasers_Tom_Kazansky_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Burst_Lasers_Tom_Kazansky), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ATS_Laser_Battery_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ATS_Laser_Battery is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ATS_Laser_Battery_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::ATS_Laser_Battery), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ATS_Laser_Battery_Hero_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ATS_Laser_Battery_Hero is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ATS_Laser_Battery_Hero_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::ATS_Laser_Battery_Hero), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ATS_Laser_Battery_Hyperion_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ATS_Laser_Battery_Hyperion is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ATS_Laser_Battery_Hyperion_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::ATS_Laser_Battery_Hyperion), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ATA_Laser_Battery_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ATA_Laser_Battery is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ATA_Laser_Battery_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::ATA_Laser_Battery), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ATA_Laser_Battery_Hero_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ATA_Laser_Battery_Hero is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ATA_Laser_Battery_Hero_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::ATA_Laser_Battery_Hero), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ATA_Laser_Battery_Hyperion_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ATA_Laser_Battery_Hyperion is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ATA_Laser_Battery_Hyperion_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::ATA_Laser_Battery_Hyperion), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Flame_Thrower_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Flame_Thrower is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Flame_Thrower_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Flame_Thrower), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Flame_Thrower_Gui_Montag_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Flame_Thrower_Gui_Montag is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Flame_Thrower_Gui_Montag_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Flame_Thrower_Gui_Montag), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Arclite_Shock_Cannon_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Arclite_Shock_Cannon is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Arclite_Shock_Cannon_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Arclite_Shock_Cannon), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Arclite_Shock_Cannon_Edmund_Duke_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Arclite_Shock_Cannon_Edmund_Duke is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Arclite_Shock_Cannon_Edmund_Duke_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Arclite_Shock_Cannon_Edmund_Duke), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WeaponTypes_Longbolt_Missile_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WeaponTypes_Longbolt_Missile is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WeaponTypes_Longbolt_Missile_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Longbolt_Missile), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Claws_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Claws is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Claws_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Claws), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Claws_Devouring_One_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Claws_Devouring_One is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Claws_Devouring_One_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Claws_Devouring_One), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Claws_Infested_Kerrigan_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Claws_Infested_Kerrigan is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Claws_Infested_Kerrigan_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Claws_Infested_Kerrigan), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Needle_Spines_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Needle_Spines is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Needle_Spines_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Needle_Spines), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Needle_Spines_Hunter_Killer_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Needle_Spines_Hunter_Killer is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Needle_Spines_Hunter_Killer_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Needle_Spines_Hunter_Killer), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Kaiser_Blades_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Kaiser_Blades is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Kaiser_Blades_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Kaiser_Blades), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Kaiser_Blades_Torrasque_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Kaiser_Blades_Torrasque is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Kaiser_Blades_Torrasque_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Kaiser_Blades_Torrasque), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Toxic_Spores_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Toxic_Spores is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Toxic_Spores_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Toxic_Spores), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Spines_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Spines is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Spines_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Spines), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WeaponTypes_Acid_Spore_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WeaponTypes_Acid_Spore is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WeaponTypes_Acid_Spore_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Acid_Spore), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Acid_Spore_Kukulza_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Acid_Spore_Kukulza is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Acid_Spore_Kukulza_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Acid_Spore_Kukulza), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WeaponTypes_Glave_Wurm_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WeaponTypes_Glave_Wurm is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WeaponTypes_Glave_Wurm_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Glave_Wurm), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Glave_Wurm_Kukulza_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Glave_Wurm_Kukulza is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Glave_Wurm_Kukulza_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Glave_Wurm_Kukulza), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WeaponTypes_Seeker_Spores_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WeaponTypes_Seeker_Spores is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WeaponTypes_Seeker_Spores_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Seeker_Spores), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Subterranean_Tentacle_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Subterranean_Tentacle is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Subterranean_Tentacle_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Subterranean_Tentacle), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Suicide_Infested_Terran_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Suicide_Infested_Terran is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Suicide_Infested_Terran_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Suicide_Infested_Terran), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Suicide_Scourge_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Suicide_Scourge is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Suicide_Scourge_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Suicide_Scourge), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Particle_Beam_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Particle_Beam is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Particle_Beam_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Particle_Beam), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Psi_Blades_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Psi_Blades is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Psi_Blades_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Psi_Blades), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Psi_Blades_Fenix_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Psi_Blades_Fenix is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Psi_Blades_Fenix_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Psi_Blades_Fenix), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WeaponTypes_Phase_Disruptor_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WeaponTypes_Phase_Disruptor is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WeaponTypes_Phase_Disruptor_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Phase_Disruptor), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Phase_Disruptor_Fenix_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Phase_Disruptor_Fenix is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Phase_Disruptor_Fenix_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Phase_Disruptor_Fenix), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Psi_Assault_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Psi_Assault is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Psi_Assault_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Psi_Assault), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Psionic_Shockwave_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Psionic_Shockwave is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Psionic_Shockwave_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Psionic_Shockwave), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Psionic_Shockwave_TZ_Archon_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Psionic_Shockwave_TZ_Archon is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Psionic_Shockwave_TZ_Archon_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Psionic_Shockwave_TZ_Archon), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Dual_Photon_Blasters_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Dual_Photon_Blasters is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Dual_Photon_Blasters_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Dual_Photon_Blasters), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Dual_Photon_Blasters_Mojo_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Dual_Photon_Blasters_Mojo is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Dual_Photon_Blasters_Mojo_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Dual_Photon_Blasters_Mojo), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Dual_Photon_Blasters_Artanis_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Dual_Photon_Blasters_Artanis is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Dual_Photon_Blasters_Artanis_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Dual_Photon_Blasters_Artanis), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Anti_Matter_Missiles_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Anti_Matter_Missiles is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Anti_Matter_Missiles_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Anti_Matter_Missiles), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Anti_Matter_Missiles_Mojo_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Anti_Matter_Missiles_Mojo is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Anti_Matter_Missiles_Mojo_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Anti_Matter_Missiles_Mojo), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Anti_Matter_Missiles_Artanis_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Anti_Matter_Missiles_Artanis is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Anti_Matter_Missiles_Artanis_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Anti_Matter_Missiles_Artanis), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Phase_Disruptor_Cannon_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Phase_Disruptor_Cannon is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Phase_Disruptor_Cannon_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Phase_Disruptor_Cannon), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Phase_Disruptor_Cannon_Danimoth_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Phase_Disruptor_Cannon_Danimoth is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Phase_Disruptor_Cannon_Danimoth_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Phase_Disruptor_Cannon_Danimoth), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WeaponTypes_Pulse_Cannon_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WeaponTypes_Pulse_Cannon is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WeaponTypes_Pulse_Cannon_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Pulse_Cannon), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_STS_Photon_Cannon_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable STS_Photon_Cannon is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_STS_Photon_Cannon_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::STS_Photon_Cannon), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_STA_Photon_Cannon_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable STA_Photon_Cannon is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_STA_Photon_Cannon_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::STA_Photon_Cannon), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Scarab_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Scarab is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Scarab_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Scarab), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WeaponTypes_Neutron_Flare_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WeaponTypes_Neutron_Flare is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WeaponTypes_Neutron_Flare_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Neutron_Flare), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WeaponTypes_Halo_Rockets_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WeaponTypes_Halo_Rockets is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WeaponTypes_Halo_Rockets_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Halo_Rockets), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WeaponTypes_Corrosive_Acid_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WeaponTypes_Corrosive_Acid is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WeaponTypes_Corrosive_Acid_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Corrosive_Acid), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WeaponTypes_Subterranean_Spines_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WeaponTypes_Subterranean_Spines is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WeaponTypes_Subterranean_Spines_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Subterranean_Spines), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Warp_Blades_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Warp_Blades is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Warp_Blades_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Warp_Blades), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Warp_Blades_Hero_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Warp_Blades_Hero is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Warp_Blades_Hero_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Warp_Blades_Hero), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Warp_Blades_Zeratul_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Warp_Blades_Zeratul is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Warp_Blades_Zeratul_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Warp_Blades_Zeratul), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WeaponTypes_Yamato_Gun_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WeaponTypes_Yamato_Gun is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WeaponTypes_Yamato_Gun_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Yamato_Gun), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WeaponTypes_Nuclear_Strike_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WeaponTypes_Nuclear_Strike is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WeaponTypes_Nuclear_Strike_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Nuclear_Strike), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WeaponTypes_Lockdown_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WeaponTypes_Lockdown is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WeaponTypes_Lockdown_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Lockdown), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WeaponTypes_EMP_Shockwave_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WeaponTypes_EMP_Shockwave is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WeaponTypes_EMP_Shockwave_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::EMP_Shockwave), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WeaponTypes_Irradiate_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WeaponTypes_Irradiate is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WeaponTypes_Irradiate_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Irradiate), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WeaponTypes_Parasite_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WeaponTypes_Parasite is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WeaponTypes_Parasite_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Parasite), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WeaponTypes_Spawn_Broodlings_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WeaponTypes_Spawn_Broodlings is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WeaponTypes_Spawn_Broodlings_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Spawn_Broodlings), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WeaponTypes_Ensnare_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WeaponTypes_Ensnare is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WeaponTypes_Ensnare_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Ensnare), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WeaponTypes_Dark_Swarm_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WeaponTypes_Dark_Swarm is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WeaponTypes_Dark_Swarm_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Dark_Swarm), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WeaponTypes_Plague_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WeaponTypes_Plague is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WeaponTypes_Plague_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Plague), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WeaponTypes_Consume_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WeaponTypes_Consume is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WeaponTypes_Consume_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Consume), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WeaponTypes_Stasis_Field_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WeaponTypes_Stasis_Field is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WeaponTypes_Stasis_Field_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Stasis_Field), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WeaponTypes_Psionic_Storm_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WeaponTypes_Psionic_Storm is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WeaponTypes_Psionic_Storm_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Psionic_Storm), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WeaponTypes_Disruption_Web_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WeaponTypes_Disruption_Web is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WeaponTypes_Disruption_Web_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Disruption_Web), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WeaponTypes_Restoration_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WeaponTypes_Restoration is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WeaponTypes_Restoration_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Restoration), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WeaponTypes_Mind_Control_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WeaponTypes_Mind_Control is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WeaponTypes_Mind_Control_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Mind_Control), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WeaponTypes_Feedback_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WeaponTypes_Feedback is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WeaponTypes_Feedback_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Feedback), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WeaponTypes_Optical_Flare_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WeaponTypes_Optical_Flare is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WeaponTypes_Optical_Flare_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Optical_Flare), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WeaponTypes_Maelstrom_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WeaponTypes_Maelstrom is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WeaponTypes_Maelstrom_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Maelstrom), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WeaponTypes_None_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WeaponTypes_None is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WeaponTypes_None_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::None), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WeaponTypes_Unknown_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WeaponTypes_Unknown is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WeaponTypes_Unknown_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BWAPI::WeaponTypes::Unknown), SWIGTYPE_p_BWAPI__WeaponType,  0 );
  return pyobj;
}


static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RegionSet", _wrap_new_RegionSet, METH_VARARGS, NULL},
	 { (char *)"delete_RegionSet", _wrap_delete_RegionSet, METH_VARARGS, NULL},
	 { (char *)"RegionSet___len__", _wrap_RegionSet___len__, METH_VARARGS, NULL},
	 { (char *)"RegionSet___contains__", _wrap_RegionSet___contains__, METH_VARARGS, NULL},
	 { (char *)"RegionSet___iter__", _wrap_RegionSet___iter__, METH_VARARGS, NULL},
	 { (char *)"RegionSet_next", _wrap_RegionSet_next, METH_VARARGS, NULL},
	 { (char *)"RegionSet_swigregister", RegionSet_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ChokepointSet", _wrap_new_ChokepointSet, METH_VARARGS, NULL},
	 { (char *)"delete_ChokepointSet", _wrap_delete_ChokepointSet, METH_VARARGS, NULL},
	 { (char *)"ChokepointSet___len__", _wrap_ChokepointSet___len__, METH_VARARGS, NULL},
	 { (char *)"ChokepointSet___contains__", _wrap_ChokepointSet___contains__, METH_VARARGS, NULL},
	 { (char *)"ChokepointSet___iter__", _wrap_ChokepointSet___iter__, METH_VARARGS, NULL},
	 { (char *)"ChokepointSet_next", _wrap_ChokepointSet_next, METH_VARARGS, NULL},
	 { (char *)"ChokepointSet_swigregister", ChokepointSet_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BaseLocationSet", _wrap_new_BaseLocationSet, METH_VARARGS, NULL},
	 { (char *)"delete_BaseLocationSet", _wrap_delete_BaseLocationSet, METH_VARARGS, NULL},
	 { (char *)"BaseLocationSet___len__", _wrap_BaseLocationSet___len__, METH_VARARGS, NULL},
	 { (char *)"BaseLocationSet___contains__", _wrap_BaseLocationSet___contains__, METH_VARARGS, NULL},
	 { (char *)"BaseLocationSet___iter__", _wrap_BaseLocationSet___iter__, METH_VARARGS, NULL},
	 { (char *)"BaseLocationSet_next", _wrap_BaseLocationSet_next, METH_VARARGS, NULL},
	 { (char *)"BaseLocationSet_swigregister", BaseLocationSet_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PlayerSet", _wrap_new_PlayerSet, METH_VARARGS, NULL},
	 { (char *)"delete_PlayerSet", _wrap_delete_PlayerSet, METH_VARARGS, NULL},
	 { (char *)"PlayerSet___len__", _wrap_PlayerSet___len__, METH_VARARGS, NULL},
	 { (char *)"PlayerSet___contains__", _wrap_PlayerSet___contains__, METH_VARARGS, NULL},
	 { (char *)"PlayerSet___iter__", _wrap_PlayerSet___iter__, METH_VARARGS, NULL},
	 { (char *)"PlayerSet_next", _wrap_PlayerSet_next, METH_VARARGS, NULL},
	 { (char *)"PlayerSet_swigregister", PlayerSet_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_UnitSet", _wrap_new_UnitSet, METH_VARARGS, NULL},
	 { (char *)"delete_UnitSet", _wrap_delete_UnitSet, METH_VARARGS, NULL},
	 { (char *)"UnitSet___len__", _wrap_UnitSet___len__, METH_VARARGS, NULL},
	 { (char *)"UnitSet___contains__", _wrap_UnitSet___contains__, METH_VARARGS, NULL},
	 { (char *)"UnitSet___iter__", _wrap_UnitSet___iter__, METH_VARARGS, NULL},
	 { (char *)"UnitSet_next", _wrap_UnitSet_next, METH_VARARGS, NULL},
	 { (char *)"UnitSet_swigregister", UnitSet_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ForceSet", _wrap_new_ForceSet, METH_VARARGS, NULL},
	 { (char *)"delete_ForceSet", _wrap_delete_ForceSet, METH_VARARGS, NULL},
	 { (char *)"ForceSet___len__", _wrap_ForceSet___len__, METH_VARARGS, NULL},
	 { (char *)"ForceSet___contains__", _wrap_ForceSet___contains__, METH_VARARGS, NULL},
	 { (char *)"ForceSet___iter__", _wrap_ForceSet___iter__, METH_VARARGS, NULL},
	 { (char *)"ForceSet_next", _wrap_ForceSet_next, METH_VARARGS, NULL},
	 { (char *)"ForceSet_swigregister", ForceSet_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PositionSet", _wrap_new_PositionSet, METH_VARARGS, NULL},
	 { (char *)"delete_PositionSet", _wrap_delete_PositionSet, METH_VARARGS, NULL},
	 { (char *)"PositionSet___len__", _wrap_PositionSet___len__, METH_VARARGS, NULL},
	 { (char *)"PositionSet___contains__", _wrap_PositionSet___contains__, METH_VARARGS, NULL},
	 { (char *)"PositionSet___iter__", _wrap_PositionSet___iter__, METH_VARARGS, NULL},
	 { (char *)"PositionSet_next", _wrap_PositionSet_next, METH_VARARGS, NULL},
	 { (char *)"PositionSet_swigregister", PositionSet_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TilePositionSet", _wrap_new_TilePositionSet, METH_VARARGS, NULL},
	 { (char *)"delete_TilePositionSet", _wrap_delete_TilePositionSet, METH_VARARGS, NULL},
	 { (char *)"TilePositionSet___len__", _wrap_TilePositionSet___len__, METH_VARARGS, NULL},
	 { (char *)"TilePositionSet___contains__", _wrap_TilePositionSet___contains__, METH_VARARGS, NULL},
	 { (char *)"TilePositionSet___iter__", _wrap_TilePositionSet___iter__, METH_VARARGS, NULL},
	 { (char *)"TilePositionSet_next", _wrap_TilePositionSet_next, METH_VARARGS, NULL},
	 { (char *)"TilePositionSet_swigregister", TilePositionSet_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_UnitTypeSet", _wrap_new_UnitTypeSet, METH_VARARGS, NULL},
	 { (char *)"delete_UnitTypeSet", _wrap_delete_UnitTypeSet, METH_VARARGS, NULL},
	 { (char *)"UnitTypeSet___len__", _wrap_UnitTypeSet___len__, METH_VARARGS, NULL},
	 { (char *)"UnitTypeSet___contains__", _wrap_UnitTypeSet___contains__, METH_VARARGS, NULL},
	 { (char *)"UnitTypeSet___iter__", _wrap_UnitTypeSet___iter__, METH_VARARGS, NULL},
	 { (char *)"UnitTypeSet_next", _wrap_UnitTypeSet_next, METH_VARARGS, NULL},
	 { (char *)"UnitTypeSet_swigregister", UnitTypeSet_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RegionList", _wrap_new_RegionList, METH_VARARGS, NULL},
	 { (char *)"delete_RegionList", _wrap_delete_RegionList, METH_VARARGS, NULL},
	 { (char *)"RegionList___len__", _wrap_RegionList___len__, METH_VARARGS, NULL},
	 { (char *)"RegionList__size", _wrap_RegionList__size, METH_VARARGS, NULL},
	 { (char *)"RegionList___contains__", _wrap_RegionList___contains__, METH_VARARGS, NULL},
	 { (char *)"RegionList___iter__", _wrap_RegionList___iter__, METH_VARARGS, NULL},
	 { (char *)"RegionList_next", _wrap_RegionList_next, METH_VARARGS, NULL},
	 { (char *)"RegionList_swigregister", RegionList_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ChokepointList", _wrap_new_ChokepointList, METH_VARARGS, NULL},
	 { (char *)"delete_ChokepointList", _wrap_delete_ChokepointList, METH_VARARGS, NULL},
	 { (char *)"ChokepointList___len__", _wrap_ChokepointList___len__, METH_VARARGS, NULL},
	 { (char *)"ChokepointList__size", _wrap_ChokepointList__size, METH_VARARGS, NULL},
	 { (char *)"ChokepointList___contains__", _wrap_ChokepointList___contains__, METH_VARARGS, NULL},
	 { (char *)"ChokepointList___iter__", _wrap_ChokepointList___iter__, METH_VARARGS, NULL},
	 { (char *)"ChokepointList_next", _wrap_ChokepointList_next, METH_VARARGS, NULL},
	 { (char *)"ChokepointList_swigregister", ChokepointList_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BaseLocationList", _wrap_new_BaseLocationList, METH_VARARGS, NULL},
	 { (char *)"delete_BaseLocationList", _wrap_delete_BaseLocationList, METH_VARARGS, NULL},
	 { (char *)"BaseLocationList___len__", _wrap_BaseLocationList___len__, METH_VARARGS, NULL},
	 { (char *)"BaseLocationList__size", _wrap_BaseLocationList__size, METH_VARARGS, NULL},
	 { (char *)"BaseLocationList___contains__", _wrap_BaseLocationList___contains__, METH_VARARGS, NULL},
	 { (char *)"BaseLocationList___iter__", _wrap_BaseLocationList___iter__, METH_VARARGS, NULL},
	 { (char *)"BaseLocationList_next", _wrap_BaseLocationList_next, METH_VARARGS, NULL},
	 { (char *)"BaseLocationList_swigregister", BaseLocationList_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PlayerList", _wrap_new_PlayerList, METH_VARARGS, NULL},
	 { (char *)"delete_PlayerList", _wrap_delete_PlayerList, METH_VARARGS, NULL},
	 { (char *)"PlayerList___len__", _wrap_PlayerList___len__, METH_VARARGS, NULL},
	 { (char *)"PlayerList__size", _wrap_PlayerList__size, METH_VARARGS, NULL},
	 { (char *)"PlayerList___contains__", _wrap_PlayerList___contains__, METH_VARARGS, NULL},
	 { (char *)"PlayerList___iter__", _wrap_PlayerList___iter__, METH_VARARGS, NULL},
	 { (char *)"PlayerList_next", _wrap_PlayerList_next, METH_VARARGS, NULL},
	 { (char *)"PlayerList_swigregister", PlayerList_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_UnitList", _wrap_new_UnitList, METH_VARARGS, NULL},
	 { (char *)"delete_UnitList", _wrap_delete_UnitList, METH_VARARGS, NULL},
	 { (char *)"UnitList___len__", _wrap_UnitList___len__, METH_VARARGS, NULL},
	 { (char *)"UnitList__size", _wrap_UnitList__size, METH_VARARGS, NULL},
	 { (char *)"UnitList___contains__", _wrap_UnitList___contains__, METH_VARARGS, NULL},
	 { (char *)"UnitList___iter__", _wrap_UnitList___iter__, METH_VARARGS, NULL},
	 { (char *)"UnitList_next", _wrap_UnitList_next, METH_VARARGS, NULL},
	 { (char *)"UnitList_swigregister", UnitList_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ForceList", _wrap_new_ForceList, METH_VARARGS, NULL},
	 { (char *)"delete_ForceList", _wrap_delete_ForceList, METH_VARARGS, NULL},
	 { (char *)"ForceList___len__", _wrap_ForceList___len__, METH_VARARGS, NULL},
	 { (char *)"ForceList__size", _wrap_ForceList__size, METH_VARARGS, NULL},
	 { (char *)"ForceList___contains__", _wrap_ForceList___contains__, METH_VARARGS, NULL},
	 { (char *)"ForceList___iter__", _wrap_ForceList___iter__, METH_VARARGS, NULL},
	 { (char *)"ForceList_next", _wrap_ForceList_next, METH_VARARGS, NULL},
	 { (char *)"ForceList_swigregister", ForceList_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PositionList", _wrap_new_PositionList, METH_VARARGS, NULL},
	 { (char *)"delete_PositionList", _wrap_delete_PositionList, METH_VARARGS, NULL},
	 { (char *)"PositionList___len__", _wrap_PositionList___len__, METH_VARARGS, NULL},
	 { (char *)"PositionList__size", _wrap_PositionList__size, METH_VARARGS, NULL},
	 { (char *)"PositionList___contains__", _wrap_PositionList___contains__, METH_VARARGS, NULL},
	 { (char *)"PositionList___iter__", _wrap_PositionList___iter__, METH_VARARGS, NULL},
	 { (char *)"PositionList_next", _wrap_PositionList_next, METH_VARARGS, NULL},
	 { (char *)"PositionList_swigregister", PositionList_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TilePositionList", _wrap_new_TilePositionList, METH_VARARGS, NULL},
	 { (char *)"delete_TilePositionList", _wrap_delete_TilePositionList, METH_VARARGS, NULL},
	 { (char *)"TilePositionList___len__", _wrap_TilePositionList___len__, METH_VARARGS, NULL},
	 { (char *)"TilePositionList__size", _wrap_TilePositionList__size, METH_VARARGS, NULL},
	 { (char *)"TilePositionList___contains__", _wrap_TilePositionList___contains__, METH_VARARGS, NULL},
	 { (char *)"TilePositionList___iter__", _wrap_TilePositionList___iter__, METH_VARARGS, NULL},
	 { (char *)"TilePositionList_next", _wrap_TilePositionList_next, METH_VARARGS, NULL},
	 { (char *)"TilePositionList_swigregister", TilePositionList_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_UnitTypeList", _wrap_new_UnitTypeList, METH_VARARGS, NULL},
	 { (char *)"delete_UnitTypeList", _wrap_delete_UnitTypeList, METH_VARARGS, NULL},
	 { (char *)"UnitTypeList___len__", _wrap_UnitTypeList___len__, METH_VARARGS, NULL},
	 { (char *)"UnitTypeList__size", _wrap_UnitTypeList__size, METH_VARARGS, NULL},
	 { (char *)"UnitTypeList___contains__", _wrap_UnitTypeList___contains__, METH_VARARGS, NULL},
	 { (char *)"UnitTypeList___iter__", _wrap_UnitTypeList___iter__, METH_VARARGS, NULL},
	 { (char *)"UnitTypeList_next", _wrap_UnitTypeList_next, METH_VARARGS, NULL},
	 { (char *)"UnitTypeList_swigregister", UnitTypeList_swigregister, METH_VARARGS, NULL},
	 { (char *)"BWAPI_init", _wrap_BWAPI_init, METH_VARARGS, NULL},
	 { (char *)"PositionVector_iterator", _wrap_PositionVector_iterator, METH_VARARGS, NULL},
	 { (char *)"PositionVector___nonzero__", _wrap_PositionVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"PositionVector___bool__", _wrap_PositionVector___bool__, METH_VARARGS, NULL},
	 { (char *)"PositionVector___len__", _wrap_PositionVector___len__, METH_VARARGS, NULL},
	 { (char *)"PositionVector_pop", _wrap_PositionVector_pop, METH_VARARGS, NULL},
	 { (char *)"PositionVector___getslice__", _wrap_PositionVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"PositionVector___setslice__", _wrap_PositionVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"PositionVector___delslice__", _wrap_PositionVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"PositionVector___delitem__", _wrap_PositionVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"PositionVector___getitem__", _wrap_PositionVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"PositionVector___setitem__", _wrap_PositionVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"PositionVector_append", _wrap_PositionVector_append, METH_VARARGS, NULL},
	 { (char *)"PositionVector_empty", _wrap_PositionVector_empty, METH_VARARGS, NULL},
	 { (char *)"PositionVector_size", _wrap_PositionVector_size, METH_VARARGS, NULL},
	 { (char *)"PositionVector_clear", _wrap_PositionVector_clear, METH_VARARGS, NULL},
	 { (char *)"PositionVector_swap", _wrap_PositionVector_swap, METH_VARARGS, NULL},
	 { (char *)"PositionVector_get_allocator", _wrap_PositionVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"PositionVector_begin", _wrap_PositionVector_begin, METH_VARARGS, NULL},
	 { (char *)"PositionVector_end", _wrap_PositionVector_end, METH_VARARGS, NULL},
	 { (char *)"PositionVector_rbegin", _wrap_PositionVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"PositionVector_rend", _wrap_PositionVector_rend, METH_VARARGS, NULL},
	 { (char *)"PositionVector_pop_back", _wrap_PositionVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"PositionVector_erase", _wrap_PositionVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_PositionVector", _wrap_new_PositionVector, METH_VARARGS, NULL},
	 { (char *)"PositionVector_push_back", _wrap_PositionVector_push_back, METH_VARARGS, NULL},
	 { (char *)"PositionVector_front", _wrap_PositionVector_front, METH_VARARGS, NULL},
	 { (char *)"PositionVector_back", _wrap_PositionVector_back, METH_VARARGS, NULL},
	 { (char *)"PositionVector_assign", _wrap_PositionVector_assign, METH_VARARGS, NULL},
	 { (char *)"PositionVector_resize", _wrap_PositionVector_resize, METH_VARARGS, NULL},
	 { (char *)"PositionVector_insert", _wrap_PositionVector_insert, METH_VARARGS, NULL},
	 { (char *)"PositionVector_reserve", _wrap_PositionVector_reserve, METH_VARARGS, NULL},
	 { (char *)"PositionVector_capacity", _wrap_PositionVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_PositionVector", _wrap_delete_PositionVector, METH_VARARGS, NULL},
	 { (char *)"PositionVector_swigregister", PositionVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"TA_getStartLocation", _wrap_TA_getStartLocation, METH_VARARGS, NULL},
	 { (char *)"TA_getNearestBaseLocation", _wrap_TA_getNearestBaseLocation, METH_VARARGS, NULL},
	 { (char *)"readMap", _wrap_readMap, METH_VARARGS, NULL},
	 { (char *)"analyze", _wrap_analyze, METH_VARARGS, NULL},
	 { (char *)"getRegions", _wrap_getRegions, METH_VARARGS, NULL},
	 { (char *)"getChokepoints", _wrap_getChokepoints, METH_VARARGS, NULL},
	 { (char *)"getBaseLocations", _wrap_getBaseLocations, METH_VARARGS, NULL},
	 { (char *)"getStartLocations", _wrap_getStartLocations, METH_VARARGS, NULL},
	 { (char *)"getRegion", _wrap_getRegion, METH_VARARGS, NULL},
	 { (char *)"getNearestChokepoint", _wrap_getNearestChokepoint, METH_VARARGS, NULL},
	 { (char *)"getNearestUnwalkablePosition", _wrap_getNearestUnwalkablePosition, METH_VARARGS, NULL},
	 { (char *)"isConnected", _wrap_isConnected, METH_VARARGS, NULL},
	 { (char *)"getGroundDistance", _wrap_getGroundDistance, METH_VARARGS, NULL},
	 { (char *)"getNearestTilePosition", _wrap_getNearestTilePosition, METH_VARARGS, NULL},
	 { (char *)"getGroundDistances", _wrap_getGroundDistances, METH_VARARGS, NULL},
	 { (char *)"getGroundDistanceMap", _wrap_getGroundDistanceMap, METH_VARARGS, NULL},
	 { (char *)"getGroundWalkDistanceMap", _wrap_getGroundWalkDistanceMap, METH_VARARGS, NULL},
	 { (char *)"getShortestPath", _wrap_getShortestPath, METH_VARARGS, NULL},
	 { (char *)"TA_getRegions", _wrap_TA_getRegions, METH_VARARGS, NULL},
	 { (char *)"TA_getChokepoints", _wrap_TA_getChokepoints, METH_VARARGS, NULL},
	 { (char *)"TA_getBaseLocations", _wrap_TA_getBaseLocations, METH_VARARGS, NULL},
	 { (char *)"TA_getStartLocations", _wrap_TA_getStartLocations, METH_VARARGS, NULL},
	 { (char *)"getGame", _wrap_getGame, METH_VARARGS, NULL},
	 { (char *)"new_AIModule", _wrap_new_AIModule, METH_VARARGS, NULL},
	 { (char *)"delete_AIModule", _wrap_delete_AIModule, METH_VARARGS, NULL},
	 { (char *)"AIModule_onStart", _wrap_AIModule_onStart, METH_VARARGS, NULL},
	 { (char *)"AIModule_onEnd", _wrap_AIModule_onEnd, METH_VARARGS, NULL},
	 { (char *)"AIModule_onFrame", _wrap_AIModule_onFrame, METH_VARARGS, NULL},
	 { (char *)"AIModule_onSendText", _wrap_AIModule_onSendText, METH_VARARGS, NULL},
	 { (char *)"AIModule_onReceiveText", _wrap_AIModule_onReceiveText, METH_VARARGS, NULL},
	 { (char *)"AIModule_onPlayerLeft", _wrap_AIModule_onPlayerLeft, METH_VARARGS, NULL},
	 { (char *)"AIModule_onNukeDetect", _wrap_AIModule_onNukeDetect, METH_VARARGS, NULL},
	 { (char *)"AIModule_onUnitDiscover", _wrap_AIModule_onUnitDiscover, METH_VARARGS, NULL},
	 { (char *)"AIModule_onUnitEvade", _wrap_AIModule_onUnitEvade, METH_VARARGS, NULL},
	 { (char *)"AIModule_onUnitShow", _wrap_AIModule_onUnitShow, METH_VARARGS, NULL},
	 { (char *)"AIModule_onUnitHide", _wrap_AIModule_onUnitHide, METH_VARARGS, NULL},
	 { (char *)"AIModule_onUnitCreate", _wrap_AIModule_onUnitCreate, METH_VARARGS, NULL},
	 { (char *)"AIModule_onUnitDestroy", _wrap_AIModule_onUnitDestroy, METH_VARARGS, NULL},
	 { (char *)"AIModule_onUnitMorph", _wrap_AIModule_onUnitMorph, METH_VARARGS, NULL},
	 { (char *)"AIModule_onUnitRenegade", _wrap_AIModule_onUnitRenegade, METH_VARARGS, NULL},
	 { (char *)"AIModule_onSaveGame", _wrap_AIModule_onSaveGame, METH_VARARGS, NULL},
	 { (char *)"AIModule_swigregister", AIModule_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BitmapProxy", _wrap_new_BitmapProxy, METH_VARARGS, NULL},
	 { (char *)"delete_BitmapProxy", _wrap_delete_BitmapProxy, METH_VARARGS, NULL},
	 { (char *)"BitmapProxy_swigregister", BitmapProxy_swigregister, METH_VARARGS, NULL},
	 { (char *)"Bitmap_getWidth", _wrap_Bitmap_getWidth, METH_VARARGS, NULL},
	 { (char *)"Bitmap_getHeight", _wrap_Bitmap_getHeight, METH_VARARGS, NULL},
	 { (char *)"new_Bitmap", _wrap_new_Bitmap, METH_VARARGS, NULL},
	 { (char *)"delete_Bitmap", _wrap_delete_Bitmap, METH_VARARGS, NULL},
	 { (char *)"Bitmap_swigregister", Bitmap_swigregister, METH_VARARGS, NULL},
	 { (char *)"Bullet_getID", _wrap_Bullet_getID, METH_VARARGS, NULL},
	 { (char *)"Bullet_getPlayer", _wrap_Bullet_getPlayer, METH_VARARGS, NULL},
	 { (char *)"Bullet_getType", _wrap_Bullet_getType, METH_VARARGS, NULL},
	 { (char *)"Bullet_getSource", _wrap_Bullet_getSource, METH_VARARGS, NULL},
	 { (char *)"Bullet_getPosition", _wrap_Bullet_getPosition, METH_VARARGS, NULL},
	 { (char *)"Bullet_getAngle", _wrap_Bullet_getAngle, METH_VARARGS, NULL},
	 { (char *)"Bullet_getVelocityX", _wrap_Bullet_getVelocityX, METH_VARARGS, NULL},
	 { (char *)"Bullet_getVelocityY", _wrap_Bullet_getVelocityY, METH_VARARGS, NULL},
	 { (char *)"Bullet_getTarget", _wrap_Bullet_getTarget, METH_VARARGS, NULL},
	 { (char *)"Bullet_getTargetPosition", _wrap_Bullet_getTargetPosition, METH_VARARGS, NULL},
	 { (char *)"Bullet_getRemoveTimer", _wrap_Bullet_getRemoveTimer, METH_VARARGS, NULL},
	 { (char *)"Bullet_exists", _wrap_Bullet_exists, METH_VARARGS, NULL},
	 { (char *)"Bullet_isVisible", _wrap_Bullet_isVisible, METH_VARARGS, NULL},
	 { (char *)"delete_Bullet", _wrap_delete_Bullet, METH_VARARGS, NULL},
	 { (char *)"Bullet_swigregister", Bullet_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BulletType", _wrap_new_BulletType, METH_VARARGS, NULL},
	 { (char *)"BulletType___eq__", _wrap_BulletType___eq__, METH_VARARGS, NULL},
	 { (char *)"BulletType___ne__", _wrap_BulletType___ne__, METH_VARARGS, NULL},
	 { (char *)"BulletType___lt__", _wrap_BulletType___lt__, METH_VARARGS, NULL},
	 { (char *)"BulletType_getID", _wrap_BulletType_getID, METH_VARARGS, NULL},
	 { (char *)"BulletType_getName", _wrap_BulletType_getName, METH_VARARGS, NULL},
	 { (char *)"delete_BulletType", _wrap_delete_BulletType, METH_VARARGS, NULL},
	 { (char *)"BulletType_swigregister", BulletType_swigregister, METH_VARARGS, NULL},
	 { (char *)"getBulletType", _wrap_getBulletType, METH_VARARGS, NULL},
	 { (char *)"allBulletTypes", _wrap_allBulletTypes, METH_VARARGS, NULL},
	 { (char *)"new_Color", _wrap_new_Color, METH_VARARGS, NULL},
	 { (char *)"Color_getID", _wrap_Color_getID, METH_VARARGS, NULL},
	 { (char *)"Color_red", _wrap_Color_red, METH_VARARGS, NULL},
	 { (char *)"Color_green", _wrap_Color_green, METH_VARARGS, NULL},
	 { (char *)"Color_blue", _wrap_Color_blue, METH_VARARGS, NULL},
	 { (char *)"Color___eq__", _wrap_Color___eq__, METH_VARARGS, NULL},
	 { (char *)"Color___ne__", _wrap_Color___ne__, METH_VARARGS, NULL},
	 { (char *)"Color___lt__", _wrap_Color___lt__, METH_VARARGS, NULL},
	 { (char *)"delete_Color", _wrap_delete_Color, METH_VARARGS, NULL},
	 { (char *)"Color_swigregister", Color_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DamageType", _wrap_new_DamageType, METH_VARARGS, NULL},
	 { (char *)"DamageType___eq__", _wrap_DamageType___eq__, METH_VARARGS, NULL},
	 { (char *)"DamageType___ne__", _wrap_DamageType___ne__, METH_VARARGS, NULL},
	 { (char *)"DamageType___lt__", _wrap_DamageType___lt__, METH_VARARGS, NULL},
	 { (char *)"DamageType_getID", _wrap_DamageType_getID, METH_VARARGS, NULL},
	 { (char *)"DamageType_getName", _wrap_DamageType_getName, METH_VARARGS, NULL},
	 { (char *)"delete_DamageType", _wrap_delete_DamageType, METH_VARARGS, NULL},
	 { (char *)"DamageType_swigregister", DamageType_swigregister, METH_VARARGS, NULL},
	 { (char *)"getDamageType", _wrap_getDamageType, METH_VARARGS, NULL},
	 { (char *)"allDamageTypes", _wrap_allDamageTypes, METH_VARARGS, NULL},
	 { (char *)"new_Error", _wrap_new_Error, METH_VARARGS, NULL},
	 { (char *)"Error___eq__", _wrap_Error___eq__, METH_VARARGS, NULL},
	 { (char *)"Error___ne__", _wrap_Error___ne__, METH_VARARGS, NULL},
	 { (char *)"Error___lt__", _wrap_Error___lt__, METH_VARARGS, NULL},
	 { (char *)"Error_getID", _wrap_Error_getID, METH_VARARGS, NULL},
	 { (char *)"Error_toString", _wrap_Error_toString, METH_VARARGS, NULL},
	 { (char *)"delete_Error", _wrap_delete_Error, METH_VARARGS, NULL},
	 { (char *)"Error_swigregister", Error_swigregister, METH_VARARGS, NULL},
	 { (char *)"getError", _wrap_getError, METH_VARARGS, NULL},
	 { (char *)"allErrors", _wrap_allErrors, METH_VARARGS, NULL},
	 { (char *)"new_Event", _wrap_new_Event, METH_VARARGS, NULL},
	 { (char *)"Event___eq__", _wrap_Event___eq__, METH_VARARGS, NULL},
	 { (char *)"Event_MatchStart", _wrap_Event_MatchStart, METH_VARARGS, NULL},
	 { (char *)"Event_MatchEnd", _wrap_Event_MatchEnd, METH_VARARGS, NULL},
	 { (char *)"Event_MatchFrame", _wrap_Event_MatchFrame, METH_VARARGS, NULL},
	 { (char *)"Event_MenuFrame", _wrap_Event_MenuFrame, METH_VARARGS, NULL},
	 { (char *)"Event_SendText", _wrap_Event_SendText, METH_VARARGS, NULL},
	 { (char *)"Event_ReceiveText", _wrap_Event_ReceiveText, METH_VARARGS, NULL},
	 { (char *)"Event_PlayerLeft", _wrap_Event_PlayerLeft, METH_VARARGS, NULL},
	 { (char *)"Event_NukeDetect", _wrap_Event_NukeDetect, METH_VARARGS, NULL},
	 { (char *)"Event_UnitDiscover", _wrap_Event_UnitDiscover, METH_VARARGS, NULL},
	 { (char *)"Event_UnitEvade", _wrap_Event_UnitEvade, METH_VARARGS, NULL},
	 { (char *)"Event_UnitShow", _wrap_Event_UnitShow, METH_VARARGS, NULL},
	 { (char *)"Event_UnitHide", _wrap_Event_UnitHide, METH_VARARGS, NULL},
	 { (char *)"Event_UnitCreate", _wrap_Event_UnitCreate, METH_VARARGS, NULL},
	 { (char *)"Event_UnitDestroy", _wrap_Event_UnitDestroy, METH_VARARGS, NULL},
	 { (char *)"Event_UnitMorph", _wrap_Event_UnitMorph, METH_VARARGS, NULL},
	 { (char *)"Event_UnitRenegade", _wrap_Event_UnitRenegade, METH_VARARGS, NULL},
	 { (char *)"Event_SaveGame", _wrap_Event_SaveGame, METH_VARARGS, NULL},
	 { (char *)"Event_type_set", _wrap_Event_type_set, METH_VARARGS, NULL},
	 { (char *)"Event_type_get", _wrap_Event_type_get, METH_VARARGS, NULL},
	 { (char *)"Event_position_set", _wrap_Event_position_set, METH_VARARGS, NULL},
	 { (char *)"Event_position_get", _wrap_Event_position_get, METH_VARARGS, NULL},
	 { (char *)"Event_text_set", _wrap_Event_text_set, METH_VARARGS, NULL},
	 { (char *)"Event_text_get", _wrap_Event_text_get, METH_VARARGS, NULL},
	 { (char *)"Event_unit_set", _wrap_Event_unit_set, METH_VARARGS, NULL},
	 { (char *)"Event_unit_get", _wrap_Event_unit_get, METH_VARARGS, NULL},
	 { (char *)"Event_player_set", _wrap_Event_player_set, METH_VARARGS, NULL},
	 { (char *)"Event_player_get", _wrap_Event_player_get, METH_VARARGS, NULL},
	 { (char *)"Event_isWinner_set", _wrap_Event_isWinner_set, METH_VARARGS, NULL},
	 { (char *)"Event_isWinner_get", _wrap_Event_isWinner_get, METH_VARARGS, NULL},
	 { (char *)"delete_Event", _wrap_delete_Event, METH_VARARGS, NULL},
	 { (char *)"Event_swigregister", Event_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ExplosionType", _wrap_new_ExplosionType, METH_VARARGS, NULL},
	 { (char *)"ExplosionType___eq__", _wrap_ExplosionType___eq__, METH_VARARGS, NULL},
	 { (char *)"ExplosionType___ne__", _wrap_ExplosionType___ne__, METH_VARARGS, NULL},
	 { (char *)"ExplosionType___lt__", _wrap_ExplosionType___lt__, METH_VARARGS, NULL},
	 { (char *)"ExplosionType_getID", _wrap_ExplosionType_getID, METH_VARARGS, NULL},
	 { (char *)"ExplosionType_getName", _wrap_ExplosionType_getName, METH_VARARGS, NULL},
	 { (char *)"delete_ExplosionType", _wrap_delete_ExplosionType, METH_VARARGS, NULL},
	 { (char *)"ExplosionType_swigregister", ExplosionType_swigregister, METH_VARARGS, NULL},
	 { (char *)"getExplosionType", _wrap_getExplosionType, METH_VARARGS, NULL},
	 { (char *)"allExplosionTypes", _wrap_allExplosionTypes, METH_VARARGS, NULL},
	 { (char *)"Force_getID", _wrap_Force_getID, METH_VARARGS, NULL},
	 { (char *)"Force_getName", _wrap_Force_getName, METH_VARARGS, NULL},
	 { (char *)"Force_getPlayers", _wrap_Force_getPlayers, METH_VARARGS, NULL},
	 { (char *)"delete_Force", _wrap_delete_Force, METH_VARARGS, NULL},
	 { (char *)"Force_swigregister", Force_swigregister, METH_VARARGS, NULL},
	 { (char *)"Game_getBullets", _wrap_Game_getBullets, METH_VARARGS, NULL},
	 { (char *)"Game_getNukeDots", _wrap_Game_getNukeDots, METH_VARARGS, NULL},
	 { (char *)"Game_getEvents", _wrap_Game_getEvents, METH_VARARGS, NULL},
	 { (char *)"Game_getForce", _wrap_Game_getForce, METH_VARARGS, NULL},
	 { (char *)"Game_getPlayer", _wrap_Game_getPlayer, METH_VARARGS, NULL},
	 { (char *)"Game_getUnit", _wrap_Game_getUnit, METH_VARARGS, NULL},
	 { (char *)"Game_indexToUnit", _wrap_Game_indexToUnit, METH_VARARGS, NULL},
	 { (char *)"Game_getGameType", _wrap_Game_getGameType, METH_VARARGS, NULL},
	 { (char *)"Game_getLatency", _wrap_Game_getLatency, METH_VARARGS, NULL},
	 { (char *)"Game_getFrameCount", _wrap_Game_getFrameCount, METH_VARARGS, NULL},
	 { (char *)"Game_getFPS", _wrap_Game_getFPS, METH_VARARGS, NULL},
	 { (char *)"Game_getAverageFPS", _wrap_Game_getAverageFPS, METH_VARARGS, NULL},
	 { (char *)"Game_getMousePosition", _wrap_Game_getMousePosition, METH_VARARGS, NULL},
	 { (char *)"Game_getMouseState", _wrap_Game_getMouseState, METH_VARARGS, NULL},
	 { (char *)"Game_getKeyState", _wrap_Game_getKeyState, METH_VARARGS, NULL},
	 { (char *)"Game_getScreenPosition", _wrap_Game_getScreenPosition, METH_VARARGS, NULL},
	 { (char *)"Game_setScreenPosition", _wrap_Game_setScreenPosition, METH_VARARGS, NULL},
	 { (char *)"Game_pingMinimap", _wrap_Game_pingMinimap, METH_VARARGS, NULL},
	 { (char *)"Game_isFlagEnabled", _wrap_Game_isFlagEnabled, METH_VARARGS, NULL},
	 { (char *)"Game_enableFlag", _wrap_Game_enableFlag, METH_VARARGS, NULL},
	 { (char *)"Game_getLastError", _wrap_Game_getLastError, METH_VARARGS, NULL},
	 { (char *)"Game_setLastError", _wrap_Game_setLastError, METH_VARARGS, NULL},
	 { (char *)"Game_mapWidth", _wrap_Game_mapWidth, METH_VARARGS, NULL},
	 { (char *)"Game_mapHeight", _wrap_Game_mapHeight, METH_VARARGS, NULL},
	 { (char *)"Game_mapFileName", _wrap_Game_mapFileName, METH_VARARGS, NULL},
	 { (char *)"Game_mapPathName", _wrap_Game_mapPathName, METH_VARARGS, NULL},
	 { (char *)"Game_mapName", _wrap_Game_mapName, METH_VARARGS, NULL},
	 { (char *)"Game_mapHash", _wrap_Game_mapHash, METH_VARARGS, NULL},
	 { (char *)"Game_isWalkable", _wrap_Game_isWalkable, METH_VARARGS, NULL},
	 { (char *)"Game_getGroundHeight", _wrap_Game_getGroundHeight, METH_VARARGS, NULL},
	 { (char *)"Game_isBuildable", _wrap_Game_isBuildable, METH_VARARGS, NULL},
	 { (char *)"Game_isVisible", _wrap_Game_isVisible, METH_VARARGS, NULL},
	 { (char *)"Game_isExplored", _wrap_Game_isExplored, METH_VARARGS, NULL},
	 { (char *)"Game_hasCreep", _wrap_Game_hasCreep, METH_VARARGS, NULL},
	 { (char *)"Game_hasPower", _wrap_Game_hasPower, METH_VARARGS, NULL},
	 { (char *)"Game_canMake", _wrap_Game_canMake, METH_VARARGS, NULL},
	 { (char *)"Game_canResearch", _wrap_Game_canResearch, METH_VARARGS, NULL},
	 { (char *)"Game_canUpgrade", _wrap_Game_canUpgrade, METH_VARARGS, NULL},
	 { (char *)"Game_printf", _wrap_Game_printf, METH_VARARGS, NULL},
	 { (char *)"Game_sendText", _wrap_Game_sendText, METH_VARARGS, NULL},
	 { (char *)"Game_sendTextEx", _wrap_Game_sendTextEx, METH_VARARGS, NULL},
	 { (char *)"Game_changeRace", _wrap_Game_changeRace, METH_VARARGS, NULL},
	 { (char *)"Game_isInGame", _wrap_Game_isInGame, METH_VARARGS, NULL},
	 { (char *)"Game_isMultiplayer", _wrap_Game_isMultiplayer, METH_VARARGS, NULL},
	 { (char *)"Game_isBattleNet", _wrap_Game_isBattleNet, METH_VARARGS, NULL},
	 { (char *)"Game_isPaused", _wrap_Game_isPaused, METH_VARARGS, NULL},
	 { (char *)"Game_isReplay", _wrap_Game_isReplay, METH_VARARGS, NULL},
	 { (char *)"Game_startGame", _wrap_Game_startGame, METH_VARARGS, NULL},
	 { (char *)"Game_pauseGame", _wrap_Game_pauseGame, METH_VARARGS, NULL},
	 { (char *)"Game_resumeGame", _wrap_Game_resumeGame, METH_VARARGS, NULL},
	 { (char *)"Game_leaveGame", _wrap_Game_leaveGame, METH_VARARGS, NULL},
	 { (char *)"Game_restartGame", _wrap_Game_restartGame, METH_VARARGS, NULL},
	 { (char *)"Game_setLocalSpeed", _wrap_Game_setLocalSpeed, METH_VARARGS, NULL},
	 { (char *)"Game_issueCommand", _wrap_Game_issueCommand, METH_VARARGS, NULL},
	 { (char *)"Game_self", _wrap_Game_self, METH_VARARGS, NULL},
	 { (char *)"Game_enemy", _wrap_Game_enemy, METH_VARARGS, NULL},
	 { (char *)"Game_setTextSize", _wrap_Game_setTextSize, METH_VARARGS, NULL},
	 { (char *)"Game_drawText", _wrap_Game_drawText, METH_VARARGS, NULL},
	 { (char *)"Game_drawTextMap", _wrap_Game_drawTextMap, METH_VARARGS, NULL},
	 { (char *)"Game_drawTextMouse", _wrap_Game_drawTextMouse, METH_VARARGS, NULL},
	 { (char *)"Game_drawTextScreen", _wrap_Game_drawTextScreen, METH_VARARGS, NULL},
	 { (char *)"Game_drawBox", _wrap_Game_drawBox, METH_VARARGS, NULL},
	 { (char *)"Game_drawBoxMap", _wrap_Game_drawBoxMap, METH_VARARGS, NULL},
	 { (char *)"Game_drawBoxMouse", _wrap_Game_drawBoxMouse, METH_VARARGS, NULL},
	 { (char *)"Game_drawBoxScreen", _wrap_Game_drawBoxScreen, METH_VARARGS, NULL},
	 { (char *)"Game_drawTriangle", _wrap_Game_drawTriangle, METH_VARARGS, NULL},
	 { (char *)"Game_drawTriangleMap", _wrap_Game_drawTriangleMap, METH_VARARGS, NULL},
	 { (char *)"Game_drawTriangleMouse", _wrap_Game_drawTriangleMouse, METH_VARARGS, NULL},
	 { (char *)"Game_drawTriangleScreen", _wrap_Game_drawTriangleScreen, METH_VARARGS, NULL},
	 { (char *)"Game_drawCircle", _wrap_Game_drawCircle, METH_VARARGS, NULL},
	 { (char *)"Game_drawCircleMap", _wrap_Game_drawCircleMap, METH_VARARGS, NULL},
	 { (char *)"Game_drawCircleMouse", _wrap_Game_drawCircleMouse, METH_VARARGS, NULL},
	 { (char *)"Game_drawCircleScreen", _wrap_Game_drawCircleScreen, METH_VARARGS, NULL},
	 { (char *)"Game_drawEllipse", _wrap_Game_drawEllipse, METH_VARARGS, NULL},
	 { (char *)"Game_drawEllipseMap", _wrap_Game_drawEllipseMap, METH_VARARGS, NULL},
	 { (char *)"Game_drawEllipseMouse", _wrap_Game_drawEllipseMouse, METH_VARARGS, NULL},
	 { (char *)"Game_drawEllipseScreen", _wrap_Game_drawEllipseScreen, METH_VARARGS, NULL},
	 { (char *)"Game_drawDot", _wrap_Game_drawDot, METH_VARARGS, NULL},
	 { (char *)"Game_drawDotMap", _wrap_Game_drawDotMap, METH_VARARGS, NULL},
	 { (char *)"Game_drawDotMouse", _wrap_Game_drawDotMouse, METH_VARARGS, NULL},
	 { (char *)"Game_drawDotScreen", _wrap_Game_drawDotScreen, METH_VARARGS, NULL},
	 { (char *)"Game_drawLine", _wrap_Game_drawLine, METH_VARARGS, NULL},
	 { (char *)"Game_drawLineMap", _wrap_Game_drawLineMap, METH_VARARGS, NULL},
	 { (char *)"Game_drawLineMouse", _wrap_Game_drawLineMouse, METH_VARARGS, NULL},
	 { (char *)"Game_drawLineScreen", _wrap_Game_drawLineScreen, METH_VARARGS, NULL},
	 { (char *)"Game_getScreenBuffer", _wrap_Game_getScreenBuffer, METH_VARARGS, NULL},
	 { (char *)"Game_getLatencyFrames", _wrap_Game_getLatencyFrames, METH_VARARGS, NULL},
	 { (char *)"Game_getLatencyTime", _wrap_Game_getLatencyTime, METH_VARARGS, NULL},
	 { (char *)"Game_getRemainingLatencyFrames", _wrap_Game_getRemainingLatencyFrames, METH_VARARGS, NULL},
	 { (char *)"Game_getRemainingLatencyTime", _wrap_Game_getRemainingLatencyTime, METH_VARARGS, NULL},
	 { (char *)"Game_getRevision", _wrap_Game_getRevision, METH_VARARGS, NULL},
	 { (char *)"Game_isDebug", _wrap_Game_isDebug, METH_VARARGS, NULL},
	 { (char *)"Game_isLatComEnabled", _wrap_Game_isLatComEnabled, METH_VARARGS, NULL},
	 { (char *)"Game_setLatCom", _wrap_Game_setLatCom, METH_VARARGS, NULL},
	 { (char *)"Game_getReplayFrameCount", _wrap_Game_getReplayFrameCount, METH_VARARGS, NULL},
	 { (char *)"Game_setGUI", _wrap_Game_setGUI, METH_VARARGS, NULL},
	 { (char *)"Game_getInstanceNumber", _wrap_Game_getInstanceNumber, METH_VARARGS, NULL},
	 { (char *)"Game_getAllUnits", _wrap_Game_getAllUnits, METH_VARARGS, NULL},
	 { (char *)"Game_getMinerals", _wrap_Game_getMinerals, METH_VARARGS, NULL},
	 { (char *)"Game_getGeysers", _wrap_Game_getGeysers, METH_VARARGS, NULL},
	 { (char *)"Game_getNeutralUnits", _wrap_Game_getNeutralUnits, METH_VARARGS, NULL},
	 { (char *)"Game_getStaticMinerals", _wrap_Game_getStaticMinerals, METH_VARARGS, NULL},
	 { (char *)"Game_getStaticGeysers", _wrap_Game_getStaticGeysers, METH_VARARGS, NULL},
	 { (char *)"Game_getStaticNeutralUnits", _wrap_Game_getStaticNeutralUnits, METH_VARARGS, NULL},
	 { (char *)"Game_getSelectedUnits", _wrap_Game_getSelectedUnits, METH_VARARGS, NULL},
	 { (char *)"Game_getPlayers", _wrap_Game_getPlayers, METH_VARARGS, NULL},
	 { (char *)"Game_getForces", _wrap_Game_getForces, METH_VARARGS, NULL},
	 { (char *)"Game_unitsOnTile", _wrap_Game_unitsOnTile, METH_VARARGS, NULL},
	 { (char *)"Game_getStartLocations", _wrap_Game_getStartLocations, METH_VARARGS, NULL},
	 { (char *)"Game_canBuildHere", _wrap_Game_canBuildHere, METH_VARARGS, NULL},
	 { (char *)"delete_Game", _wrap_delete_Game, METH_VARARGS, NULL},
	 { (char *)"Game_swigregister", Game_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GameType", _wrap_new_GameType, METH_VARARGS, NULL},
	 { (char *)"GameType___eq__", _wrap_GameType___eq__, METH_VARARGS, NULL},
	 { (char *)"GameType___ne__", _wrap_GameType___ne__, METH_VARARGS, NULL},
	 { (char *)"GameType___lt__", _wrap_GameType___lt__, METH_VARARGS, NULL},
	 { (char *)"GameType_getID", _wrap_GameType_getID, METH_VARARGS, NULL},
	 { (char *)"GameType_getName", _wrap_GameType_getName, METH_VARARGS, NULL},
	 { (char *)"delete_GameType", _wrap_delete_GameType, METH_VARARGS, NULL},
	 { (char *)"GameType_swigregister", GameType_swigregister, METH_VARARGS, NULL},
	 { (char *)"getGameType", _wrap_getGameType, METH_VARARGS, NULL},
	 { (char *)"allGameTypes", _wrap_allGameTypes, METH_VARARGS, NULL},
	 { (char *)"new_Order", _wrap_new_Order, METH_VARARGS, NULL},
	 { (char *)"Order___eq__", _wrap_Order___eq__, METH_VARARGS, NULL},
	 { (char *)"Order___ne__", _wrap_Order___ne__, METH_VARARGS, NULL},
	 { (char *)"Order___lt__", _wrap_Order___lt__, METH_VARARGS, NULL},
	 { (char *)"Order_getID", _wrap_Order_getID, METH_VARARGS, NULL},
	 { (char *)"Order_getName", _wrap_Order_getName, METH_VARARGS, NULL},
	 { (char *)"delete_Order", _wrap_delete_Order, METH_VARARGS, NULL},
	 { (char *)"Order_swigregister", Order_swigregister, METH_VARARGS, NULL},
	 { (char *)"getOrder", _wrap_getOrder, METH_VARARGS, NULL},
	 { (char *)"allOrders", _wrap_allOrders, METH_VARARGS, NULL},
	 { (char *)"Player_getID", _wrap_Player_getID, METH_VARARGS, NULL},
	 { (char *)"Player_getName", _wrap_Player_getName, METH_VARARGS, NULL},
	 { (char *)"Player_getType", _wrap_Player_getType, METH_VARARGS, NULL},
	 { (char *)"Player_getForce", _wrap_Player_getForce, METH_VARARGS, NULL},
	 { (char *)"Player_isAlly", _wrap_Player_isAlly, METH_VARARGS, NULL},
	 { (char *)"Player_isEnemy", _wrap_Player_isEnemy, METH_VARARGS, NULL},
	 { (char *)"Player_isNeutral", _wrap_Player_isNeutral, METH_VARARGS, NULL},
	 { (char *)"Player_isVictorious", _wrap_Player_isVictorious, METH_VARARGS, NULL},
	 { (char *)"Player_isDefeated", _wrap_Player_isDefeated, METH_VARARGS, NULL},
	 { (char *)"Player_leftGame", _wrap_Player_leftGame, METH_VARARGS, NULL},
	 { (char *)"Player_minerals", _wrap_Player_minerals, METH_VARARGS, NULL},
	 { (char *)"Player_gas", _wrap_Player_gas, METH_VARARGS, NULL},
	 { (char *)"Player_cumulativeMinerals", _wrap_Player_cumulativeMinerals, METH_VARARGS, NULL},
	 { (char *)"Player_cumulativeGas", _wrap_Player_cumulativeGas, METH_VARARGS, NULL},
	 { (char *)"Player_supplyTotal", _wrap_Player_supplyTotal, METH_VARARGS, NULL},
	 { (char *)"Player_supplyUsed", _wrap_Player_supplyUsed, METH_VARARGS, NULL},
	 { (char *)"Player_allUnitCount", _wrap_Player_allUnitCount, METH_VARARGS, NULL},
	 { (char *)"Player_completedUnitCount", _wrap_Player_completedUnitCount, METH_VARARGS, NULL},
	 { (char *)"Player_incompleteUnitCount", _wrap_Player_incompleteUnitCount, METH_VARARGS, NULL},
	 { (char *)"Player_deadUnitCount", _wrap_Player_deadUnitCount, METH_VARARGS, NULL},
	 { (char *)"Player_killedUnitCount", _wrap_Player_killedUnitCount, METH_VARARGS, NULL},
	 { (char *)"Player_getUpgradeLevel", _wrap_Player_getUpgradeLevel, METH_VARARGS, NULL},
	 { (char *)"Player_hasResearched", _wrap_Player_hasResearched, METH_VARARGS, NULL},
	 { (char *)"Player_isResearching", _wrap_Player_isResearching, METH_VARARGS, NULL},
	 { (char *)"Player_isUpgrading", _wrap_Player_isUpgrading, METH_VARARGS, NULL},
	 { (char *)"Player_getColor", _wrap_Player_getColor, METH_VARARGS, NULL},
	 { (char *)"Player_getTextColor", _wrap_Player_getTextColor, METH_VARARGS, NULL},
	 { (char *)"Player_maxEnergy", _wrap_Player_maxEnergy, METH_VARARGS, NULL},
	 { (char *)"Player_topSpeed", _wrap_Player_topSpeed, METH_VARARGS, NULL},
	 { (char *)"Player_groundWeaponMaxRange", _wrap_Player_groundWeaponMaxRange, METH_VARARGS, NULL},
	 { (char *)"Player_airWeaponMaxRange", _wrap_Player_airWeaponMaxRange, METH_VARARGS, NULL},
	 { (char *)"Player_sightRange", _wrap_Player_sightRange, METH_VARARGS, NULL},
	 { (char *)"Player_groundWeaponDamageCooldown", _wrap_Player_groundWeaponDamageCooldown, METH_VARARGS, NULL},
	 { (char *)"Player_armor", _wrap_Player_armor, METH_VARARGS, NULL},
	 { (char *)"Player_getUnits", _wrap_Player_getUnits, METH_VARARGS, NULL},
	 { (char *)"Player_getRace", _wrap_Player_getRace, METH_VARARGS, NULL},
	 { (char *)"Player_getStartLocation", _wrap_Player_getStartLocation, METH_VARARGS, NULL},
	 { (char *)"delete_Player", _wrap_delete_Player, METH_VARARGS, NULL},
	 { (char *)"Player_swigregister", Player_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PlayerType", _wrap_new_PlayerType, METH_VARARGS, NULL},
	 { (char *)"PlayerType___eq__", _wrap_PlayerType___eq__, METH_VARARGS, NULL},
	 { (char *)"PlayerType___ne__", _wrap_PlayerType___ne__, METH_VARARGS, NULL},
	 { (char *)"PlayerType___lt__", _wrap_PlayerType___lt__, METH_VARARGS, NULL},
	 { (char *)"PlayerType_getID", _wrap_PlayerType_getID, METH_VARARGS, NULL},
	 { (char *)"PlayerType_getName", _wrap_PlayerType_getName, METH_VARARGS, NULL},
	 { (char *)"delete_PlayerType", _wrap_delete_PlayerType, METH_VARARGS, NULL},
	 { (char *)"PlayerType_swigregister", PlayerType_swigregister, METH_VARARGS, NULL},
	 { (char *)"getPlayerType", _wrap_getPlayerType, METH_VARARGS, NULL},
	 { (char *)"allPlayerTypes", _wrap_allPlayerTypes, METH_VARARGS, NULL},
	 { (char *)"new_Position", _wrap_new_Position, METH_VARARGS, NULL},
	 { (char *)"Position___eq__", _wrap_Position___eq__, METH_VARARGS, NULL},
	 { (char *)"Position___ne__", _wrap_Position___ne__, METH_VARARGS, NULL},
	 { (char *)"Position___lt__", _wrap_Position___lt__, METH_VARARGS, NULL},
	 { (char *)"Position_isValid", _wrap_Position_isValid, METH_VARARGS, NULL},
	 { (char *)"Position___add__", _wrap_Position___add__, METH_VARARGS, NULL},
	 { (char *)"Position___sub__", _wrap_Position___sub__, METH_VARARGS, NULL},
	 { (char *)"Position_makeValid", _wrap_Position_makeValid, METH_VARARGS, NULL},
	 { (char *)"Position___iadd__", _wrap_Position___iadd__, METH_VARARGS, NULL},
	 { (char *)"Position___isub__", _wrap_Position___isub__, METH_VARARGS, NULL},
	 { (char *)"Position_getDistance", _wrap_Position_getDistance, METH_VARARGS, NULL},
	 { (char *)"Position_getApproxDistance", _wrap_Position_getApproxDistance, METH_VARARGS, NULL},
	 { (char *)"Position_getLength", _wrap_Position_getLength, METH_VARARGS, NULL},
	 { (char *)"Position_getX", _wrap_Position_getX, METH_VARARGS, NULL},
	 { (char *)"Position_getY", _wrap_Position_getY, METH_VARARGS, NULL},
	 { (char *)"delete_Position", _wrap_delete_Position, METH_VARARGS, NULL},
	 { (char *)"Position_swigregister", Position_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Race", _wrap_new_Race, METH_VARARGS, NULL},
	 { (char *)"Race___eq__", _wrap_Race___eq__, METH_VARARGS, NULL},
	 { (char *)"Race___ne__", _wrap_Race___ne__, METH_VARARGS, NULL},
	 { (char *)"Race___lt__", _wrap_Race___lt__, METH_VARARGS, NULL},
	 { (char *)"Race_getID", _wrap_Race_getID, METH_VARARGS, NULL},
	 { (char *)"Race_getName", _wrap_Race_getName, METH_VARARGS, NULL},
	 { (char *)"Race_getWorker", _wrap_Race_getWorker, METH_VARARGS, NULL},
	 { (char *)"Race_getCenter", _wrap_Race_getCenter, METH_VARARGS, NULL},
	 { (char *)"Race_getRefinery", _wrap_Race_getRefinery, METH_VARARGS, NULL},
	 { (char *)"Race_getTransport", _wrap_Race_getTransport, METH_VARARGS, NULL},
	 { (char *)"Race_getSupplyProvider", _wrap_Race_getSupplyProvider, METH_VARARGS, NULL},
	 { (char *)"delete_Race", _wrap_delete_Race, METH_VARARGS, NULL},
	 { (char *)"Race_swigregister", Race_swigregister, METH_VARARGS, NULL},
	 { (char *)"getRace", _wrap_getRace, METH_VARARGS, NULL},
	 { (char *)"allRaces", _wrap_allRaces, METH_VARARGS, NULL},
	 { (char *)"new_TechType", _wrap_new_TechType, METH_VARARGS, NULL},
	 { (char *)"TechType___eq__", _wrap_TechType___eq__, METH_VARARGS, NULL},
	 { (char *)"TechType___ne__", _wrap_TechType___ne__, METH_VARARGS, NULL},
	 { (char *)"TechType___lt__", _wrap_TechType___lt__, METH_VARARGS, NULL},
	 { (char *)"TechType_getID", _wrap_TechType_getID, METH_VARARGS, NULL},
	 { (char *)"TechType_getName", _wrap_TechType_getName, METH_VARARGS, NULL},
	 { (char *)"TechType_getRace", _wrap_TechType_getRace, METH_VARARGS, NULL},
	 { (char *)"TechType_mineralPrice", _wrap_TechType_mineralPrice, METH_VARARGS, NULL},
	 { (char *)"TechType_gasPrice", _wrap_TechType_gasPrice, METH_VARARGS, NULL},
	 { (char *)"TechType_researchTime", _wrap_TechType_researchTime, METH_VARARGS, NULL},
	 { (char *)"TechType_energyUsed", _wrap_TechType_energyUsed, METH_VARARGS, NULL},
	 { (char *)"TechType_whatResearches", _wrap_TechType_whatResearches, METH_VARARGS, NULL},
	 { (char *)"TechType_getWeapon", _wrap_TechType_getWeapon, METH_VARARGS, NULL},
	 { (char *)"TechType_targetsUnit", _wrap_TechType_targetsUnit, METH_VARARGS, NULL},
	 { (char *)"TechType_targetsPosition", _wrap_TechType_targetsPosition, METH_VARARGS, NULL},
	 { (char *)"TechType_whatUses", _wrap_TechType_whatUses, METH_VARARGS, NULL},
	 { (char *)"delete_TechType", _wrap_delete_TechType, METH_VARARGS, NULL},
	 { (char *)"TechType_swigregister", TechType_swigregister, METH_VARARGS, NULL},
	 { (char *)"getTechType", _wrap_getTechType, METH_VARARGS, NULL},
	 { (char *)"allTechTypes", _wrap_allTechTypes, METH_VARARGS, NULL},
	 { (char *)"new_TilePosition", _wrap_new_TilePosition, METH_VARARGS, NULL},
	 { (char *)"TilePosition___eq__", _wrap_TilePosition___eq__, METH_VARARGS, NULL},
	 { (char *)"TilePosition___ne__", _wrap_TilePosition___ne__, METH_VARARGS, NULL},
	 { (char *)"TilePosition___lt__", _wrap_TilePosition___lt__, METH_VARARGS, NULL},
	 { (char *)"TilePosition_isValid", _wrap_TilePosition_isValid, METH_VARARGS, NULL},
	 { (char *)"TilePosition___add__", _wrap_TilePosition___add__, METH_VARARGS, NULL},
	 { (char *)"TilePosition___sub__", _wrap_TilePosition___sub__, METH_VARARGS, NULL},
	 { (char *)"TilePosition_makeValid", _wrap_TilePosition_makeValid, METH_VARARGS, NULL},
	 { (char *)"TilePosition___iadd__", _wrap_TilePosition___iadd__, METH_VARARGS, NULL},
	 { (char *)"TilePosition___isub__", _wrap_TilePosition___isub__, METH_VARARGS, NULL},
	 { (char *)"TilePosition_getDistance", _wrap_TilePosition_getDistance, METH_VARARGS, NULL},
	 { (char *)"TilePosition_getLength", _wrap_TilePosition_getLength, METH_VARARGS, NULL},
	 { (char *)"TilePosition_getX", _wrap_TilePosition_getX, METH_VARARGS, NULL},
	 { (char *)"TilePosition_getY", _wrap_TilePosition_getY, METH_VARARGS, NULL},
	 { (char *)"delete_TilePosition", _wrap_delete_TilePosition, METH_VARARGS, NULL},
	 { (char *)"TilePosition_swigregister", TilePosition_swigregister, METH_VARARGS, NULL},
	 { (char *)"Unit_getID", _wrap_Unit_getID, METH_VARARGS, NULL},
	 { (char *)"Unit_getPlayer", _wrap_Unit_getPlayer, METH_VARARGS, NULL},
	 { (char *)"Unit_getType", _wrap_Unit_getType, METH_VARARGS, NULL},
	 { (char *)"Unit_getPosition", _wrap_Unit_getPosition, METH_VARARGS, NULL},
	 { (char *)"Unit_getTilePosition", _wrap_Unit_getTilePosition, METH_VARARGS, NULL},
	 { (char *)"Unit_getAngle", _wrap_Unit_getAngle, METH_VARARGS, NULL},
	 { (char *)"Unit_getVelocityX", _wrap_Unit_getVelocityX, METH_VARARGS, NULL},
	 { (char *)"Unit_getVelocityY", _wrap_Unit_getVelocityY, METH_VARARGS, NULL},
	 { (char *)"Unit_getHitPoints", _wrap_Unit_getHitPoints, METH_VARARGS, NULL},
	 { (char *)"Unit_getShields", _wrap_Unit_getShields, METH_VARARGS, NULL},
	 { (char *)"Unit_getEnergy", _wrap_Unit_getEnergy, METH_VARARGS, NULL},
	 { (char *)"Unit_getResources", _wrap_Unit_getResources, METH_VARARGS, NULL},
	 { (char *)"Unit_getResourceGroup", _wrap_Unit_getResourceGroup, METH_VARARGS, NULL},
	 { (char *)"Unit_getDistance", _wrap_Unit_getDistance, METH_VARARGS, NULL},
	 { (char *)"Unit_hasPath", _wrap_Unit_hasPath, METH_VARARGS, NULL},
	 { (char *)"Unit_getLastOrderFrame", _wrap_Unit_getLastOrderFrame, METH_VARARGS, NULL},
	 { (char *)"Unit_getUpgradeLevel", _wrap_Unit_getUpgradeLevel, METH_VARARGS, NULL},
	 { (char *)"Unit_getInitialType", _wrap_Unit_getInitialType, METH_VARARGS, NULL},
	 { (char *)"Unit_getInitialPosition", _wrap_Unit_getInitialPosition, METH_VARARGS, NULL},
	 { (char *)"Unit_getInitialTilePosition", _wrap_Unit_getInitialTilePosition, METH_VARARGS, NULL},
	 { (char *)"Unit_getInitialHitPoints", _wrap_Unit_getInitialHitPoints, METH_VARARGS, NULL},
	 { (char *)"Unit_getInitialResources", _wrap_Unit_getInitialResources, METH_VARARGS, NULL},
	 { (char *)"Unit_getKillCount", _wrap_Unit_getKillCount, METH_VARARGS, NULL},
	 { (char *)"Unit_getInterceptorCount", _wrap_Unit_getInterceptorCount, METH_VARARGS, NULL},
	 { (char *)"Unit_getScarabCount", _wrap_Unit_getScarabCount, METH_VARARGS, NULL},
	 { (char *)"Unit_getSpiderMineCount", _wrap_Unit_getSpiderMineCount, METH_VARARGS, NULL},
	 { (char *)"Unit_getGroundWeaponCooldown", _wrap_Unit_getGroundWeaponCooldown, METH_VARARGS, NULL},
	 { (char *)"Unit_getAirWeaponCooldown", _wrap_Unit_getAirWeaponCooldown, METH_VARARGS, NULL},
	 { (char *)"Unit_getSpellCooldown", _wrap_Unit_getSpellCooldown, METH_VARARGS, NULL},
	 { (char *)"Unit_getDefenseMatrixPoints", _wrap_Unit_getDefenseMatrixPoints, METH_VARARGS, NULL},
	 { (char *)"Unit_getDefenseMatrixTimer", _wrap_Unit_getDefenseMatrixTimer, METH_VARARGS, NULL},
	 { (char *)"Unit_getEnsnareTimer", _wrap_Unit_getEnsnareTimer, METH_VARARGS, NULL},
	 { (char *)"Unit_getIrradiateTimer", _wrap_Unit_getIrradiateTimer, METH_VARARGS, NULL},
	 { (char *)"Unit_getLockdownTimer", _wrap_Unit_getLockdownTimer, METH_VARARGS, NULL},
	 { (char *)"Unit_getMaelstromTimer", _wrap_Unit_getMaelstromTimer, METH_VARARGS, NULL},
	 { (char *)"Unit_getOrderTimer", _wrap_Unit_getOrderTimer, METH_VARARGS, NULL},
	 { (char *)"Unit_getPlagueTimer", _wrap_Unit_getPlagueTimer, METH_VARARGS, NULL},
	 { (char *)"Unit_getRemoveTimer", _wrap_Unit_getRemoveTimer, METH_VARARGS, NULL},
	 { (char *)"Unit_getStasisTimer", _wrap_Unit_getStasisTimer, METH_VARARGS, NULL},
	 { (char *)"Unit_getStimTimer", _wrap_Unit_getStimTimer, METH_VARARGS, NULL},
	 { (char *)"Unit_getBuildType", _wrap_Unit_getBuildType, METH_VARARGS, NULL},
	 { (char *)"Unit_getTech", _wrap_Unit_getTech, METH_VARARGS, NULL},
	 { (char *)"Unit_getUpgrade", _wrap_Unit_getUpgrade, METH_VARARGS, NULL},
	 { (char *)"Unit_getRemainingBuildTime", _wrap_Unit_getRemainingBuildTime, METH_VARARGS, NULL},
	 { (char *)"Unit_getRemainingTrainTime", _wrap_Unit_getRemainingTrainTime, METH_VARARGS, NULL},
	 { (char *)"Unit_getRemainingResearchTime", _wrap_Unit_getRemainingResearchTime, METH_VARARGS, NULL},
	 { (char *)"Unit_getRemainingUpgradeTime", _wrap_Unit_getRemainingUpgradeTime, METH_VARARGS, NULL},
	 { (char *)"Unit_getBuildUnit", _wrap_Unit_getBuildUnit, METH_VARARGS, NULL},
	 { (char *)"Unit_getTarget", _wrap_Unit_getTarget, METH_VARARGS, NULL},
	 { (char *)"Unit_getTargetPosition", _wrap_Unit_getTargetPosition, METH_VARARGS, NULL},
	 { (char *)"Unit_getOrder", _wrap_Unit_getOrder, METH_VARARGS, NULL},
	 { (char *)"Unit_getOrderTarget", _wrap_Unit_getOrderTarget, METH_VARARGS, NULL},
	 { (char *)"Unit_getSecondaryOrder", _wrap_Unit_getSecondaryOrder, METH_VARARGS, NULL},
	 { (char *)"Unit_getRallyPosition", _wrap_Unit_getRallyPosition, METH_VARARGS, NULL},
	 { (char *)"Unit_getRallyUnit", _wrap_Unit_getRallyUnit, METH_VARARGS, NULL},
	 { (char *)"Unit_getAddon", _wrap_Unit_getAddon, METH_VARARGS, NULL},
	 { (char *)"Unit_getNydusExit", _wrap_Unit_getNydusExit, METH_VARARGS, NULL},
	 { (char *)"Unit_getPowerUp", _wrap_Unit_getPowerUp, METH_VARARGS, NULL},
	 { (char *)"Unit_getTransport", _wrap_Unit_getTransport, METH_VARARGS, NULL},
	 { (char *)"Unit_getCarrier", _wrap_Unit_getCarrier, METH_VARARGS, NULL},
	 { (char *)"Unit_getInterceptors", _wrap_Unit_getInterceptors, METH_VARARGS, NULL},
	 { (char *)"Unit_getHatchery", _wrap_Unit_getHatchery, METH_VARARGS, NULL},
	 { (char *)"Unit_getLarva", _wrap_Unit_getLarva, METH_VARARGS, NULL},
	 { (char *)"Unit_exists", _wrap_Unit_exists, METH_VARARGS, NULL},
	 { (char *)"Unit_hasNuke", _wrap_Unit_hasNuke, METH_VARARGS, NULL},
	 { (char *)"Unit_isAccelerating", _wrap_Unit_isAccelerating, METH_VARARGS, NULL},
	 { (char *)"Unit_isAttacking", _wrap_Unit_isAttacking, METH_VARARGS, NULL},
	 { (char *)"Unit_isBeingConstructed", _wrap_Unit_isBeingConstructed, METH_VARARGS, NULL},
	 { (char *)"Unit_isBeingGathered", _wrap_Unit_isBeingGathered, METH_VARARGS, NULL},
	 { (char *)"Unit_isBeingHealed", _wrap_Unit_isBeingHealed, METH_VARARGS, NULL},
	 { (char *)"Unit_isBlind", _wrap_Unit_isBlind, METH_VARARGS, NULL},
	 { (char *)"Unit_isBraking", _wrap_Unit_isBraking, METH_VARARGS, NULL},
	 { (char *)"Unit_isBurrowed", _wrap_Unit_isBurrowed, METH_VARARGS, NULL},
	 { (char *)"Unit_isCarryingGas", _wrap_Unit_isCarryingGas, METH_VARARGS, NULL},
	 { (char *)"Unit_isCarryingMinerals", _wrap_Unit_isCarryingMinerals, METH_VARARGS, NULL},
	 { (char *)"Unit_isCloaked", _wrap_Unit_isCloaked, METH_VARARGS, NULL},
	 { (char *)"Unit_isCompleted", _wrap_Unit_isCompleted, METH_VARARGS, NULL},
	 { (char *)"Unit_isConstructing", _wrap_Unit_isConstructing, METH_VARARGS, NULL},
	 { (char *)"Unit_isDefenseMatrixed", _wrap_Unit_isDefenseMatrixed, METH_VARARGS, NULL},
	 { (char *)"Unit_isDetected", _wrap_Unit_isDetected, METH_VARARGS, NULL},
	 { (char *)"Unit_isEnsnared", _wrap_Unit_isEnsnared, METH_VARARGS, NULL},
	 { (char *)"Unit_isFollowing", _wrap_Unit_isFollowing, METH_VARARGS, NULL},
	 { (char *)"Unit_isGatheringGas", _wrap_Unit_isGatheringGas, METH_VARARGS, NULL},
	 { (char *)"Unit_isGatheringMinerals", _wrap_Unit_isGatheringMinerals, METH_VARARGS, NULL},
	 { (char *)"Unit_isHallucination", _wrap_Unit_isHallucination, METH_VARARGS, NULL},
	 { (char *)"Unit_isHoldingPosition", _wrap_Unit_isHoldingPosition, METH_VARARGS, NULL},
	 { (char *)"Unit_isIdle", _wrap_Unit_isIdle, METH_VARARGS, NULL},
	 { (char *)"Unit_isInterruptible", _wrap_Unit_isInterruptible, METH_VARARGS, NULL},
	 { (char *)"Unit_isIrradiated", _wrap_Unit_isIrradiated, METH_VARARGS, NULL},
	 { (char *)"Unit_isLifted", _wrap_Unit_isLifted, METH_VARARGS, NULL},
	 { (char *)"Unit_isLoaded", _wrap_Unit_isLoaded, METH_VARARGS, NULL},
	 { (char *)"Unit_isLockedDown", _wrap_Unit_isLockedDown, METH_VARARGS, NULL},
	 { (char *)"Unit_isMaelstrommed", _wrap_Unit_isMaelstrommed, METH_VARARGS, NULL},
	 { (char *)"Unit_isMorphing", _wrap_Unit_isMorphing, METH_VARARGS, NULL},
	 { (char *)"Unit_isMoving", _wrap_Unit_isMoving, METH_VARARGS, NULL},
	 { (char *)"Unit_isParasited", _wrap_Unit_isParasited, METH_VARARGS, NULL},
	 { (char *)"Unit_isPatrolling", _wrap_Unit_isPatrolling, METH_VARARGS, NULL},
	 { (char *)"Unit_isPlagued", _wrap_Unit_isPlagued, METH_VARARGS, NULL},
	 { (char *)"Unit_isRepairing", _wrap_Unit_isRepairing, METH_VARARGS, NULL},
	 { (char *)"Unit_isResearching", _wrap_Unit_isResearching, METH_VARARGS, NULL},
	 { (char *)"Unit_isSelected", _wrap_Unit_isSelected, METH_VARARGS, NULL},
	 { (char *)"Unit_isSieged", _wrap_Unit_isSieged, METH_VARARGS, NULL},
	 { (char *)"Unit_isStartingAttack", _wrap_Unit_isStartingAttack, METH_VARARGS, NULL},
	 { (char *)"Unit_isStasised", _wrap_Unit_isStasised, METH_VARARGS, NULL},
	 { (char *)"Unit_isStimmed", _wrap_Unit_isStimmed, METH_VARARGS, NULL},
	 { (char *)"Unit_isStuck", _wrap_Unit_isStuck, METH_VARARGS, NULL},
	 { (char *)"Unit_isTraining", _wrap_Unit_isTraining, METH_VARARGS, NULL},
	 { (char *)"Unit_isUnderStorm", _wrap_Unit_isUnderStorm, METH_VARARGS, NULL},
	 { (char *)"Unit_isUnpowered", _wrap_Unit_isUnpowered, METH_VARARGS, NULL},
	 { (char *)"Unit_isUpgrading", _wrap_Unit_isUpgrading, METH_VARARGS, NULL},
	 { (char *)"Unit_isVisible", _wrap_Unit_isVisible, METH_VARARGS, NULL},
	 { (char *)"Unit_canIssueCommand", _wrap_Unit_canIssueCommand, METH_VARARGS, NULL},
	 { (char *)"Unit_issueCommand", _wrap_Unit_issueCommand, METH_VARARGS, NULL},
	 { (char *)"Unit_attackMove", _wrap_Unit_attackMove, METH_VARARGS, NULL},
	 { (char *)"Unit_attackUnit", _wrap_Unit_attackUnit, METH_VARARGS, NULL},
	 { (char *)"Unit_build", _wrap_Unit_build, METH_VARARGS, NULL},
	 { (char *)"Unit_buildAddon", _wrap_Unit_buildAddon, METH_VARARGS, NULL},
	 { (char *)"Unit_train", _wrap_Unit_train, METH_VARARGS, NULL},
	 { (char *)"Unit_morph", _wrap_Unit_morph, METH_VARARGS, NULL},
	 { (char *)"Unit_research", _wrap_Unit_research, METH_VARARGS, NULL},
	 { (char *)"Unit_upgrade", _wrap_Unit_upgrade, METH_VARARGS, NULL},
	 { (char *)"Unit_setRallyPoint", _wrap_Unit_setRallyPoint, METH_VARARGS, NULL},
	 { (char *)"Unit_move", _wrap_Unit_move, METH_VARARGS, NULL},
	 { (char *)"Unit_patrol", _wrap_Unit_patrol, METH_VARARGS, NULL},
	 { (char *)"Unit_holdPosition", _wrap_Unit_holdPosition, METH_VARARGS, NULL},
	 { (char *)"Unit_stop", _wrap_Unit_stop, METH_VARARGS, NULL},
	 { (char *)"Unit_follow", _wrap_Unit_follow, METH_VARARGS, NULL},
	 { (char *)"Unit_gather", _wrap_Unit_gather, METH_VARARGS, NULL},
	 { (char *)"Unit_returnCargo", _wrap_Unit_returnCargo, METH_VARARGS, NULL},
	 { (char *)"Unit_repair", _wrap_Unit_repair, METH_VARARGS, NULL},
	 { (char *)"Unit_burrow", _wrap_Unit_burrow, METH_VARARGS, NULL},
	 { (char *)"Unit_unburrow", _wrap_Unit_unburrow, METH_VARARGS, NULL},
	 { (char *)"Unit_cloak", _wrap_Unit_cloak, METH_VARARGS, NULL},
	 { (char *)"Unit_decloak", _wrap_Unit_decloak, METH_VARARGS, NULL},
	 { (char *)"Unit_siege", _wrap_Unit_siege, METH_VARARGS, NULL},
	 { (char *)"Unit_unsiege", _wrap_Unit_unsiege, METH_VARARGS, NULL},
	 { (char *)"Unit_lift", _wrap_Unit_lift, METH_VARARGS, NULL},
	 { (char *)"Unit_land", _wrap_Unit_land, METH_VARARGS, NULL},
	 { (char *)"Unit_load", _wrap_Unit_load, METH_VARARGS, NULL},
	 { (char *)"Unit_unload", _wrap_Unit_unload, METH_VARARGS, NULL},
	 { (char *)"Unit_unloadAll", _wrap_Unit_unloadAll, METH_VARARGS, NULL},
	 { (char *)"Unit_rightClick", _wrap_Unit_rightClick, METH_VARARGS, NULL},
	 { (char *)"Unit_haltConstruction", _wrap_Unit_haltConstruction, METH_VARARGS, NULL},
	 { (char *)"Unit_cancelConstruction", _wrap_Unit_cancelConstruction, METH_VARARGS, NULL},
	 { (char *)"Unit_cancelAddon", _wrap_Unit_cancelAddon, METH_VARARGS, NULL},
	 { (char *)"Unit_cancelTrain", _wrap_Unit_cancelTrain, METH_VARARGS, NULL},
	 { (char *)"Unit_cancelMorph", _wrap_Unit_cancelMorph, METH_VARARGS, NULL},
	 { (char *)"Unit_cancelResearch", _wrap_Unit_cancelResearch, METH_VARARGS, NULL},
	 { (char *)"Unit_cancelUpgrade", _wrap_Unit_cancelUpgrade, METH_VARARGS, NULL},
	 { (char *)"Unit_useTech", _wrap_Unit_useTech, METH_VARARGS, NULL},
	 { (char *)"Unit_setClientInfo", _wrap_Unit_setClientInfo, METH_VARARGS, NULL},
	 { (char *)"Unit_getClientInfo", _wrap_Unit_getClientInfo, METH_VARARGS, NULL},
	 { (char *)"Unit_getLoadedUnits", _wrap_Unit_getLoadedUnits, METH_VARARGS, NULL},
	 { (char *)"Unit_getTrainingQueue", _wrap_Unit_getTrainingQueue, METH_VARARGS, NULL},
	 { (char *)"delete_Unit", _wrap_delete_Unit, METH_VARARGS, NULL},
	 { (char *)"Unit_swigregister", Unit_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_UnitCommand", _wrap_new_UnitCommand, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_attackMove", _wrap_UnitCommand_attackMove, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_attackUnit", _wrap_UnitCommand_attackUnit, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_build", _wrap_UnitCommand_build, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_buildAddon", _wrap_UnitCommand_buildAddon, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_train", _wrap_UnitCommand_train, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_morph", _wrap_UnitCommand_morph, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_research", _wrap_UnitCommand_research, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_upgrade", _wrap_UnitCommand_upgrade, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_setRallyPosition", _wrap_UnitCommand_setRallyPosition, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_setRallyUnit", _wrap_UnitCommand_setRallyUnit, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_move", _wrap_UnitCommand_move, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_patrol", _wrap_UnitCommand_patrol, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_holdPosition", _wrap_UnitCommand_holdPosition, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_stop", _wrap_UnitCommand_stop, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_follow", _wrap_UnitCommand_follow, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_gather", _wrap_UnitCommand_gather, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_returnCargo", _wrap_UnitCommand_returnCargo, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_repair", _wrap_UnitCommand_repair, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_burrow", _wrap_UnitCommand_burrow, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_unburrow", _wrap_UnitCommand_unburrow, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_cloak", _wrap_UnitCommand_cloak, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_decloak", _wrap_UnitCommand_decloak, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_siege", _wrap_UnitCommand_siege, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_unsiege", _wrap_UnitCommand_unsiege, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_lift", _wrap_UnitCommand_lift, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_land", _wrap_UnitCommand_land, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_load", _wrap_UnitCommand_load, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_unload", _wrap_UnitCommand_unload, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_unloadAll", _wrap_UnitCommand_unloadAll, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_rightClick", _wrap_UnitCommand_rightClick, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_haltConstruction", _wrap_UnitCommand_haltConstruction, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_cancelConstruction", _wrap_UnitCommand_cancelConstruction, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_cancelAddon", _wrap_UnitCommand_cancelAddon, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_cancelTrain", _wrap_UnitCommand_cancelTrain, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_cancelMorph", _wrap_UnitCommand_cancelMorph, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_cancelResearch", _wrap_UnitCommand_cancelResearch, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_cancelUpgrade", _wrap_UnitCommand_cancelUpgrade, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_useTech", _wrap_UnitCommand_useTech, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_unit_set", _wrap_UnitCommand_unit_set, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_unit_get", _wrap_UnitCommand_unit_get, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_type_set", _wrap_UnitCommand_type_set, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_type_get", _wrap_UnitCommand_type_get, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_target_set", _wrap_UnitCommand_target_set, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_target_get", _wrap_UnitCommand_target_get, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_x_set", _wrap_UnitCommand_x_set, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_x_get", _wrap_UnitCommand_x_get, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_y_set", _wrap_UnitCommand_y_set, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_y_get", _wrap_UnitCommand_y_get, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_extra_set", _wrap_UnitCommand_extra_set, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_extra_get", _wrap_UnitCommand_extra_get, METH_VARARGS, NULL},
	 { (char *)"delete_UnitCommand", _wrap_delete_UnitCommand, METH_VARARGS, NULL},
	 { (char *)"UnitCommand_swigregister", UnitCommand_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_UnitCommandType", _wrap_new_UnitCommandType, METH_VARARGS, NULL},
	 { (char *)"UnitCommandType___eq__", _wrap_UnitCommandType___eq__, METH_VARARGS, NULL},
	 { (char *)"UnitCommandType___ne__", _wrap_UnitCommandType___ne__, METH_VARARGS, NULL},
	 { (char *)"UnitCommandType___lt__", _wrap_UnitCommandType___lt__, METH_VARARGS, NULL},
	 { (char *)"UnitCommandType_getID", _wrap_UnitCommandType_getID, METH_VARARGS, NULL},
	 { (char *)"UnitCommandType_getName", _wrap_UnitCommandType_getName, METH_VARARGS, NULL},
	 { (char *)"delete_UnitCommandType", _wrap_delete_UnitCommandType, METH_VARARGS, NULL},
	 { (char *)"UnitCommandType_swigregister", UnitCommandType_swigregister, METH_VARARGS, NULL},
	 { (char *)"getUnitCommandType", _wrap_getUnitCommandType, METH_VARARGS, NULL},
	 { (char *)"allUnitCommandTypes", _wrap_allUnitCommandTypes, METH_VARARGS, NULL},
	 { (char *)"new_UnitSizeType", _wrap_new_UnitSizeType, METH_VARARGS, NULL},
	 { (char *)"UnitSizeType___eq__", _wrap_UnitSizeType___eq__, METH_VARARGS, NULL},
	 { (char *)"UnitSizeType___ne__", _wrap_UnitSizeType___ne__, METH_VARARGS, NULL},
	 { (char *)"UnitSizeType___lt__", _wrap_UnitSizeType___lt__, METH_VARARGS, NULL},
	 { (char *)"UnitSizeType_getID", _wrap_UnitSizeType_getID, METH_VARARGS, NULL},
	 { (char *)"UnitSizeType_getName", _wrap_UnitSizeType_getName, METH_VARARGS, NULL},
	 { (char *)"delete_UnitSizeType", _wrap_delete_UnitSizeType, METH_VARARGS, NULL},
	 { (char *)"UnitSizeType_swigregister", UnitSizeType_swigregister, METH_VARARGS, NULL},
	 { (char *)"getUnitSizeType", _wrap_getUnitSizeType, METH_VARARGS, NULL},
	 { (char *)"allUnitSizeTypes", _wrap_allUnitSizeTypes, METH_VARARGS, NULL},
	 { (char *)"new_UnitType", _wrap_new_UnitType, METH_VARARGS, NULL},
	 { (char *)"UnitType___eq__", _wrap_UnitType___eq__, METH_VARARGS, NULL},
	 { (char *)"UnitType___ne__", _wrap_UnitType___ne__, METH_VARARGS, NULL},
	 { (char *)"UnitType___lt__", _wrap_UnitType___lt__, METH_VARARGS, NULL},
	 { (char *)"UnitType_getID", _wrap_UnitType_getID, METH_VARARGS, NULL},
	 { (char *)"UnitType_getName", _wrap_UnitType_getName, METH_VARARGS, NULL},
	 { (char *)"UnitType_getRace", _wrap_UnitType_getRace, METH_VARARGS, NULL},
	 { (char *)"UnitType_requiredTech", _wrap_UnitType_requiredTech, METH_VARARGS, NULL},
	 { (char *)"UnitType_cloakingTech", _wrap_UnitType_cloakingTech, METH_VARARGS, NULL},
	 { (char *)"UnitType_abilities", _wrap_UnitType_abilities, METH_VARARGS, NULL},
	 { (char *)"UnitType_upgrades", _wrap_UnitType_upgrades, METH_VARARGS, NULL},
	 { (char *)"UnitType_armorUpgrade", _wrap_UnitType_armorUpgrade, METH_VARARGS, NULL},
	 { (char *)"UnitType_maxHitPoints", _wrap_UnitType_maxHitPoints, METH_VARARGS, NULL},
	 { (char *)"UnitType_maxShields", _wrap_UnitType_maxShields, METH_VARARGS, NULL},
	 { (char *)"UnitType_maxEnergy", _wrap_UnitType_maxEnergy, METH_VARARGS, NULL},
	 { (char *)"UnitType_armor", _wrap_UnitType_armor, METH_VARARGS, NULL},
	 { (char *)"UnitType_mineralPrice", _wrap_UnitType_mineralPrice, METH_VARARGS, NULL},
	 { (char *)"UnitType_gasPrice", _wrap_UnitType_gasPrice, METH_VARARGS, NULL},
	 { (char *)"UnitType_buildTime", _wrap_UnitType_buildTime, METH_VARARGS, NULL},
	 { (char *)"UnitType_supplyRequired", _wrap_UnitType_supplyRequired, METH_VARARGS, NULL},
	 { (char *)"UnitType_supplyProvided", _wrap_UnitType_supplyProvided, METH_VARARGS, NULL},
	 { (char *)"UnitType_spaceRequired", _wrap_UnitType_spaceRequired, METH_VARARGS, NULL},
	 { (char *)"UnitType_spaceProvided", _wrap_UnitType_spaceProvided, METH_VARARGS, NULL},
	 { (char *)"UnitType_buildScore", _wrap_UnitType_buildScore, METH_VARARGS, NULL},
	 { (char *)"UnitType_destroyScore", _wrap_UnitType_destroyScore, METH_VARARGS, NULL},
	 { (char *)"UnitType_size", _wrap_UnitType_size, METH_VARARGS, NULL},
	 { (char *)"UnitType_tileWidth", _wrap_UnitType_tileWidth, METH_VARARGS, NULL},
	 { (char *)"UnitType_tileHeight", _wrap_UnitType_tileHeight, METH_VARARGS, NULL},
	 { (char *)"UnitType_dimensionLeft", _wrap_UnitType_dimensionLeft, METH_VARARGS, NULL},
	 { (char *)"UnitType_dimensionUp", _wrap_UnitType_dimensionUp, METH_VARARGS, NULL},
	 { (char *)"UnitType_dimensionRight", _wrap_UnitType_dimensionRight, METH_VARARGS, NULL},
	 { (char *)"UnitType_dimensionDown", _wrap_UnitType_dimensionDown, METH_VARARGS, NULL},
	 { (char *)"UnitType_seekRange", _wrap_UnitType_seekRange, METH_VARARGS, NULL},
	 { (char *)"UnitType_sightRange", _wrap_UnitType_sightRange, METH_VARARGS, NULL},
	 { (char *)"UnitType_groundWeapon", _wrap_UnitType_groundWeapon, METH_VARARGS, NULL},
	 { (char *)"UnitType_maxGroundHits", _wrap_UnitType_maxGroundHits, METH_VARARGS, NULL},
	 { (char *)"UnitType_airWeapon", _wrap_UnitType_airWeapon, METH_VARARGS, NULL},
	 { (char *)"UnitType_maxAirHits", _wrap_UnitType_maxAirHits, METH_VARARGS, NULL},
	 { (char *)"UnitType_topSpeed", _wrap_UnitType_topSpeed, METH_VARARGS, NULL},
	 { (char *)"UnitType_acceleration", _wrap_UnitType_acceleration, METH_VARARGS, NULL},
	 { (char *)"UnitType_haltDistance", _wrap_UnitType_haltDistance, METH_VARARGS, NULL},
	 { (char *)"UnitType_turnRadius", _wrap_UnitType_turnRadius, METH_VARARGS, NULL},
	 { (char *)"UnitType_canProduce", _wrap_UnitType_canProduce, METH_VARARGS, NULL},
	 { (char *)"UnitType_canAttack", _wrap_UnitType_canAttack, METH_VARARGS, NULL},
	 { (char *)"UnitType_canMove", _wrap_UnitType_canMove, METH_VARARGS, NULL},
	 { (char *)"UnitType_isFlyer", _wrap_UnitType_isFlyer, METH_VARARGS, NULL},
	 { (char *)"UnitType_regeneratesHP", _wrap_UnitType_regeneratesHP, METH_VARARGS, NULL},
	 { (char *)"UnitType_isSpellcaster", _wrap_UnitType_isSpellcaster, METH_VARARGS, NULL},
	 { (char *)"UnitType_hasPermanentCloak", _wrap_UnitType_hasPermanentCloak, METH_VARARGS, NULL},
	 { (char *)"UnitType_isInvincible", _wrap_UnitType_isInvincible, METH_VARARGS, NULL},
	 { (char *)"UnitType_isOrganic", _wrap_UnitType_isOrganic, METH_VARARGS, NULL},
	 { (char *)"UnitType_isMechanical", _wrap_UnitType_isMechanical, METH_VARARGS, NULL},
	 { (char *)"UnitType_isRobotic", _wrap_UnitType_isRobotic, METH_VARARGS, NULL},
	 { (char *)"UnitType_isDetector", _wrap_UnitType_isDetector, METH_VARARGS, NULL},
	 { (char *)"UnitType_isResourceContainer", _wrap_UnitType_isResourceContainer, METH_VARARGS, NULL},
	 { (char *)"UnitType_isResourceDepot", _wrap_UnitType_isResourceDepot, METH_VARARGS, NULL},
	 { (char *)"UnitType_isRefinery", _wrap_UnitType_isRefinery, METH_VARARGS, NULL},
	 { (char *)"UnitType_isWorker", _wrap_UnitType_isWorker, METH_VARARGS, NULL},
	 { (char *)"UnitType_requiresPsi", _wrap_UnitType_requiresPsi, METH_VARARGS, NULL},
	 { (char *)"UnitType_requiresCreep", _wrap_UnitType_requiresCreep, METH_VARARGS, NULL},
	 { (char *)"UnitType_isTwoUnitsInOneEgg", _wrap_UnitType_isTwoUnitsInOneEgg, METH_VARARGS, NULL},
	 { (char *)"UnitType_isBurrowable", _wrap_UnitType_isBurrowable, METH_VARARGS, NULL},
	 { (char *)"UnitType_isCloakable", _wrap_UnitType_isCloakable, METH_VARARGS, NULL},
	 { (char *)"UnitType_isBuilding", _wrap_UnitType_isBuilding, METH_VARARGS, NULL},
	 { (char *)"UnitType_isAddon", _wrap_UnitType_isAddon, METH_VARARGS, NULL},
	 { (char *)"UnitType_isFlyingBuilding", _wrap_UnitType_isFlyingBuilding, METH_VARARGS, NULL},
	 { (char *)"UnitType_isNeutral", _wrap_UnitType_isNeutral, METH_VARARGS, NULL},
	 { (char *)"UnitType_isHero", _wrap_UnitType_isHero, METH_VARARGS, NULL},
	 { (char *)"UnitType_isPowerup", _wrap_UnitType_isPowerup, METH_VARARGS, NULL},
	 { (char *)"UnitType_isBeacon", _wrap_UnitType_isBeacon, METH_VARARGS, NULL},
	 { (char *)"UnitType_isFlagBeacon", _wrap_UnitType_isFlagBeacon, METH_VARARGS, NULL},
	 { (char *)"UnitType_isSpecialBuilding", _wrap_UnitType_isSpecialBuilding, METH_VARARGS, NULL},
	 { (char *)"UnitType_isSpell", _wrap_UnitType_isSpell, METH_VARARGS, NULL},
	 { (char *)"UnitType_producesLarva", _wrap_UnitType_producesLarva, METH_VARARGS, NULL},
	 { (char *)"UnitType_whatBuilds", _wrap_UnitType_whatBuilds, METH_VARARGS, NULL},
	 { (char *)"delete_UnitType", _wrap_delete_UnitType, METH_VARARGS, NULL},
	 { (char *)"UnitType_swigregister", UnitType_swigregister, METH_VARARGS, NULL},
	 { (char *)"getUnitType", _wrap_getUnitType, METH_VARARGS, NULL},
	 { (char *)"allUnitTypes", _wrap_allUnitTypes, METH_VARARGS, NULL},
	 { (char *)"new_UpgradeType", _wrap_new_UpgradeType, METH_VARARGS, NULL},
	 { (char *)"UpgradeType___eq__", _wrap_UpgradeType___eq__, METH_VARARGS, NULL},
	 { (char *)"UpgradeType___ne__", _wrap_UpgradeType___ne__, METH_VARARGS, NULL},
	 { (char *)"UpgradeType___lt__", _wrap_UpgradeType___lt__, METH_VARARGS, NULL},
	 { (char *)"UpgradeType_getID", _wrap_UpgradeType_getID, METH_VARARGS, NULL},
	 { (char *)"UpgradeType_getName", _wrap_UpgradeType_getName, METH_VARARGS, NULL},
	 { (char *)"UpgradeType_getRace", _wrap_UpgradeType_getRace, METH_VARARGS, NULL},
	 { (char *)"UpgradeType_mineralPriceBase", _wrap_UpgradeType_mineralPriceBase, METH_VARARGS, NULL},
	 { (char *)"UpgradeType_mineralPriceFactor", _wrap_UpgradeType_mineralPriceFactor, METH_VARARGS, NULL},
	 { (char *)"UpgradeType_gasPriceBase", _wrap_UpgradeType_gasPriceBase, METH_VARARGS, NULL},
	 { (char *)"UpgradeType_gasPriceFactor", _wrap_UpgradeType_gasPriceFactor, METH_VARARGS, NULL},
	 { (char *)"UpgradeType_upgradeTimeBase", _wrap_UpgradeType_upgradeTimeBase, METH_VARARGS, NULL},
	 { (char *)"UpgradeType_upgradeTimeFactor", _wrap_UpgradeType_upgradeTimeFactor, METH_VARARGS, NULL},
	 { (char *)"UpgradeType_maxRepeats", _wrap_UpgradeType_maxRepeats, METH_VARARGS, NULL},
	 { (char *)"UpgradeType_whatUpgrades", _wrap_UpgradeType_whatUpgrades, METH_VARARGS, NULL},
	 { (char *)"UpgradeType_whatUses", _wrap_UpgradeType_whatUses, METH_VARARGS, NULL},
	 { (char *)"delete_UpgradeType", _wrap_delete_UpgradeType, METH_VARARGS, NULL},
	 { (char *)"UpgradeType_swigregister", UpgradeType_swigregister, METH_VARARGS, NULL},
	 { (char *)"getUpgradeType", _wrap_getUpgradeType, METH_VARARGS, NULL},
	 { (char *)"allUpgradeTypes", _wrap_allUpgradeTypes, METH_VARARGS, NULL},
	 { (char *)"new_WeaponType", _wrap_new_WeaponType, METH_VARARGS, NULL},
	 { (char *)"WeaponType___eq__", _wrap_WeaponType___eq__, METH_VARARGS, NULL},
	 { (char *)"WeaponType___ne__", _wrap_WeaponType___ne__, METH_VARARGS, NULL},
	 { (char *)"WeaponType___lt__", _wrap_WeaponType___lt__, METH_VARARGS, NULL},
	 { (char *)"WeaponType_getID", _wrap_WeaponType_getID, METH_VARARGS, NULL},
	 { (char *)"WeaponType_getName", _wrap_WeaponType_getName, METH_VARARGS, NULL},
	 { (char *)"WeaponType_getTech", _wrap_WeaponType_getTech, METH_VARARGS, NULL},
	 { (char *)"WeaponType_whatUses", _wrap_WeaponType_whatUses, METH_VARARGS, NULL},
	 { (char *)"WeaponType_damageAmount", _wrap_WeaponType_damageAmount, METH_VARARGS, NULL},
	 { (char *)"WeaponType_damageBonus", _wrap_WeaponType_damageBonus, METH_VARARGS, NULL},
	 { (char *)"WeaponType_damageCooldown", _wrap_WeaponType_damageCooldown, METH_VARARGS, NULL},
	 { (char *)"WeaponType_damageFactor", _wrap_WeaponType_damageFactor, METH_VARARGS, NULL},
	 { (char *)"WeaponType_upgradeType", _wrap_WeaponType_upgradeType, METH_VARARGS, NULL},
	 { (char *)"WeaponType_damageType", _wrap_WeaponType_damageType, METH_VARARGS, NULL},
	 { (char *)"WeaponType_explosionType", _wrap_WeaponType_explosionType, METH_VARARGS, NULL},
	 { (char *)"WeaponType_minRange", _wrap_WeaponType_minRange, METH_VARARGS, NULL},
	 { (char *)"WeaponType_maxRange", _wrap_WeaponType_maxRange, METH_VARARGS, NULL},
	 { (char *)"WeaponType_innerSplashRadius", _wrap_WeaponType_innerSplashRadius, METH_VARARGS, NULL},
	 { (char *)"WeaponType_medianSplashRadius", _wrap_WeaponType_medianSplashRadius, METH_VARARGS, NULL},
	 { (char *)"WeaponType_outerSplashRadius", _wrap_WeaponType_outerSplashRadius, METH_VARARGS, NULL},
	 { (char *)"WeaponType_targetsAir", _wrap_WeaponType_targetsAir, METH_VARARGS, NULL},
	 { (char *)"WeaponType_targetsGround", _wrap_WeaponType_targetsGround, METH_VARARGS, NULL},
	 { (char *)"WeaponType_targetsMechanical", _wrap_WeaponType_targetsMechanical, METH_VARARGS, NULL},
	 { (char *)"WeaponType_targetsOrganic", _wrap_WeaponType_targetsOrganic, METH_VARARGS, NULL},
	 { (char *)"WeaponType_targetsNonBuilding", _wrap_WeaponType_targetsNonBuilding, METH_VARARGS, NULL},
	 { (char *)"WeaponType_targetsNonRobotic", _wrap_WeaponType_targetsNonRobotic, METH_VARARGS, NULL},
	 { (char *)"WeaponType_targetsTerrain", _wrap_WeaponType_targetsTerrain, METH_VARARGS, NULL},
	 { (char *)"WeaponType_targetsOrgOrMech", _wrap_WeaponType_targetsOrgOrMech, METH_VARARGS, NULL},
	 { (char *)"WeaponType_targetsOwn", _wrap_WeaponType_targetsOwn, METH_VARARGS, NULL},
	 { (char *)"delete_WeaponType", _wrap_delete_WeaponType, METH_VARARGS, NULL},
	 { (char *)"WeaponType_swigregister", WeaponType_swigregister, METH_VARARGS, NULL},
	 { (char *)"getWeaponType", _wrap_getWeaponType, METH_VARARGS, NULL},
	 { (char *)"allWeaponTypes", _wrap_allWeaponTypes, METH_VARARGS, NULL},
	 { (char *)"normalWeaponTypes", _wrap_normalWeaponTypes, METH_VARARGS, NULL},
	 { (char *)"specialWeaponTypes", _wrap_specialWeaponTypes, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_BWAPI__AIModule = {"_p_BWAPI__AIModule", "BWAPI::AIModule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BWAPI__Bitmap = {"_p_BWAPI__Bitmap", "BWAPI::Bitmap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BWAPI__BitmapProxy = {"_p_BWAPI__BitmapProxy", "BWAPI::BitmapProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BWAPI__Bullet = {"_p_BWAPI__Bullet", "BWAPI::Bullet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BWAPI__BulletType = {"_p_BWAPI__BulletType", "BWAPI::BulletType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BWAPI__Color = {"_p_BWAPI__Color", "BWAPI::Color *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BWAPI__DamageType = {"_p_BWAPI__DamageType", "BWAPI::DamageType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BWAPI__Error = {"_p_BWAPI__Error", "BWAPI::Error *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BWAPI__Event = {"_p_BWAPI__Event", "BWAPI::Event *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BWAPI__ExplosionType = {"_p_BWAPI__ExplosionType", "BWAPI::ExplosionType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BWAPI__Force = {"_p_BWAPI__Force", "BWAPI::Force *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BWAPI__Game = {"_p_BWAPI__Game", "BWAPI::Game *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BWAPI__GameType = {"_p_BWAPI__GameType", "BWAPI::GameType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BWAPI__Order = {"_p_BWAPI__Order", "BWAPI::Order *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BWAPI__Player = {"_p_BWAPI__Player", "BWAPI::Player *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BWAPI__PlayerType = {"_p_BWAPI__PlayerType", "BWAPI::PlayerType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BWAPI__Position = {"_p_BWAPI__Position", "BWAPI::Position *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BWAPI__Race = {"_p_BWAPI__Race", "BWAPI::Race *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BWAPI__TechType = {"_p_BWAPI__TechType", "BWAPI::TechType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BWAPI__TilePosition = {"_p_BWAPI__TilePosition", "BWAPI::TilePosition *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BWAPI__Unit = {"_p_BWAPI__Unit", "BWAPI::Unit *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BWAPI__UnitCommand = {"_p_BWAPI__UnitCommand", "BWAPI::UnitCommand *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BWAPI__UnitCommandType = {"_p_BWAPI__UnitCommandType", "BWAPI::UnitCommandType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BWAPI__UnitSizeType = {"_p_BWAPI__UnitSizeType", "BWAPI::UnitSizeType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BWAPI__UnitType = {"_p_BWAPI__UnitType", "BWAPI::UnitType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BWAPI__UpgradeType = {"_p_BWAPI__UpgradeType", "BWAPI::UpgradeType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BWAPI__WeaponType = {"_p_BWAPI__WeaponType", "BWAPI::WeaponType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BWTA__BaseLocation = {"_p_BWTA__BaseLocation", "BWTA::BaseLocation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BWTA__Chokepoint = {"_p_BWTA__Chokepoint", "BWTA::Chokepoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BWTA__Region = {"_p_BWTA__Region", "BWTA::Region *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BulletType = {"_p_BulletType", "BulletType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Chokepoint = {"_p_Chokepoint", "Chokepoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EventType__Enum = {"_p_EventType__Enum", "EventType::Enum *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GameType = {"_p_GameType", "GameType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Key = {"_p_Key", "Key *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ListWrapperT_BWAPI__Force_p_t = {"_p_ListWrapperT_BWAPI__Force_p_t", "ListWrapper< BWAPI::Force * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ListWrapperT_BWAPI__Player_p_t = {"_p_ListWrapperT_BWAPI__Player_p_t", "ListWrapper< BWAPI::Player * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ListWrapperT_BWAPI__Unit_p_t = {"_p_ListWrapperT_BWAPI__Unit_p_t", "ListWrapper< BWAPI::Unit * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ListWrapperT_BWTA__BaseLocation_p_t = {"_p_ListWrapperT_BWTA__BaseLocation_p_t", "ListWrapper< BWTA::BaseLocation * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ListWrapperT_BWTA__Chokepoint_p_t = {"_p_ListWrapperT_BWTA__Chokepoint_p_t", "ListWrapper< BWTA::Chokepoint * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ListWrapperT_BWTA__Region_p_t = {"_p_ListWrapperT_BWTA__Region_p_t", "ListWrapper< BWTA::Region * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ListWrapper_PtrNextT_BWAPI__Position_t = {"_p_ListWrapper_PtrNextT_BWAPI__Position_t", "ListWrapper_PtrNext< BWAPI::Position > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ListWrapper_PtrNextT_BWAPI__TilePosition_t = {"_p_ListWrapper_PtrNextT_BWAPI__TilePosition_t", "ListWrapper_PtrNext< BWAPI::TilePosition > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ListWrapper_PtrNextT_BWAPI__UnitType_t = {"_p_ListWrapper_PtrNextT_BWAPI__UnitType_t", "ListWrapper_PtrNext< BWAPI::UnitType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MouseButton = {"_p_MouseButton", "MouseButton *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlayerType = {"_p_PlayerType", "PlayerType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Position = {"_p_Position", "Position *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Race = {"_p_Race", "Race *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RectangleArrayT_double_t = {"_p_RectangleArrayT_double_t", "RectangleArray< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Region = {"_p_Region", "Region *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SetWrapperT_BWAPI__Force_p_t = {"_p_SetWrapperT_BWAPI__Force_p_t", "SetWrapper< BWAPI::Force * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SetWrapperT_BWAPI__Player_p_t = {"_p_SetWrapperT_BWAPI__Player_p_t", "SetWrapper< BWAPI::Player * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SetWrapperT_BWAPI__Unit_p_t = {"_p_SetWrapperT_BWAPI__Unit_p_t", "SetWrapper< BWAPI::Unit * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SetWrapperT_BWTA__BaseLocation_p_t = {"_p_SetWrapperT_BWTA__BaseLocation_p_t", "SetWrapper< BWTA::BaseLocation * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SetWrapperT_BWTA__Chokepoint_p_t = {"_p_SetWrapperT_BWTA__Chokepoint_p_t", "SetWrapper< BWTA::Chokepoint * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SetWrapperT_BWTA__Region_p_t = {"_p_SetWrapperT_BWTA__Region_p_t", "SetWrapper< BWTA::Region * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SetWrapper_PtrNextT_BWAPI__Position_t = {"_p_SetWrapper_PtrNextT_BWAPI__Position_t", "SetWrapper_PtrNext< BWAPI::Position > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SetWrapper_PtrNextT_BWAPI__TilePosition_t = {"_p_SetWrapper_PtrNextT_BWAPI__TilePosition_t", "SetWrapper_PtrNext< BWAPI::TilePosition > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SetWrapper_PtrNextT_BWAPI__UnitType_t = {"_p_SetWrapper_PtrNextT_BWAPI__UnitType_t", "SetWrapper_PtrNext< BWAPI::UnitType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TechType = {"_p_TechType", "TechType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TilePosition = {"_p_TilePosition", "TilePosition *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_UnitCommand = {"_p_UnitCommand", "UnitCommand *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_UnitCommandType = {"_p_UnitCommandType", "UnitCommandType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_UpgradeType = {"_p_UpgradeType", "UpgradeType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_BWAPI__Event_t = {"_p_std__listT_BWAPI__Event_t", "std::list< BWAPI::Event > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_BWAPI__Force_p_t = {"_p_std__listT_BWAPI__Force_p_t", "std::list< BWAPI::Force * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_BWAPI__Player_p_t = {"_p_std__listT_BWAPI__Player_p_t", "std::list< BWAPI::Player * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_BWAPI__Position_t = {"_p_std__listT_BWAPI__Position_t", "std::list< BWAPI::Position > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_BWAPI__TilePosition_t = {"_p_std__listT_BWAPI__TilePosition_t", "std::list< BWAPI::TilePosition > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_BWAPI__UnitType_t = {"_p_std__listT_BWAPI__UnitType_t", "std::list< BWAPI::UnitType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_BWAPI__Unit_p_t = {"_p_std__listT_BWAPI__Unit_p_t", "std::list< BWAPI::Unit * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_BWTA__BaseLocation_p_t = {"_p_std__listT_BWTA__BaseLocation_p_t", "std::list< BWTA::BaseLocation * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_BWTA__Chokepoint_p_t = {"_p_std__listT_BWTA__Chokepoint_p_t", "std::list< BWTA::Chokepoint * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_BWTA__Region_p_t = {"_p_std__listT_BWTA__Region_p_t", "std::list< BWTA::Region * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_BWAPI__TilePosition_double_t = {"_p_std__mapT_BWAPI__TilePosition_double_t", "std::map< BWAPI::TilePosition,double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_BWAPI__TilePosition_double_t = {"_p_std__pairT_BWAPI__TilePosition_double_t", "std::pair< BWAPI::TilePosition,double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_BWAPI__BulletType_t = {"_p_std__setT_BWAPI__BulletType_t", "std::set< BWAPI::BulletType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_BWAPI__Bullet_p_t = {"_p_std__setT_BWAPI__Bullet_p_t", "std::set< BWAPI::Bullet * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_BWAPI__DamageType_t = {"_p_std__setT_BWAPI__DamageType_t", "std::set< BWAPI::DamageType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_BWAPI__Error_t = {"_p_std__setT_BWAPI__Error_t", "std::set< BWAPI::Error > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_BWAPI__ExplosionType_t = {"_p_std__setT_BWAPI__ExplosionType_t", "std::set< BWAPI::ExplosionType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_BWAPI__Force_p_t = {"_p_std__setT_BWAPI__Force_p_t", "std::set< BWAPI::Force * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_BWAPI__GameType_t = {"_p_std__setT_BWAPI__GameType_t", "std::set< BWAPI::GameType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_BWAPI__Order_t = {"_p_std__setT_BWAPI__Order_t", "std::set< BWAPI::Order > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_BWAPI__PlayerType_t = {"_p_std__setT_BWAPI__PlayerType_t", "std::set< BWAPI::PlayerType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_BWAPI__Player_p_t = {"_p_std__setT_BWAPI__Player_p_t", "std::set< BWAPI::Player * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_BWAPI__Position_t = {"_p_std__setT_BWAPI__Position_t", "std::set< BWAPI::Position > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_BWAPI__Race_t = {"_p_std__setT_BWAPI__Race_t", "std::set< BWAPI::Race > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_BWAPI__TechType_t = {"_p_std__setT_BWAPI__TechType_t", "std::set< BWAPI::TechType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_BWAPI__TilePosition_t = {"_p_std__setT_BWAPI__TilePosition_t", "std::set< BWAPI::TilePosition > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_BWAPI__UnitCommandType_t = {"_p_std__setT_BWAPI__UnitCommandType_t", "std::set< BWAPI::UnitCommandType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_BWAPI__UnitSizeType_t = {"_p_std__setT_BWAPI__UnitSizeType_t", "std::set< BWAPI::UnitSizeType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_BWAPI__UnitType_t = {"_p_std__setT_BWAPI__UnitType_t", "std::set< BWAPI::UnitType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_BWAPI__Unit_p_t = {"_p_std__setT_BWAPI__Unit_p_t", "std::set< BWAPI::Unit * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_BWAPI__UpgradeType_t = {"_p_std__setT_BWAPI__UpgradeType_t", "std::set< BWAPI::UpgradeType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_BWAPI__WeaponType_t = {"_p_std__setT_BWAPI__WeaponType_t", "std::set< BWAPI::WeaponType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_BWTA__BaseLocation_p_t = {"_p_std__setT_BWTA__BaseLocation_p_t", "std::set< BWTA::BaseLocation * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_BWTA__Chokepoint_p_t = {"_p_std__setT_BWTA__Chokepoint_p_t", "std::set< BWTA::Chokepoint * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_BWTA__Region_p_t = {"_p_std__setT_BWTA__Region_p_t", "std::set< BWTA::Region * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_BaseLocation_p_t = {"_p_std__setT_BaseLocation_p_t", "std::set< BaseLocation * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_Chokepoint_p_t = {"_p_std__setT_Chokepoint_p_t", "std::set< Chokepoint * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_Position_t = {"_p_std__setT_Position_t", "std::set< Position > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_Region_p_t = {"_p_std__setT_Region_p_t", "std::set< Region * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t = {"_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t", "std::vector< BWAPI::Position,std::allocator< BWAPI::Position > > *|std::vector< BWAPI::Position > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t__allocator_type = {"_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t__allocator_type", "std::vector< BWAPI::Position >::allocator_type *|std::allocator< BWAPI::Position > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t__value_type = {"_p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t__value_type", "std::vector< BWAPI::Position >::value_type *|BWAPI::Position *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_BWAPI__TilePosition_std__allocatorT_BWAPI__TilePosition_t_t = {"_p_std__vectorT_BWAPI__TilePosition_std__allocatorT_BWAPI__TilePosition_t_t", "std::vector< BWAPI::TilePosition,std::allocator< BWAPI::TilePosition > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_BWAPI__AIModule,
  &_swigt__p_BWAPI__Bitmap,
  &_swigt__p_BWAPI__BitmapProxy,
  &_swigt__p_BWAPI__Bullet,
  &_swigt__p_BWAPI__BulletType,
  &_swigt__p_BWAPI__Color,
  &_swigt__p_BWAPI__DamageType,
  &_swigt__p_BWAPI__Error,
  &_swigt__p_BWAPI__Event,
  &_swigt__p_BWAPI__ExplosionType,
  &_swigt__p_BWAPI__Force,
  &_swigt__p_BWAPI__Game,
  &_swigt__p_BWAPI__GameType,
  &_swigt__p_BWAPI__Order,
  &_swigt__p_BWAPI__Player,
  &_swigt__p_BWAPI__PlayerType,
  &_swigt__p_BWAPI__Position,
  &_swigt__p_BWAPI__Race,
  &_swigt__p_BWAPI__TechType,
  &_swigt__p_BWAPI__TilePosition,
  &_swigt__p_BWAPI__Unit,
  &_swigt__p_BWAPI__UnitCommand,
  &_swigt__p_BWAPI__UnitCommandType,
  &_swigt__p_BWAPI__UnitSizeType,
  &_swigt__p_BWAPI__UnitType,
  &_swigt__p_BWAPI__UpgradeType,
  &_swigt__p_BWAPI__WeaponType,
  &_swigt__p_BWTA__BaseLocation,
  &_swigt__p_BWTA__Chokepoint,
  &_swigt__p_BWTA__Region,
  &_swigt__p_BulletType,
  &_swigt__p_Chokepoint,
  &_swigt__p_EventType__Enum,
  &_swigt__p_GameType,
  &_swigt__p_Key,
  &_swigt__p_ListWrapperT_BWAPI__Force_p_t,
  &_swigt__p_ListWrapperT_BWAPI__Player_p_t,
  &_swigt__p_ListWrapperT_BWAPI__Unit_p_t,
  &_swigt__p_ListWrapperT_BWTA__BaseLocation_p_t,
  &_swigt__p_ListWrapperT_BWTA__Chokepoint_p_t,
  &_swigt__p_ListWrapperT_BWTA__Region_p_t,
  &_swigt__p_ListWrapper_PtrNextT_BWAPI__Position_t,
  &_swigt__p_ListWrapper_PtrNextT_BWAPI__TilePosition_t,
  &_swigt__p_ListWrapper_PtrNextT_BWAPI__UnitType_t,
  &_swigt__p_MouseButton,
  &_swigt__p_PlayerType,
  &_swigt__p_Position,
  &_swigt__p_Race,
  &_swigt__p_RectangleArrayT_double_t,
  &_swigt__p_Region,
  &_swigt__p_SetWrapperT_BWAPI__Force_p_t,
  &_swigt__p_SetWrapperT_BWAPI__Player_p_t,
  &_swigt__p_SetWrapperT_BWAPI__Unit_p_t,
  &_swigt__p_SetWrapperT_BWTA__BaseLocation_p_t,
  &_swigt__p_SetWrapperT_BWTA__Chokepoint_p_t,
  &_swigt__p_SetWrapperT_BWTA__Region_p_t,
  &_swigt__p_SetWrapper_PtrNextT_BWAPI__Position_t,
  &_swigt__p_SetWrapper_PtrNextT_BWAPI__TilePosition_t,
  &_swigt__p_SetWrapper_PtrNextT_BWAPI__UnitType_t,
  &_swigt__p_TechType,
  &_swigt__p_TilePosition,
  &_swigt__p_UnitCommand,
  &_swigt__p_UnitCommandType,
  &_swigt__p_UpgradeType,
  &_swigt__p_allocator_type,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_p_PyObject,
  &_swigt__p_size_type,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__listT_BWAPI__Event_t,
  &_swigt__p_std__listT_BWAPI__Force_p_t,
  &_swigt__p_std__listT_BWAPI__Player_p_t,
  &_swigt__p_std__listT_BWAPI__Position_t,
  &_swigt__p_std__listT_BWAPI__TilePosition_t,
  &_swigt__p_std__listT_BWAPI__UnitType_t,
  &_swigt__p_std__listT_BWAPI__Unit_p_t,
  &_swigt__p_std__listT_BWTA__BaseLocation_p_t,
  &_swigt__p_std__listT_BWTA__Chokepoint_p_t,
  &_swigt__p_std__listT_BWTA__Region_p_t,
  &_swigt__p_std__mapT_BWAPI__TilePosition_double_t,
  &_swigt__p_std__pairT_BWAPI__TilePosition_double_t,
  &_swigt__p_std__setT_BWAPI__BulletType_t,
  &_swigt__p_std__setT_BWAPI__Bullet_p_t,
  &_swigt__p_std__setT_BWAPI__DamageType_t,
  &_swigt__p_std__setT_BWAPI__Error_t,
  &_swigt__p_std__setT_BWAPI__ExplosionType_t,
  &_swigt__p_std__setT_BWAPI__Force_p_t,
  &_swigt__p_std__setT_BWAPI__GameType_t,
  &_swigt__p_std__setT_BWAPI__Order_t,
  &_swigt__p_std__setT_BWAPI__PlayerType_t,
  &_swigt__p_std__setT_BWAPI__Player_p_t,
  &_swigt__p_std__setT_BWAPI__Position_t,
  &_swigt__p_std__setT_BWAPI__Race_t,
  &_swigt__p_std__setT_BWAPI__TechType_t,
  &_swigt__p_std__setT_BWAPI__TilePosition_t,
  &_swigt__p_std__setT_BWAPI__UnitCommandType_t,
  &_swigt__p_std__setT_BWAPI__UnitSizeType_t,
  &_swigt__p_std__setT_BWAPI__UnitType_t,
  &_swigt__p_std__setT_BWAPI__Unit_p_t,
  &_swigt__p_std__setT_BWAPI__UpgradeType_t,
  &_swigt__p_std__setT_BWAPI__WeaponType_t,
  &_swigt__p_std__setT_BWTA__BaseLocation_p_t,
  &_swigt__p_std__setT_BWTA__Chokepoint_p_t,
  &_swigt__p_std__setT_BWTA__Region_p_t,
  &_swigt__p_std__setT_BaseLocation_p_t,
  &_swigt__p_std__setT_Chokepoint_p_t,
  &_swigt__p_std__setT_Position_t,
  &_swigt__p_std__setT_Region_p_t,
  &_swigt__p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t,
  &_swigt__p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t__allocator_type,
  &_swigt__p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t__value_type,
  &_swigt__p_std__vectorT_BWAPI__TilePosition_std__allocatorT_BWAPI__TilePosition_t_t,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_unsigned_char,
  &_swigt__p_value_type,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_BWAPI__AIModule[] = {  {&_swigt__p_BWAPI__AIModule, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BWAPI__Bitmap[] = {  {&_swigt__p_BWAPI__Bitmap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BWAPI__BitmapProxy[] = {  {&_swigt__p_BWAPI__BitmapProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BWAPI__Bullet[] = {  {&_swigt__p_BWAPI__Bullet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BWAPI__BulletType[] = {  {&_swigt__p_BWAPI__BulletType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BWAPI__Color[] = {  {&_swigt__p_BWAPI__Color, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BWAPI__DamageType[] = {  {&_swigt__p_BWAPI__DamageType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BWAPI__Error[] = {  {&_swigt__p_BWAPI__Error, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BWAPI__Event[] = {  {&_swigt__p_BWAPI__Event, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BWAPI__ExplosionType[] = {  {&_swigt__p_BWAPI__ExplosionType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BWAPI__Force[] = {  {&_swigt__p_BWAPI__Force, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BWAPI__Game[] = {  {&_swigt__p_BWAPI__Game, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BWAPI__GameType[] = {  {&_swigt__p_BWAPI__GameType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BWAPI__Order[] = {  {&_swigt__p_BWAPI__Order, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BWAPI__Player[] = {  {&_swigt__p_BWAPI__Player, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BWAPI__PlayerType[] = {  {&_swigt__p_BWAPI__PlayerType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BWAPI__Position[] = {  {&_swigt__p_BWAPI__Position, 0, 0, 0},  {&_swigt__p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BWAPI__Race[] = {  {&_swigt__p_BWAPI__Race, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BWAPI__TechType[] = {  {&_swigt__p_BWAPI__TechType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BWAPI__TilePosition[] = {  {&_swigt__p_BWAPI__TilePosition, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BWAPI__Unit[] = {  {&_swigt__p_BWAPI__Unit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BWAPI__UnitCommand[] = {  {&_swigt__p_BWAPI__UnitCommand, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BWAPI__UnitCommandType[] = {  {&_swigt__p_BWAPI__UnitCommandType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BWAPI__UnitSizeType[] = {  {&_swigt__p_BWAPI__UnitSizeType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BWAPI__UnitType[] = {  {&_swigt__p_BWAPI__UnitType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BWAPI__UpgradeType[] = {  {&_swigt__p_BWAPI__UpgradeType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BWAPI__WeaponType[] = {  {&_swigt__p_BWAPI__WeaponType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BWTA__BaseLocation[] = {  {&_swigt__p_BWTA__BaseLocation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BWTA__Chokepoint[] = {  {&_swigt__p_BWTA__Chokepoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BWTA__Region[] = {  {&_swigt__p_BWTA__Region, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BulletType[] = {  {&_swigt__p_BulletType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Chokepoint[] = {  {&_swigt__p_Chokepoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EventType__Enum[] = {  {&_swigt__p_EventType__Enum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GameType[] = {  {&_swigt__p_GameType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Key[] = {  {&_swigt__p_Key, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ListWrapperT_BWAPI__Force_p_t[] = {  {&_swigt__p_ListWrapperT_BWAPI__Force_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ListWrapperT_BWAPI__Player_p_t[] = {  {&_swigt__p_ListWrapperT_BWAPI__Player_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ListWrapperT_BWAPI__Unit_p_t[] = {  {&_swigt__p_ListWrapperT_BWAPI__Unit_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ListWrapperT_BWTA__BaseLocation_p_t[] = {  {&_swigt__p_ListWrapperT_BWTA__BaseLocation_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ListWrapperT_BWTA__Chokepoint_p_t[] = {  {&_swigt__p_ListWrapperT_BWTA__Chokepoint_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ListWrapperT_BWTA__Region_p_t[] = {  {&_swigt__p_ListWrapperT_BWTA__Region_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ListWrapper_PtrNextT_BWAPI__Position_t[] = {  {&_swigt__p_ListWrapper_PtrNextT_BWAPI__Position_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ListWrapper_PtrNextT_BWAPI__TilePosition_t[] = {  {&_swigt__p_ListWrapper_PtrNextT_BWAPI__TilePosition_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ListWrapper_PtrNextT_BWAPI__UnitType_t[] = {  {&_swigt__p_ListWrapper_PtrNextT_BWAPI__UnitType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MouseButton[] = {  {&_swigt__p_MouseButton, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlayerType[] = {  {&_swigt__p_PlayerType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Position[] = {  {&_swigt__p_Position, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Race[] = {  {&_swigt__p_Race, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RectangleArrayT_double_t[] = {  {&_swigt__p_RectangleArrayT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Region[] = {  {&_swigt__p_Region, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SetWrapperT_BWAPI__Force_p_t[] = {  {&_swigt__p_SetWrapperT_BWAPI__Force_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SetWrapperT_BWAPI__Player_p_t[] = {  {&_swigt__p_SetWrapperT_BWAPI__Player_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SetWrapperT_BWAPI__Unit_p_t[] = {  {&_swigt__p_SetWrapperT_BWAPI__Unit_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SetWrapperT_BWTA__BaseLocation_p_t[] = {  {&_swigt__p_SetWrapperT_BWTA__BaseLocation_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SetWrapperT_BWTA__Chokepoint_p_t[] = {  {&_swigt__p_SetWrapperT_BWTA__Chokepoint_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SetWrapperT_BWTA__Region_p_t[] = {  {&_swigt__p_SetWrapperT_BWTA__Region_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SetWrapper_PtrNextT_BWAPI__Position_t[] = {  {&_swigt__p_SetWrapper_PtrNextT_BWAPI__Position_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SetWrapper_PtrNextT_BWAPI__TilePosition_t[] = {  {&_swigt__p_SetWrapper_PtrNextT_BWAPI__TilePosition_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SetWrapper_PtrNextT_BWAPI__UnitType_t[] = {  {&_swigt__p_SetWrapper_PtrNextT_BWAPI__UnitType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TechType[] = {  {&_swigt__p_TechType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TilePosition[] = {  {&_swigt__p_TilePosition, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UnitCommand[] = {  {&_swigt__p_UnitCommand, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UnitCommandType[] = {  {&_swigt__p_UnitCommandType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UpgradeType[] = {  {&_swigt__p_UpgradeType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_BWAPI__Event_t[] = {  {&_swigt__p_std__listT_BWAPI__Event_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_BWAPI__Force_p_t[] = {  {&_swigt__p_std__listT_BWAPI__Force_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_BWAPI__Player_p_t[] = {  {&_swigt__p_std__listT_BWAPI__Player_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_BWAPI__Position_t[] = {  {&_swigt__p_std__listT_BWAPI__Position_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_BWAPI__TilePosition_t[] = {  {&_swigt__p_std__listT_BWAPI__TilePosition_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_BWAPI__UnitType_t[] = {  {&_swigt__p_std__listT_BWAPI__UnitType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_BWAPI__Unit_p_t[] = {  {&_swigt__p_std__listT_BWAPI__Unit_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_BWTA__BaseLocation_p_t[] = {  {&_swigt__p_std__listT_BWTA__BaseLocation_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_BWTA__Chokepoint_p_t[] = {  {&_swigt__p_std__listT_BWTA__Chokepoint_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_BWTA__Region_p_t[] = {  {&_swigt__p_std__listT_BWTA__Region_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_BWAPI__TilePosition_double_t[] = {  {&_swigt__p_std__mapT_BWAPI__TilePosition_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_BWAPI__TilePosition_double_t[] = {  {&_swigt__p_std__pairT_BWAPI__TilePosition_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_BWAPI__BulletType_t[] = {  {&_swigt__p_std__setT_BWAPI__BulletType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_BWAPI__Bullet_p_t[] = {  {&_swigt__p_std__setT_BWAPI__Bullet_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_BWAPI__DamageType_t[] = {  {&_swigt__p_std__setT_BWAPI__DamageType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_BWAPI__Error_t[] = {  {&_swigt__p_std__setT_BWAPI__Error_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_BWAPI__ExplosionType_t[] = {  {&_swigt__p_std__setT_BWAPI__ExplosionType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_BWAPI__Force_p_t[] = {  {&_swigt__p_std__setT_BWAPI__Force_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_BWAPI__GameType_t[] = {  {&_swigt__p_std__setT_BWAPI__GameType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_BWAPI__Order_t[] = {  {&_swigt__p_std__setT_BWAPI__Order_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_BWAPI__PlayerType_t[] = {  {&_swigt__p_std__setT_BWAPI__PlayerType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_BWAPI__Player_p_t[] = {  {&_swigt__p_std__setT_BWAPI__Player_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_BWAPI__Position_t[] = {  {&_swigt__p_std__setT_BWAPI__Position_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_BWAPI__Race_t[] = {  {&_swigt__p_std__setT_BWAPI__Race_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_BWAPI__TechType_t[] = {  {&_swigt__p_std__setT_BWAPI__TechType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_BWAPI__TilePosition_t[] = {  {&_swigt__p_std__setT_BWAPI__TilePosition_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_BWAPI__UnitCommandType_t[] = {  {&_swigt__p_std__setT_BWAPI__UnitCommandType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_BWAPI__UnitSizeType_t[] = {  {&_swigt__p_std__setT_BWAPI__UnitSizeType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_BWAPI__UnitType_t[] = {  {&_swigt__p_std__setT_BWAPI__UnitType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_BWAPI__Unit_p_t[] = {  {&_swigt__p_std__setT_BWAPI__Unit_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_BWAPI__UpgradeType_t[] = {  {&_swigt__p_std__setT_BWAPI__UpgradeType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_BWAPI__WeaponType_t[] = {  {&_swigt__p_std__setT_BWAPI__WeaponType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_BWTA__BaseLocation_p_t[] = {  {&_swigt__p_std__setT_BWTA__BaseLocation_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_BWTA__Chokepoint_p_t[] = {  {&_swigt__p_std__setT_BWTA__Chokepoint_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_BWTA__Region_p_t[] = {  {&_swigt__p_std__setT_BWTA__Region_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_BaseLocation_p_t[] = {  {&_swigt__p_std__setT_BaseLocation_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_Chokepoint_p_t[] = {  {&_swigt__p_std__setT_Chokepoint_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_Position_t[] = {  {&_swigt__p_std__setT_Position_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_Region_p_t[] = {  {&_swigt__p_std__setT_Region_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t[] = {  {&_swigt__p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t__value_type[] = {  {&_swigt__p_BWAPI__Position, 0, 0, 0},  {&_swigt__p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_BWAPI__TilePosition_std__allocatorT_BWAPI__TilePosition_t_t[] = {  {&_swigt__p_std__vectorT_BWAPI__TilePosition_std__allocatorT_BWAPI__TilePosition_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_BWAPI__AIModule,
  _swigc__p_BWAPI__Bitmap,
  _swigc__p_BWAPI__BitmapProxy,
  _swigc__p_BWAPI__Bullet,
  _swigc__p_BWAPI__BulletType,
  _swigc__p_BWAPI__Color,
  _swigc__p_BWAPI__DamageType,
  _swigc__p_BWAPI__Error,
  _swigc__p_BWAPI__Event,
  _swigc__p_BWAPI__ExplosionType,
  _swigc__p_BWAPI__Force,
  _swigc__p_BWAPI__Game,
  _swigc__p_BWAPI__GameType,
  _swigc__p_BWAPI__Order,
  _swigc__p_BWAPI__Player,
  _swigc__p_BWAPI__PlayerType,
  _swigc__p_BWAPI__Position,
  _swigc__p_BWAPI__Race,
  _swigc__p_BWAPI__TechType,
  _swigc__p_BWAPI__TilePosition,
  _swigc__p_BWAPI__Unit,
  _swigc__p_BWAPI__UnitCommand,
  _swigc__p_BWAPI__UnitCommandType,
  _swigc__p_BWAPI__UnitSizeType,
  _swigc__p_BWAPI__UnitType,
  _swigc__p_BWAPI__UpgradeType,
  _swigc__p_BWAPI__WeaponType,
  _swigc__p_BWTA__BaseLocation,
  _swigc__p_BWTA__Chokepoint,
  _swigc__p_BWTA__Region,
  _swigc__p_BulletType,
  _swigc__p_Chokepoint,
  _swigc__p_EventType__Enum,
  _swigc__p_GameType,
  _swigc__p_Key,
  _swigc__p_ListWrapperT_BWAPI__Force_p_t,
  _swigc__p_ListWrapperT_BWAPI__Player_p_t,
  _swigc__p_ListWrapperT_BWAPI__Unit_p_t,
  _swigc__p_ListWrapperT_BWTA__BaseLocation_p_t,
  _swigc__p_ListWrapperT_BWTA__Chokepoint_p_t,
  _swigc__p_ListWrapperT_BWTA__Region_p_t,
  _swigc__p_ListWrapper_PtrNextT_BWAPI__Position_t,
  _swigc__p_ListWrapper_PtrNextT_BWAPI__TilePosition_t,
  _swigc__p_ListWrapper_PtrNextT_BWAPI__UnitType_t,
  _swigc__p_MouseButton,
  _swigc__p_PlayerType,
  _swigc__p_Position,
  _swigc__p_Race,
  _swigc__p_RectangleArrayT_double_t,
  _swigc__p_Region,
  _swigc__p_SetWrapperT_BWAPI__Force_p_t,
  _swigc__p_SetWrapperT_BWAPI__Player_p_t,
  _swigc__p_SetWrapperT_BWAPI__Unit_p_t,
  _swigc__p_SetWrapperT_BWTA__BaseLocation_p_t,
  _swigc__p_SetWrapperT_BWTA__Chokepoint_p_t,
  _swigc__p_SetWrapperT_BWTA__Region_p_t,
  _swigc__p_SetWrapper_PtrNextT_BWAPI__Position_t,
  _swigc__p_SetWrapper_PtrNextT_BWAPI__TilePosition_t,
  _swigc__p_SetWrapper_PtrNextT_BWAPI__UnitType_t,
  _swigc__p_TechType,
  _swigc__p_TilePosition,
  _swigc__p_UnitCommand,
  _swigc__p_UnitCommandType,
  _swigc__p_UpgradeType,
  _swigc__p_allocator_type,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_p_PyObject,
  _swigc__p_size_type,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__listT_BWAPI__Event_t,
  _swigc__p_std__listT_BWAPI__Force_p_t,
  _swigc__p_std__listT_BWAPI__Player_p_t,
  _swigc__p_std__listT_BWAPI__Position_t,
  _swigc__p_std__listT_BWAPI__TilePosition_t,
  _swigc__p_std__listT_BWAPI__UnitType_t,
  _swigc__p_std__listT_BWAPI__Unit_p_t,
  _swigc__p_std__listT_BWTA__BaseLocation_p_t,
  _swigc__p_std__listT_BWTA__Chokepoint_p_t,
  _swigc__p_std__listT_BWTA__Region_p_t,
  _swigc__p_std__mapT_BWAPI__TilePosition_double_t,
  _swigc__p_std__pairT_BWAPI__TilePosition_double_t,
  _swigc__p_std__setT_BWAPI__BulletType_t,
  _swigc__p_std__setT_BWAPI__Bullet_p_t,
  _swigc__p_std__setT_BWAPI__DamageType_t,
  _swigc__p_std__setT_BWAPI__Error_t,
  _swigc__p_std__setT_BWAPI__ExplosionType_t,
  _swigc__p_std__setT_BWAPI__Force_p_t,
  _swigc__p_std__setT_BWAPI__GameType_t,
  _swigc__p_std__setT_BWAPI__Order_t,
  _swigc__p_std__setT_BWAPI__PlayerType_t,
  _swigc__p_std__setT_BWAPI__Player_p_t,
  _swigc__p_std__setT_BWAPI__Position_t,
  _swigc__p_std__setT_BWAPI__Race_t,
  _swigc__p_std__setT_BWAPI__TechType_t,
  _swigc__p_std__setT_BWAPI__TilePosition_t,
  _swigc__p_std__setT_BWAPI__UnitCommandType_t,
  _swigc__p_std__setT_BWAPI__UnitSizeType_t,
  _swigc__p_std__setT_BWAPI__UnitType_t,
  _swigc__p_std__setT_BWAPI__Unit_p_t,
  _swigc__p_std__setT_BWAPI__UpgradeType_t,
  _swigc__p_std__setT_BWAPI__WeaponType_t,
  _swigc__p_std__setT_BWTA__BaseLocation_p_t,
  _swigc__p_std__setT_BWTA__Chokepoint_p_t,
  _swigc__p_std__setT_BWTA__Region_p_t,
  _swigc__p_std__setT_BaseLocation_p_t,
  _swigc__p_std__setT_Chokepoint_p_t,
  _swigc__p_std__setT_Position_t,
  _swigc__p_std__setT_Region_p_t,
  _swigc__p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t,
  _swigc__p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t__allocator_type,
  _swigc__p_std__vectorT_BWAPI__Position_std__allocatorT_BWAPI__Position_t_t__value_type,
  _swigc__p_std__vectorT_BWAPI__TilePosition_std__allocatorT_BWAPI__TilePosition_t_t,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_unsigned_char,
  _swigc__p_value_type,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  clientdata = clientdata;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;  
    if (!type_init) {
      const PyTypeObject tmp
      = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* Number of items in variable part (ob_size) */
#endif
        (char *)"swigvarlink",              /* Type name (tp_name) */
        sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
        0,                                  /* Itemsize (tp_itemsize) */
        (destructor) swig_varlink_dealloc,  /* Deallocator (tp_dealloc) */ 
        (printfunc) swig_varlink_print,     /* Print (tp_print) */
        (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
        (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      /* for Python 3 we already assigned ob_type in PyVarObject_HEAD_INIT() */
#if PY_VERSION_HEX < 0x03000000
      varlink_type.ob_type = &PyType_Type;
#endif
      type_init = 1;
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d;  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  d = PyModule_GetDict(m);
  
  SWIG_InitializeModule(0);
  SWIG_InstallConstants(d,swig_const_table);
  
  
  PyDict_SetItemString(d,(char*)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char*)"BulletTypes_Melee",Swig_var_BulletTypes_Melee_get, Swig_var_BulletTypes_Melee_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Fusion_Cutter_Hit",Swig_var_Fusion_Cutter_Hit_get, Swig_var_Fusion_Cutter_Hit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Gauss_Rifle_Hit",Swig_var_Gauss_Rifle_Hit_get, Swig_var_Gauss_Rifle_Hit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"C_10_Canister_Rifle_Hit",Swig_var_C_10_Canister_Rifle_Hit_get, Swig_var_C_10_Canister_Rifle_Hit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BulletTypes_Gemini_Missiles",Swig_var_BulletTypes_Gemini_Missiles_get, Swig_var_BulletTypes_Gemini_Missiles_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BulletTypes_Fragmentation_Grenade",Swig_var_BulletTypes_Fragmentation_Grenade_get, Swig_var_BulletTypes_Fragmentation_Grenade_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BulletTypes_Longbolt_Missile",Swig_var_BulletTypes_Longbolt_Missile_get, Swig_var_BulletTypes_Longbolt_Missile_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ATS_ATA_Laser_Battery",Swig_var_ATS_ATA_Laser_Battery_get, Swig_var_ATS_ATA_Laser_Battery_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BulletTypes_Burst_Lasers",Swig_var_BulletTypes_Burst_Lasers_get, Swig_var_BulletTypes_Burst_Lasers_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Arclite_Shock_Cannon_Hit",Swig_var_Arclite_Shock_Cannon_Hit_get, Swig_var_Arclite_Shock_Cannon_Hit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"EMP_Missile",Swig_var_EMP_Missile_get, Swig_var_EMP_Missile_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Dual_Photon_Blasters_Hit",Swig_var_Dual_Photon_Blasters_Hit_get, Swig_var_Dual_Photon_Blasters_Hit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Particle_Beam_Hit",Swig_var_Particle_Beam_Hit_get, Swig_var_Particle_Beam_Hit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Anti_Matter_Missile",Swig_var_Anti_Matter_Missile_get, Swig_var_Anti_Matter_Missile_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BulletTypes_Pulse_Cannon",Swig_var_BulletTypes_Pulse_Cannon_get, Swig_var_BulletTypes_Pulse_Cannon_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Psionic_Shockwave_Hit",Swig_var_Psionic_Shockwave_Hit_get, Swig_var_Psionic_Shockwave_Hit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BulletTypes_Psionic_Storm",Swig_var_BulletTypes_Psionic_Storm_get, Swig_var_BulletTypes_Psionic_Storm_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BulletTypes_Yamato_Gun",Swig_var_BulletTypes_Yamato_Gun_get, Swig_var_BulletTypes_Yamato_Gun_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BulletTypes_Phase_Disruptor",Swig_var_BulletTypes_Phase_Disruptor_get, Swig_var_BulletTypes_Phase_Disruptor_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"STA_STS_Cannon_Overlay",Swig_var_STA_STS_Cannon_Overlay_get, Swig_var_STA_STS_Cannon_Overlay_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Sunken_Colony_Tentacle",Swig_var_Sunken_Colony_Tentacle_get, Swig_var_Sunken_Colony_Tentacle_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BulletTypes_Acid_Spore",Swig_var_BulletTypes_Acid_Spore_get, Swig_var_BulletTypes_Acid_Spore_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BulletTypes_Glave_Wurm",Swig_var_BulletTypes_Glave_Wurm_get, Swig_var_BulletTypes_Glave_Wurm_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BulletTypes_Seeker_Spores",Swig_var_BulletTypes_Seeker_Spores_get, Swig_var_BulletTypes_Seeker_Spores_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Queen_Spell_Carrier",Swig_var_Queen_Spell_Carrier_get, Swig_var_Queen_Spell_Carrier_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Plague_Cloud",Swig_var_Plague_Cloud_get, Swig_var_Plague_Cloud_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BulletTypes_Consume",Swig_var_BulletTypes_Consume_get, Swig_var_BulletTypes_Consume_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Needle_Spine_Hit",Swig_var_Needle_Spine_Hit_get, Swig_var_Needle_Spine_Hit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Invisible",Swig_var_Invisible_get, Swig_var_Invisible_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Optical_Flare_Grenade",Swig_var_Optical_Flare_Grenade_get, Swig_var_Optical_Flare_Grenade_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BulletTypes_Halo_Rockets",Swig_var_BulletTypes_Halo_Rockets_get, Swig_var_BulletTypes_Halo_Rockets_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BulletTypes_Subterranean_Spines",Swig_var_BulletTypes_Subterranean_Spines_get, Swig_var_BulletTypes_Subterranean_Spines_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Corrosive_Acid_Shot",Swig_var_Corrosive_Acid_Shot_get, Swig_var_Corrosive_Acid_Shot_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BulletTypes_Neutron_Flare",Swig_var_BulletTypes_Neutron_Flare_get, Swig_var_BulletTypes_Neutron_Flare_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BulletTypes_None",Swig_var_BulletTypes_None_get, Swig_var_BulletTypes_None_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BulletTypes_Unknown",Swig_var_BulletTypes_Unknown_get, Swig_var_BulletTypes_Unknown_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Red",Swig_var_Red_get, Swig_var_Red_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Blue",Swig_var_Blue_get, Swig_var_Blue_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Teal",Swig_var_Teal_get, Swig_var_Teal_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Purple",Swig_var_Purple_get, Swig_var_Purple_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Orange",Swig_var_Orange_get, Swig_var_Orange_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Brown",Swig_var_Brown_get, Swig_var_Brown_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"White",Swig_var_White_get, Swig_var_White_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Yellow",Swig_var_Yellow_get, Swig_var_Yellow_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Green",Swig_var_Green_get, Swig_var_Green_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Cyan",Swig_var_Cyan_get, Swig_var_Cyan_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Black",Swig_var_Black_get, Swig_var_Black_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Grey",Swig_var_Grey_get, Swig_var_Grey_set);
  SWIG_Python_SetConstant(d, "TILE_SIZE",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "PYLON_X_RADIUS",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "PYLON_Y_RADIUS",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, "Screen",SWIG_From_int(static_cast< int >(BWAPI::CoordinateType::Screen)));
  SWIG_Python_SetConstant(d, "Map",SWIG_From_int(static_cast< int >(BWAPI::CoordinateType::Map)));
  SWIG_Python_SetConstant(d, "Mouse",SWIG_From_int(static_cast< int >(BWAPI::CoordinateType::Mouse)));
  SWIG_addvarlink(SWIG_globals(),(char*)"DamageTypes_Independent",Swig_var_DamageTypes_Independent_get, Swig_var_DamageTypes_Independent_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Explosive",Swig_var_Explosive_get, Swig_var_Explosive_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Concussive",Swig_var_Concussive_get, Swig_var_Concussive_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DamageTypes_Normal",Swig_var_DamageTypes_Normal_get, Swig_var_DamageTypes_Normal_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Ignore_Armor",Swig_var_Ignore_Armor_get, Swig_var_Ignore_Armor_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DamageTypes_None",Swig_var_DamageTypes_None_get, Swig_var_DamageTypes_None_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DamageTypes_Unknown",Swig_var_DamageTypes_Unknown_get, Swig_var_DamageTypes_Unknown_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Unit_Does_Not_Exist",Swig_var_Unit_Does_Not_Exist_get, Swig_var_Unit_Does_Not_Exist_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Unit_Not_Visible",Swig_var_Unit_Not_Visible_get, Swig_var_Unit_Not_Visible_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Unit_Not_Owned",Swig_var_Unit_Not_Owned_get, Swig_var_Unit_Not_Owned_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Unit_Busy",Swig_var_Unit_Busy_get, Swig_var_Unit_Busy_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Incompatible_UnitType",Swig_var_Incompatible_UnitType_get, Swig_var_Incompatible_UnitType_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Incompatible_TechType",Swig_var_Incompatible_TechType_get, Swig_var_Incompatible_TechType_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Incompatible_State",Swig_var_Incompatible_State_get, Swig_var_Incompatible_State_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Already_Researched",Swig_var_Already_Researched_get, Swig_var_Already_Researched_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Fully_Upgraded",Swig_var_Fully_Upgraded_get, Swig_var_Fully_Upgraded_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Currently_Researching",Swig_var_Currently_Researching_get, Swig_var_Currently_Researching_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Currently_Upgrading",Swig_var_Currently_Upgrading_get, Swig_var_Currently_Upgrading_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Insufficient_Minerals",Swig_var_Insufficient_Minerals_get, Swig_var_Insufficient_Minerals_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Insufficient_Gas",Swig_var_Insufficient_Gas_get, Swig_var_Insufficient_Gas_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Insufficient_Supply",Swig_var_Insufficient_Supply_get, Swig_var_Insufficient_Supply_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Insufficient_Energy",Swig_var_Insufficient_Energy_get, Swig_var_Insufficient_Energy_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Insufficient_Tech",Swig_var_Insufficient_Tech_get, Swig_var_Insufficient_Tech_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Insufficient_Ammo",Swig_var_Insufficient_Ammo_get, Swig_var_Insufficient_Ammo_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Insufficient_Space",Swig_var_Insufficient_Space_get, Swig_var_Insufficient_Space_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Invalid_Tile_Position",Swig_var_Invalid_Tile_Position_get, Swig_var_Invalid_Tile_Position_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Unbuildable_Location",Swig_var_Unbuildable_Location_get, Swig_var_Unbuildable_Location_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Unreachable_Location",Swig_var_Unreachable_Location_get, Swig_var_Unreachable_Location_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Out_Of_Range",Swig_var_Out_Of_Range_get, Swig_var_Out_Of_Range_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Unable_To_Hit",Swig_var_Unable_To_Hit_get, Swig_var_Unable_To_Hit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Access_Denied",Swig_var_Access_Denied_get, Swig_var_Access_Denied_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Errors_None",Swig_var_Errors_None_get, Swig_var_Errors_None_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Errors_Unknown",Swig_var_Errors_Unknown_get, Swig_var_Errors_Unknown_set);
  SWIG_Python_SetConstant(d, "EventTypes_MatchStart",SWIG_From_int(static_cast< int >(BWAPI::EventType::MatchStart)));
  SWIG_Python_SetConstant(d, "EventTypes_MatchEnd",SWIG_From_int(static_cast< int >(BWAPI::EventType::MatchEnd)));
  SWIG_Python_SetConstant(d, "EventTypes_MatchFrame",SWIG_From_int(static_cast< int >(BWAPI::EventType::MatchFrame)));
  SWIG_Python_SetConstant(d, "EventTypes_MenuFrame",SWIG_From_int(static_cast< int >(BWAPI::EventType::MenuFrame)));
  SWIG_Python_SetConstant(d, "EventTypes_SendText",SWIG_From_int(static_cast< int >(BWAPI::EventType::SendText)));
  SWIG_Python_SetConstant(d, "EventTypes_ReceiveText",SWIG_From_int(static_cast< int >(BWAPI::EventType::ReceiveText)));
  SWIG_Python_SetConstant(d, "EventTypes_PlayerLeft",SWIG_From_int(static_cast< int >(BWAPI::EventType::PlayerLeft)));
  SWIG_Python_SetConstant(d, "EventTypes_NukeDetect",SWIG_From_int(static_cast< int >(BWAPI::EventType::NukeDetect)));
  SWIG_Python_SetConstant(d, "EventTypes_UnitDiscover",SWIG_From_int(static_cast< int >(BWAPI::EventType::UnitDiscover)));
  SWIG_Python_SetConstant(d, "EventTypes_UnitEvade",SWIG_From_int(static_cast< int >(BWAPI::EventType::UnitEvade)));
  SWIG_Python_SetConstant(d, "EventTypes_UnitShow",SWIG_From_int(static_cast< int >(BWAPI::EventType::UnitShow)));
  SWIG_Python_SetConstant(d, "EventTypes_UnitHide",SWIG_From_int(static_cast< int >(BWAPI::EventType::UnitHide)));
  SWIG_Python_SetConstant(d, "EventTypes_UnitCreate",SWIG_From_int(static_cast< int >(BWAPI::EventType::UnitCreate)));
  SWIG_Python_SetConstant(d, "EventTypes_UnitDestroy",SWIG_From_int(static_cast< int >(BWAPI::EventType::UnitDestroy)));
  SWIG_Python_SetConstant(d, "EventTypes_UnitMorph",SWIG_From_int(static_cast< int >(BWAPI::EventType::UnitMorph)));
  SWIG_Python_SetConstant(d, "EventTypes_UnitRenegade",SWIG_From_int(static_cast< int >(BWAPI::EventType::UnitRenegade)));
  SWIG_Python_SetConstant(d, "EventTypes_SaveGame",SWIG_From_int(static_cast< int >(BWAPI::EventType::SaveGame)));
  SWIG_Python_SetConstant(d, "EventTypes_None",SWIG_From_int(static_cast< int >(BWAPI::EventType::None)));
  SWIG_addvarlink(SWIG_globals(),(char*)"ExplosionTypes_None",Swig_var_ExplosionTypes_None_get, Swig_var_ExplosionTypes_None_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExplosionTypes_Normal",Swig_var_ExplosionTypes_Normal_get, Swig_var_ExplosionTypes_Normal_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Radial_Splash",Swig_var_Radial_Splash_get, Swig_var_Radial_Splash_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Enemy_Splash",Swig_var_Enemy_Splash_get, Swig_var_Enemy_Splash_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExplosionTypes_Lockdown",Swig_var_ExplosionTypes_Lockdown_get, Swig_var_ExplosionTypes_Lockdown_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Nuclear_Missile",Swig_var_Nuclear_Missile_get, Swig_var_Nuclear_Missile_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExplosionTypes_Parasite",Swig_var_ExplosionTypes_Parasite_get, Swig_var_ExplosionTypes_Parasite_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Broodlings",Swig_var_Broodlings_get, Swig_var_Broodlings_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExplosionTypes_EMP_Shockwave",Swig_var_ExplosionTypes_EMP_Shockwave_get, Swig_var_ExplosionTypes_EMP_Shockwave_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExplosionTypes_Irradiate",Swig_var_ExplosionTypes_Irradiate_get, Swig_var_ExplosionTypes_Irradiate_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExplosionTypes_Ensnare",Swig_var_ExplosionTypes_Ensnare_get, Swig_var_ExplosionTypes_Ensnare_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExplosionTypes_Plague",Swig_var_ExplosionTypes_Plague_get, Swig_var_ExplosionTypes_Plague_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExplosionTypes_Stasis_Field",Swig_var_ExplosionTypes_Stasis_Field_get, Swig_var_ExplosionTypes_Stasis_Field_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExplosionTypes_Dark_Swarm",Swig_var_ExplosionTypes_Dark_Swarm_get, Swig_var_ExplosionTypes_Dark_Swarm_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExplosionTypes_Consume",Swig_var_ExplosionTypes_Consume_get, Swig_var_ExplosionTypes_Consume_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExplosionTypes_Yamato_Gun",Swig_var_ExplosionTypes_Yamato_Gun_get, Swig_var_ExplosionTypes_Yamato_Gun_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExplosionTypes_Restoration",Swig_var_ExplosionTypes_Restoration_get, Swig_var_ExplosionTypes_Restoration_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExplosionTypes_Disruption_Web",Swig_var_ExplosionTypes_Disruption_Web_get, Swig_var_ExplosionTypes_Disruption_Web_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExplosionTypes_Corrosive_Acid",Swig_var_ExplosionTypes_Corrosive_Acid_get, Swig_var_ExplosionTypes_Corrosive_Acid_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExplosionTypes_Mind_Control",Swig_var_ExplosionTypes_Mind_Control_get, Swig_var_ExplosionTypes_Mind_Control_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExplosionTypes_Feedback",Swig_var_ExplosionTypes_Feedback_get, Swig_var_ExplosionTypes_Feedback_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExplosionTypes_Optical_Flare",Swig_var_ExplosionTypes_Optical_Flare_get, Swig_var_ExplosionTypes_Optical_Flare_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExplosionTypes_Maelstrom",Swig_var_ExplosionTypes_Maelstrom_get, Swig_var_ExplosionTypes_Maelstrom_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Air_Splash",Swig_var_Air_Splash_get, Swig_var_Air_Splash_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExplosionTypes_Unknown",Swig_var_ExplosionTypes_Unknown_get, Swig_var_ExplosionTypes_Unknown_set);
  SWIG_Python_SetConstant(d, "CompleteMapInformation",SWIG_From_int(static_cast< int >(BWAPI::Flag::CompleteMapInformation)));
  SWIG_Python_SetConstant(d, "UserInput",SWIG_From_int(static_cast< int >(BWAPI::Flag::UserInput)));
  SWIG_Python_SetConstant(d, "Max",SWIG_From_int(static_cast< int >(BWAPI::Flag::Max)));
  SWIG_addvarlink(SWIG_globals(),(char*)"Broodwar",Swig_var_Broodwar_get, Swig_var_Broodwar_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"GameTypes_Melee",Swig_var_GameTypes_Melee_get, Swig_var_GameTypes_Melee_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Free_For_All",Swig_var_Free_For_All_get, Swig_var_Free_For_All_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"One_on_One",Swig_var_One_on_One_get, Swig_var_One_on_One_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Capture_The_Flag",Swig_var_Capture_The_Flag_get, Swig_var_Capture_The_Flag_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Greed",Swig_var_Greed_get, Swig_var_Greed_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Slaughter",Swig_var_Slaughter_get, Swig_var_Slaughter_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Sudden_Death",Swig_var_Sudden_Death_get, Swig_var_Sudden_Death_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Ladder",Swig_var_Ladder_get, Swig_var_Ladder_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Use_Map_Settings",Swig_var_Use_Map_Settings_get, Swig_var_Use_Map_Settings_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Team_Melee",Swig_var_Team_Melee_get, Swig_var_Team_Melee_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Team_Free_For_All",Swig_var_Team_Free_For_All_get, Swig_var_Team_Free_For_All_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Team_Capture_The_Flag",Swig_var_Team_Capture_The_Flag_get, Swig_var_Team_Capture_The_Flag_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Top_vs_Bottom",Swig_var_Top_vs_Bottom_get, Swig_var_Top_vs_Bottom_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Pro_Gamer_League",Swig_var_Pro_Gamer_League_get, Swig_var_Pro_Gamer_League_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"GameTypes_None",Swig_var_GameTypes_None_get, Swig_var_GameTypes_None_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"GameTypes_Unknown",Swig_var_GameTypes_Unknown_get, Swig_var_GameTypes_Unknown_set);
  SWIG_Python_SetConstant(d, "M_LEFT",SWIG_From_int(static_cast< int >(BWAPI::M_LEFT)));
  SWIG_Python_SetConstant(d, "M_RIGHT",SWIG_From_int(static_cast< int >(BWAPI::M_RIGHT)));
  SWIG_Python_SetConstant(d, "M_MIDDLE",SWIG_From_int(static_cast< int >(BWAPI::M_MIDDLE)));
  SWIG_Python_SetConstant(d, "K_LBUTTON",SWIG_From_int(static_cast< int >(BWAPI::K_LBUTTON)));
  SWIG_Python_SetConstant(d, "K_RBUTTON",SWIG_From_int(static_cast< int >(BWAPI::K_RBUTTON)));
  SWIG_Python_SetConstant(d, "K_CANCEL",SWIG_From_int(static_cast< int >(BWAPI::K_CANCEL)));
  SWIG_Python_SetConstant(d, "K_MBUTTON",SWIG_From_int(static_cast< int >(BWAPI::K_MBUTTON)));
  SWIG_Python_SetConstant(d, "K_XBUTTON1",SWIG_From_int(static_cast< int >(BWAPI::K_XBUTTON1)));
  SWIG_Python_SetConstant(d, "K_XBUTTON2",SWIG_From_int(static_cast< int >(BWAPI::K_XBUTTON2)));
  SWIG_Python_SetConstant(d, "K_BACK",SWIG_From_int(static_cast< int >(BWAPI::K_BACK)));
  SWIG_Python_SetConstant(d, "K_TAB",SWIG_From_int(static_cast< int >(BWAPI::K_TAB)));
  SWIG_Python_SetConstant(d, "K_CLEAR",SWIG_From_int(static_cast< int >(BWAPI::K_CLEAR)));
  SWIG_Python_SetConstant(d, "K_RETURN",SWIG_From_int(static_cast< int >(BWAPI::K_RETURN)));
  SWIG_Python_SetConstant(d, "K_SHIFT",SWIG_From_int(static_cast< int >(BWAPI::K_SHIFT)));
  SWIG_Python_SetConstant(d, "K_CONTROL",SWIG_From_int(static_cast< int >(BWAPI::K_CONTROL)));
  SWIG_Python_SetConstant(d, "K_MENU",SWIG_From_int(static_cast< int >(BWAPI::K_MENU)));
  SWIG_Python_SetConstant(d, "K_PAUSE",SWIG_From_int(static_cast< int >(BWAPI::K_PAUSE)));
  SWIG_Python_SetConstant(d, "K_CAPITAL",SWIG_From_int(static_cast< int >(BWAPI::K_CAPITAL)));
  SWIG_Python_SetConstant(d, "K_KANA",SWIG_From_int(static_cast< int >(BWAPI::K_KANA)));
  SWIG_Python_SetConstant(d, "K_HANGEUL",SWIG_From_int(static_cast< int >(BWAPI::K_HANGEUL)));
  SWIG_Python_SetConstant(d, "K_HANGUL",SWIG_From_int(static_cast< int >(BWAPI::K_HANGUL)));
  SWIG_Python_SetConstant(d, "K_JUNJA",SWIG_From_int(static_cast< int >(BWAPI::K_JUNJA)));
  SWIG_Python_SetConstant(d, "K_FINAL",SWIG_From_int(static_cast< int >(BWAPI::K_FINAL)));
  SWIG_Python_SetConstant(d, "K_HANJA",SWIG_From_int(static_cast< int >(BWAPI::K_HANJA)));
  SWIG_Python_SetConstant(d, "K_KANJI",SWIG_From_int(static_cast< int >(BWAPI::K_KANJI)));
  SWIG_Python_SetConstant(d, "K_ESCAPE",SWIG_From_int(static_cast< int >(BWAPI::K_ESCAPE)));
  SWIG_Python_SetConstant(d, "K_CONVERT",SWIG_From_int(static_cast< int >(BWAPI::K_CONVERT)));
  SWIG_Python_SetConstant(d, "K_NONCONVERT",SWIG_From_int(static_cast< int >(BWAPI::K_NONCONVERT)));
  SWIG_Python_SetConstant(d, "K_ACCEPT",SWIG_From_int(static_cast< int >(BWAPI::K_ACCEPT)));
  SWIG_Python_SetConstant(d, "K_MODECHANGE",SWIG_From_int(static_cast< int >(BWAPI::K_MODECHANGE)));
  SWIG_Python_SetConstant(d, "K_SPACE",SWIG_From_int(static_cast< int >(BWAPI::K_SPACE)));
  SWIG_Python_SetConstant(d, "K_PRIOR",SWIG_From_int(static_cast< int >(BWAPI::K_PRIOR)));
  SWIG_Python_SetConstant(d, "K_NEXT",SWIG_From_int(static_cast< int >(BWAPI::K_NEXT)));
  SWIG_Python_SetConstant(d, "K_END",SWIG_From_int(static_cast< int >(BWAPI::K_END)));
  SWIG_Python_SetConstant(d, "K_HOME",SWIG_From_int(static_cast< int >(BWAPI::K_HOME)));
  SWIG_Python_SetConstant(d, "K_LEFT",SWIG_From_int(static_cast< int >(BWAPI::K_LEFT)));
  SWIG_Python_SetConstant(d, "K_UP",SWIG_From_int(static_cast< int >(BWAPI::K_UP)));
  SWIG_Python_SetConstant(d, "K_RIGHT",SWIG_From_int(static_cast< int >(BWAPI::K_RIGHT)));
  SWIG_Python_SetConstant(d, "K_DOWN",SWIG_From_int(static_cast< int >(BWAPI::K_DOWN)));
  SWIG_Python_SetConstant(d, "K_SELECT",SWIG_From_int(static_cast< int >(BWAPI::K_SELECT)));
  SWIG_Python_SetConstant(d, "K_PRINT",SWIG_From_int(static_cast< int >(BWAPI::K_PRINT)));
  SWIG_Python_SetConstant(d, "K_EXECUTE",SWIG_From_int(static_cast< int >(BWAPI::K_EXECUTE)));
  SWIG_Python_SetConstant(d, "K_SNAPSHOT",SWIG_From_int(static_cast< int >(BWAPI::K_SNAPSHOT)));
  SWIG_Python_SetConstant(d, "K_INSERT",SWIG_From_int(static_cast< int >(BWAPI::K_INSERT)));
  SWIG_Python_SetConstant(d, "K_DELETE",SWIG_From_int(static_cast< int >(BWAPI::K_DELETE)));
  SWIG_Python_SetConstant(d, "K_HELP",SWIG_From_int(static_cast< int >(BWAPI::K_HELP)));
  SWIG_Python_SetConstant(d, "K_0",SWIG_From_int(static_cast< int >(BWAPI::K_0)));
  SWIG_Python_SetConstant(d, "K_1",SWIG_From_int(static_cast< int >(BWAPI::K_1)));
  SWIG_Python_SetConstant(d, "K_2",SWIG_From_int(static_cast< int >(BWAPI::K_2)));
  SWIG_Python_SetConstant(d, "K_3",SWIG_From_int(static_cast< int >(BWAPI::K_3)));
  SWIG_Python_SetConstant(d, "K_4",SWIG_From_int(static_cast< int >(BWAPI::K_4)));
  SWIG_Python_SetConstant(d, "K_5",SWIG_From_int(static_cast< int >(BWAPI::K_5)));
  SWIG_Python_SetConstant(d, "K_6",SWIG_From_int(static_cast< int >(BWAPI::K_6)));
  SWIG_Python_SetConstant(d, "K_7",SWIG_From_int(static_cast< int >(BWAPI::K_7)));
  SWIG_Python_SetConstant(d, "K_8",SWIG_From_int(static_cast< int >(BWAPI::K_8)));
  SWIG_Python_SetConstant(d, "K_9",SWIG_From_int(static_cast< int >(BWAPI::K_9)));
  SWIG_Python_SetConstant(d, "K_A",SWIG_From_int(static_cast< int >(BWAPI::K_A)));
  SWIG_Python_SetConstant(d, "K_B",SWIG_From_int(static_cast< int >(BWAPI::K_B)));
  SWIG_Python_SetConstant(d, "K_C",SWIG_From_int(static_cast< int >(BWAPI::K_C)));
  SWIG_Python_SetConstant(d, "K_D",SWIG_From_int(static_cast< int >(BWAPI::K_D)));
  SWIG_Python_SetConstant(d, "K_E",SWIG_From_int(static_cast< int >(BWAPI::K_E)));
  SWIG_Python_SetConstant(d, "K_F",SWIG_From_int(static_cast< int >(BWAPI::K_F)));
  SWIG_Python_SetConstant(d, "K_G",SWIG_From_int(static_cast< int >(BWAPI::K_G)));
  SWIG_Python_SetConstant(d, "K_H",SWIG_From_int(static_cast< int >(BWAPI::K_H)));
  SWIG_Python_SetConstant(d, "K_I",SWIG_From_int(static_cast< int >(BWAPI::K_I)));
  SWIG_Python_SetConstant(d, "K_J",SWIG_From_int(static_cast< int >(BWAPI::K_J)));
  SWIG_Python_SetConstant(d, "K_K",SWIG_From_int(static_cast< int >(BWAPI::K_K)));
  SWIG_Python_SetConstant(d, "K_L",SWIG_From_int(static_cast< int >(BWAPI::K_L)));
  SWIG_Python_SetConstant(d, "K_M",SWIG_From_int(static_cast< int >(BWAPI::K_M)));
  SWIG_Python_SetConstant(d, "K_N",SWIG_From_int(static_cast< int >(BWAPI::K_N)));
  SWIG_Python_SetConstant(d, "K_O",SWIG_From_int(static_cast< int >(BWAPI::K_O)));
  SWIG_Python_SetConstant(d, "K_P",SWIG_From_int(static_cast< int >(BWAPI::K_P)));
  SWIG_Python_SetConstant(d, "K_Q",SWIG_From_int(static_cast< int >(BWAPI::K_Q)));
  SWIG_Python_SetConstant(d, "K_R",SWIG_From_int(static_cast< int >(BWAPI::K_R)));
  SWIG_Python_SetConstant(d, "K_S",SWIG_From_int(static_cast< int >(BWAPI::K_S)));
  SWIG_Python_SetConstant(d, "K_T",SWIG_From_int(static_cast< int >(BWAPI::K_T)));
  SWIG_Python_SetConstant(d, "K_U",SWIG_From_int(static_cast< int >(BWAPI::K_U)));
  SWIG_Python_SetConstant(d, "K_V",SWIG_From_int(static_cast< int >(BWAPI::K_V)));
  SWIG_Python_SetConstant(d, "K_W",SWIG_From_int(static_cast< int >(BWAPI::K_W)));
  SWIG_Python_SetConstant(d, "K_X",SWIG_From_int(static_cast< int >(BWAPI::K_X)));
  SWIG_Python_SetConstant(d, "K_Y",SWIG_From_int(static_cast< int >(BWAPI::K_Y)));
  SWIG_Python_SetConstant(d, "K_Z",SWIG_From_int(static_cast< int >(BWAPI::K_Z)));
  SWIG_Python_SetConstant(d, "K_LWIN",SWIG_From_int(static_cast< int >(BWAPI::K_LWIN)));
  SWIG_Python_SetConstant(d, "K_RWIN",SWIG_From_int(static_cast< int >(BWAPI::K_RWIN)));
  SWIG_Python_SetConstant(d, "K_APPS",SWIG_From_int(static_cast< int >(BWAPI::K_APPS)));
  SWIG_Python_SetConstant(d, "K_SLEEP",SWIG_From_int(static_cast< int >(BWAPI::K_SLEEP)));
  SWIG_Python_SetConstant(d, "K_NUMPAD0",SWIG_From_int(static_cast< int >(BWAPI::K_NUMPAD0)));
  SWIG_Python_SetConstant(d, "K_NUMPAD1",SWIG_From_int(static_cast< int >(BWAPI::K_NUMPAD1)));
  SWIG_Python_SetConstant(d, "K_NUMPAD2",SWIG_From_int(static_cast< int >(BWAPI::K_NUMPAD2)));
  SWIG_Python_SetConstant(d, "K_NUMPAD3",SWIG_From_int(static_cast< int >(BWAPI::K_NUMPAD3)));
  SWIG_Python_SetConstant(d, "K_NUMPAD4",SWIG_From_int(static_cast< int >(BWAPI::K_NUMPAD4)));
  SWIG_Python_SetConstant(d, "K_NUMPAD5",SWIG_From_int(static_cast< int >(BWAPI::K_NUMPAD5)));
  SWIG_Python_SetConstant(d, "K_NUMPAD6",SWIG_From_int(static_cast< int >(BWAPI::K_NUMPAD6)));
  SWIG_Python_SetConstant(d, "K_NUMPAD7",SWIG_From_int(static_cast< int >(BWAPI::K_NUMPAD7)));
  SWIG_Python_SetConstant(d, "K_NUMPAD8",SWIG_From_int(static_cast< int >(BWAPI::K_NUMPAD8)));
  SWIG_Python_SetConstant(d, "K_NUMPAD9",SWIG_From_int(static_cast< int >(BWAPI::K_NUMPAD9)));
  SWIG_Python_SetConstant(d, "K_MULTIPLY",SWIG_From_int(static_cast< int >(BWAPI::K_MULTIPLY)));
  SWIG_Python_SetConstant(d, "K_ADD",SWIG_From_int(static_cast< int >(BWAPI::K_ADD)));
  SWIG_Python_SetConstant(d, "K_SEPARATOR",SWIG_From_int(static_cast< int >(BWAPI::K_SEPARATOR)));
  SWIG_Python_SetConstant(d, "K_SUBTRACT",SWIG_From_int(static_cast< int >(BWAPI::K_SUBTRACT)));
  SWIG_Python_SetConstant(d, "K_DECIMAL",SWIG_From_int(static_cast< int >(BWAPI::K_DECIMAL)));
  SWIG_Python_SetConstant(d, "K_DIVIDE",SWIG_From_int(static_cast< int >(BWAPI::K_DIVIDE)));
  SWIG_Python_SetConstant(d, "K_F1",SWIG_From_int(static_cast< int >(BWAPI::K_F1)));
  SWIG_Python_SetConstant(d, "K_F2",SWIG_From_int(static_cast< int >(BWAPI::K_F2)));
  SWIG_Python_SetConstant(d, "K_F3",SWIG_From_int(static_cast< int >(BWAPI::K_F3)));
  SWIG_Python_SetConstant(d, "K_F4",SWIG_From_int(static_cast< int >(BWAPI::K_F4)));
  SWIG_Python_SetConstant(d, "K_F5",SWIG_From_int(static_cast< int >(BWAPI::K_F5)));
  SWIG_Python_SetConstant(d, "K_F6",SWIG_From_int(static_cast< int >(BWAPI::K_F6)));
  SWIG_Python_SetConstant(d, "K_F7",SWIG_From_int(static_cast< int >(BWAPI::K_F7)));
  SWIG_Python_SetConstant(d, "K_F8",SWIG_From_int(static_cast< int >(BWAPI::K_F8)));
  SWIG_Python_SetConstant(d, "K_F9",SWIG_From_int(static_cast< int >(BWAPI::K_F9)));
  SWIG_Python_SetConstant(d, "K_F10",SWIG_From_int(static_cast< int >(BWAPI::K_F10)));
  SWIG_Python_SetConstant(d, "K_F11",SWIG_From_int(static_cast< int >(BWAPI::K_F11)));
  SWIG_Python_SetConstant(d, "K_F12",SWIG_From_int(static_cast< int >(BWAPI::K_F12)));
  SWIG_Python_SetConstant(d, "K_F13",SWIG_From_int(static_cast< int >(BWAPI::K_F13)));
  SWIG_Python_SetConstant(d, "K_F14",SWIG_From_int(static_cast< int >(BWAPI::K_F14)));
  SWIG_Python_SetConstant(d, "K_F15",SWIG_From_int(static_cast< int >(BWAPI::K_F15)));
  SWIG_Python_SetConstant(d, "K_F16",SWIG_From_int(static_cast< int >(BWAPI::K_F16)));
  SWIG_Python_SetConstant(d, "K_F17",SWIG_From_int(static_cast< int >(BWAPI::K_F17)));
  SWIG_Python_SetConstant(d, "K_F18",SWIG_From_int(static_cast< int >(BWAPI::K_F18)));
  SWIG_Python_SetConstant(d, "K_F19",SWIG_From_int(static_cast< int >(BWAPI::K_F19)));
  SWIG_Python_SetConstant(d, "K_F20",SWIG_From_int(static_cast< int >(BWAPI::K_F20)));
  SWIG_Python_SetConstant(d, "K_F21",SWIG_From_int(static_cast< int >(BWAPI::K_F21)));
  SWIG_Python_SetConstant(d, "K_F22",SWIG_From_int(static_cast< int >(BWAPI::K_F22)));
  SWIG_Python_SetConstant(d, "K_F23",SWIG_From_int(static_cast< int >(BWAPI::K_F23)));
  SWIG_Python_SetConstant(d, "K_F24",SWIG_From_int(static_cast< int >(BWAPI::K_F24)));
  SWIG_Python_SetConstant(d, "K_NUMLOCK",SWIG_From_int(static_cast< int >(BWAPI::K_NUMLOCK)));
  SWIG_Python_SetConstant(d, "K_SCROLL",SWIG_From_int(static_cast< int >(BWAPI::K_SCROLL)));
  SWIG_Python_SetConstant(d, "K_OEM_NEC_EQUAL",SWIG_From_int(static_cast< int >(BWAPI::K_OEM_NEC_EQUAL)));
  SWIG_Python_SetConstant(d, "K_OEM_FJ_JISHO",SWIG_From_int(static_cast< int >(BWAPI::K_OEM_FJ_JISHO)));
  SWIG_Python_SetConstant(d, "K_OEM_FJ_MASSHOU",SWIG_From_int(static_cast< int >(BWAPI::K_OEM_FJ_MASSHOU)));
  SWIG_Python_SetConstant(d, "K_OEM_FJ_TOUROKU",SWIG_From_int(static_cast< int >(BWAPI::K_OEM_FJ_TOUROKU)));
  SWIG_Python_SetConstant(d, "K_OEM_FJ_LOYA",SWIG_From_int(static_cast< int >(BWAPI::K_OEM_FJ_LOYA)));
  SWIG_Python_SetConstant(d, "K_OEM_FJ_ROYA",SWIG_From_int(static_cast< int >(BWAPI::K_OEM_FJ_ROYA)));
  SWIG_Python_SetConstant(d, "K_LSHIFT",SWIG_From_int(static_cast< int >(BWAPI::K_LSHIFT)));
  SWIG_Python_SetConstant(d, "K_RSHIFT",SWIG_From_int(static_cast< int >(BWAPI::K_RSHIFT)));
  SWIG_Python_SetConstant(d, "K_LCONTROL",SWIG_From_int(static_cast< int >(BWAPI::K_LCONTROL)));
  SWIG_Python_SetConstant(d, "K_RCONTROL",SWIG_From_int(static_cast< int >(BWAPI::K_RCONTROL)));
  SWIG_Python_SetConstant(d, "K_LMENU",SWIG_From_int(static_cast< int >(BWAPI::K_LMENU)));
  SWIG_Python_SetConstant(d, "K_RMENU",SWIG_From_int(static_cast< int >(BWAPI::K_RMENU)));
  SWIG_Python_SetConstant(d, "K_BROWSER_BACK",SWIG_From_int(static_cast< int >(BWAPI::K_BROWSER_BACK)));
  SWIG_Python_SetConstant(d, "K_BROWSER_FORWARD",SWIG_From_int(static_cast< int >(BWAPI::K_BROWSER_FORWARD)));
  SWIG_Python_SetConstant(d, "K_BROWSER_REFRESH",SWIG_From_int(static_cast< int >(BWAPI::K_BROWSER_REFRESH)));
  SWIG_Python_SetConstant(d, "K_BROWSER_STOP",SWIG_From_int(static_cast< int >(BWAPI::K_BROWSER_STOP)));
  SWIG_Python_SetConstant(d, "K_BROWSER_SEARCH",SWIG_From_int(static_cast< int >(BWAPI::K_BROWSER_SEARCH)));
  SWIG_Python_SetConstant(d, "K_BROWSER_FAVORITES",SWIG_From_int(static_cast< int >(BWAPI::K_BROWSER_FAVORITES)));
  SWIG_Python_SetConstant(d, "K_BROWSER_HOME",SWIG_From_int(static_cast< int >(BWAPI::K_BROWSER_HOME)));
  SWIG_Python_SetConstant(d, "K_VOLUME_MUTE",SWIG_From_int(static_cast< int >(BWAPI::K_VOLUME_MUTE)));
  SWIG_Python_SetConstant(d, "K_VOLUME_DOWN",SWIG_From_int(static_cast< int >(BWAPI::K_VOLUME_DOWN)));
  SWIG_Python_SetConstant(d, "K_VOLUME_UP",SWIG_From_int(static_cast< int >(BWAPI::K_VOLUME_UP)));
  SWIG_Python_SetConstant(d, "K_MEDIA_NEXT_TRACK",SWIG_From_int(static_cast< int >(BWAPI::K_MEDIA_NEXT_TRACK)));
  SWIG_Python_SetConstant(d, "K_MEDIA_PREV_TRACK",SWIG_From_int(static_cast< int >(BWAPI::K_MEDIA_PREV_TRACK)));
  SWIG_Python_SetConstant(d, "K_MEDIA_STOP",SWIG_From_int(static_cast< int >(BWAPI::K_MEDIA_STOP)));
  SWIG_Python_SetConstant(d, "K_MEDIA_PLAY_PAUSE",SWIG_From_int(static_cast< int >(BWAPI::K_MEDIA_PLAY_PAUSE)));
  SWIG_Python_SetConstant(d, "K_LAUNCH_MAIL",SWIG_From_int(static_cast< int >(BWAPI::K_LAUNCH_MAIL)));
  SWIG_Python_SetConstant(d, "K_LAUNCH_MEDIA_SELECT",SWIG_From_int(static_cast< int >(BWAPI::K_LAUNCH_MEDIA_SELECT)));
  SWIG_Python_SetConstant(d, "K_LAUNCH_APP1",SWIG_From_int(static_cast< int >(BWAPI::K_LAUNCH_APP1)));
  SWIG_Python_SetConstant(d, "K_LAUNCH_APP2",SWIG_From_int(static_cast< int >(BWAPI::K_LAUNCH_APP2)));
  SWIG_Python_SetConstant(d, "K_OEM_1",SWIG_From_int(static_cast< int >(BWAPI::K_OEM_1)));
  SWIG_Python_SetConstant(d, "K_OEM_PLUS",SWIG_From_int(static_cast< int >(BWAPI::K_OEM_PLUS)));
  SWIG_Python_SetConstant(d, "K_OEM_COMMA",SWIG_From_int(static_cast< int >(BWAPI::K_OEM_COMMA)));
  SWIG_Python_SetConstant(d, "K_OEM_MINUS",SWIG_From_int(static_cast< int >(BWAPI::K_OEM_MINUS)));
  SWIG_Python_SetConstant(d, "K_OEM_PERIOD",SWIG_From_int(static_cast< int >(BWAPI::K_OEM_PERIOD)));
  SWIG_Python_SetConstant(d, "K_OEM_2",SWIG_From_int(static_cast< int >(BWAPI::K_OEM_2)));
  SWIG_Python_SetConstant(d, "K_OEM_3",SWIG_From_int(static_cast< int >(BWAPI::K_OEM_3)));
  SWIG_Python_SetConstant(d, "K_OEM_4",SWIG_From_int(static_cast< int >(BWAPI::K_OEM_4)));
  SWIG_Python_SetConstant(d, "K_OEM_5",SWIG_From_int(static_cast< int >(BWAPI::K_OEM_5)));
  SWIG_Python_SetConstant(d, "K_OEM_6",SWIG_From_int(static_cast< int >(BWAPI::K_OEM_6)));
  SWIG_Python_SetConstant(d, "K_OEM_7",SWIG_From_int(static_cast< int >(BWAPI::K_OEM_7)));
  SWIG_Python_SetConstant(d, "K_OEM_8",SWIG_From_int(static_cast< int >(BWAPI::K_OEM_8)));
  SWIG_Python_SetConstant(d, "K_OEM_AX",SWIG_From_int(static_cast< int >(BWAPI::K_OEM_AX)));
  SWIG_Python_SetConstant(d, "K_OEM_102",SWIG_From_int(static_cast< int >(BWAPI::K_OEM_102)));
  SWIG_Python_SetConstant(d, "K_ICO_HELP",SWIG_From_int(static_cast< int >(BWAPI::K_ICO_HELP)));
  SWIG_Python_SetConstant(d, "K_ICO_00",SWIG_From_int(static_cast< int >(BWAPI::K_ICO_00)));
  SWIG_Python_SetConstant(d, "K_PROCESSKEY",SWIG_From_int(static_cast< int >(BWAPI::K_PROCESSKEY)));
  SWIG_Python_SetConstant(d, "K_ICO_CLEAR",SWIG_From_int(static_cast< int >(BWAPI::K_ICO_CLEAR)));
  SWIG_Python_SetConstant(d, "K_PACKET",SWIG_From_int(static_cast< int >(BWAPI::K_PACKET)));
  SWIG_Python_SetConstant(d, "K_OEM_RESET",SWIG_From_int(static_cast< int >(BWAPI::K_OEM_RESET)));
  SWIG_Python_SetConstant(d, "K_OEM_JUMP",SWIG_From_int(static_cast< int >(BWAPI::K_OEM_JUMP)));
  SWIG_Python_SetConstant(d, "K_OEM_PA1",SWIG_From_int(static_cast< int >(BWAPI::K_OEM_PA1)));
  SWIG_Python_SetConstant(d, "K_OEM_PA2",SWIG_From_int(static_cast< int >(BWAPI::K_OEM_PA2)));
  SWIG_Python_SetConstant(d, "K_OEM_PA3",SWIG_From_int(static_cast< int >(BWAPI::K_OEM_PA3)));
  SWIG_Python_SetConstant(d, "K_OEM_WSCTRL",SWIG_From_int(static_cast< int >(BWAPI::K_OEM_WSCTRL)));
  SWIG_Python_SetConstant(d, "K_OEM_CUSEL",SWIG_From_int(static_cast< int >(BWAPI::K_OEM_CUSEL)));
  SWIG_Python_SetConstant(d, "K_OEM_ATTN",SWIG_From_int(static_cast< int >(BWAPI::K_OEM_ATTN)));
  SWIG_Python_SetConstant(d, "K_OEM_FINISH",SWIG_From_int(static_cast< int >(BWAPI::K_OEM_FINISH)));
  SWIG_Python_SetConstant(d, "K_OEM_COPY",SWIG_From_int(static_cast< int >(BWAPI::K_OEM_COPY)));
  SWIG_Python_SetConstant(d, "K_OEM_AUTO",SWIG_From_int(static_cast< int >(BWAPI::K_OEM_AUTO)));
  SWIG_Python_SetConstant(d, "K_OEM_ENLW",SWIG_From_int(static_cast< int >(BWAPI::K_OEM_ENLW)));
  SWIG_Python_SetConstant(d, "K_OEM_BACKTAB",SWIG_From_int(static_cast< int >(BWAPI::K_OEM_BACKTAB)));
  SWIG_Python_SetConstant(d, "K_ATTN",SWIG_From_int(static_cast< int >(BWAPI::K_ATTN)));
  SWIG_Python_SetConstant(d, "K_CRSEL",SWIG_From_int(static_cast< int >(BWAPI::K_CRSEL)));
  SWIG_Python_SetConstant(d, "K_EXSEL",SWIG_From_int(static_cast< int >(BWAPI::K_EXSEL)));
  SWIG_Python_SetConstant(d, "K_EREOF",SWIG_From_int(static_cast< int >(BWAPI::K_EREOF)));
  SWIG_Python_SetConstant(d, "K_PLAY",SWIG_From_int(static_cast< int >(BWAPI::K_PLAY)));
  SWIG_Python_SetConstant(d, "K_ZOOM",SWIG_From_int(static_cast< int >(BWAPI::K_ZOOM)));
  SWIG_Python_SetConstant(d, "K_NONAME",SWIG_From_int(static_cast< int >(BWAPI::K_NONAME)));
  SWIG_Python_SetConstant(d, "K_PA1",SWIG_From_int(static_cast< int >(BWAPI::K_PA1)));
  SWIG_Python_SetConstant(d, "K_OEM_CLEAR",SWIG_From_int(static_cast< int >(BWAPI::K_OEM_CLEAR)));
  SWIG_Python_SetConstant(d, "SinglePlayer",SWIG_From_int(static_cast< int >(BWAPI::Latency::SinglePlayer)));
  SWIG_Python_SetConstant(d, "LanLow",SWIG_From_int(static_cast< int >(BWAPI::Latency::LanLow)));
  SWIG_Python_SetConstant(d, "LanMedium",SWIG_From_int(static_cast< int >(BWAPI::Latency::LanMedium)));
  SWIG_Python_SetConstant(d, "LanHigh",SWIG_From_int(static_cast< int >(BWAPI::Latency::LanHigh)));
  SWIG_Python_SetConstant(d, "BattlenetLow",SWIG_From_int(static_cast< int >(BWAPI::Latency::BattlenetLow)));
  SWIG_Python_SetConstant(d, "BattlenetMedium",SWIG_From_int(static_cast< int >(BWAPI::Latency::BattlenetMedium)));
  SWIG_Python_SetConstant(d, "BattlenetHigh",SWIG_From_int(static_cast< int >(BWAPI::Latency::BattlenetHigh)));
  SWIG_addvarlink(SWIG_globals(),(char*)"Die",Swig_var_Die_get, Swig_var_Die_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Orders_Stop",Swig_var_Orders_Stop_get, Swig_var_Orders_Stop_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Guard",Swig_var_Guard_get, Swig_var_Guard_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PlayerGuard",Swig_var_PlayerGuard_get, Swig_var_PlayerGuard_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TurretGuard",Swig_var_TurretGuard_get, Swig_var_TurretGuard_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BunkerGuard",Swig_var_BunkerGuard_get, Swig_var_BunkerGuard_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Orders_Move",Swig_var_Orders_Move_get, Swig_var_Orders_Move_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AttackUnit",Swig_var_AttackUnit_get, Swig_var_AttackUnit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AttackTile",Swig_var_AttackTile_get, Swig_var_AttackTile_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hover",Swig_var_Hover_get, Swig_var_Hover_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AttackMove",Swig_var_AttackMove_get, Swig_var_AttackMove_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"InfestedCommandCenter",Swig_var_InfestedCommandCenter_get, Swig_var_InfestedCommandCenter_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnusedNothing",Swig_var_UnusedNothing_get, Swig_var_UnusedNothing_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnusedPowerup",Swig_var_UnusedPowerup_get, Swig_var_UnusedPowerup_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TowerGuard",Swig_var_TowerGuard_get, Swig_var_TowerGuard_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"VultureMine",Swig_var_VultureMine_get, Swig_var_VultureMine_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Nothing",Swig_var_Nothing_get, Swig_var_Nothing_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Nothing3",Swig_var_Nothing3_get, Swig_var_Nothing3_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CastInfestation",Swig_var_CastInfestation_get, Swig_var_CastInfestation_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"InfestingCommandCenter",Swig_var_InfestingCommandCenter_get, Swig_var_InfestingCommandCenter_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PlaceBuilding",Swig_var_PlaceBuilding_get, Swig_var_PlaceBuilding_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BuildProtoss2",Swig_var_BuildProtoss2_get, Swig_var_BuildProtoss2_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ConstructingBuilding",Swig_var_ConstructingBuilding_get, Swig_var_ConstructingBuilding_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Orders_Repair",Swig_var_Orders_Repair_get, Swig_var_Orders_Repair_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PlaceAddon",Swig_var_PlaceAddon_get, Swig_var_PlaceAddon_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BuildAddon",Swig_var_BuildAddon_get, Swig_var_BuildAddon_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Orders_Train",Swig_var_Orders_Train_get, Swig_var_Orders_Train_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RallyPointUnit",Swig_var_RallyPointUnit_get, Swig_var_RallyPointUnit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RallyPointTile",Swig_var_RallyPointTile_get, Swig_var_RallyPointTile_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ZergBirth",Swig_var_ZergBirth_get, Swig_var_ZergBirth_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ZergUnitMorph",Swig_var_ZergUnitMorph_get, Swig_var_ZergUnitMorph_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ZergBuildingMorph",Swig_var_ZergBuildingMorph_get, Swig_var_ZergBuildingMorph_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IncompleteBuilding",Swig_var_IncompleteBuilding_get, Swig_var_IncompleteBuilding_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BuildNydusExit",Swig_var_BuildNydusExit_get, Swig_var_BuildNydusExit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"EnterNydusCanal",Swig_var_EnterNydusCanal_get, Swig_var_EnterNydusCanal_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Orders_Follow",Swig_var_Orders_Follow_get, Swig_var_Orders_Follow_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Carrier",Swig_var_Carrier_get, Swig_var_Carrier_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ReaverCarrierMove",Swig_var_ReaverCarrierMove_get, Swig_var_ReaverCarrierMove_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CarrierIgnore2",Swig_var_CarrierIgnore2_get, Swig_var_CarrierIgnore2_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Reaver",Swig_var_Reaver_get, Swig_var_Reaver_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TrainFighter",Swig_var_TrainFighter_get, Swig_var_TrainFighter_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"InterceptorAttack",Swig_var_InterceptorAttack_get, Swig_var_InterceptorAttack_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ScarabAttack",Swig_var_ScarabAttack_get, Swig_var_ScarabAttack_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RechargeShieldsUnit",Swig_var_RechargeShieldsUnit_get, Swig_var_RechargeShieldsUnit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RechargeShieldsBattery",Swig_var_RechargeShieldsBattery_get, Swig_var_RechargeShieldsBattery_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ShieldBattery",Swig_var_ShieldBattery_get, Swig_var_ShieldBattery_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"InterceptorReturn",Swig_var_InterceptorReturn_get, Swig_var_InterceptorReturn_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BuildingLand",Swig_var_BuildingLand_get, Swig_var_BuildingLand_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BuildingLiftOff",Swig_var_BuildingLiftOff_get, Swig_var_BuildingLiftOff_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DroneLiftOff",Swig_var_DroneLiftOff_get, Swig_var_DroneLiftOff_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"LiftingOff",Swig_var_LiftingOff_get, Swig_var_LiftingOff_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ResearchTech",Swig_var_ResearchTech_get, Swig_var_ResearchTech_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Orders_Upgrade",Swig_var_Orders_Upgrade_get, Swig_var_Orders_Upgrade_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Larva",Swig_var_Larva_get, Swig_var_Larva_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SpawningLarva",Swig_var_SpawningLarva_get, Swig_var_SpawningLarva_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Harvest1",Swig_var_Harvest1_get, Swig_var_Harvest1_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Harvest2",Swig_var_Harvest2_get, Swig_var_Harvest2_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MoveToGas",Swig_var_MoveToGas_get, Swig_var_MoveToGas_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WaitForGas",Swig_var_WaitForGas_get, Swig_var_WaitForGas_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"HarvestGas",Swig_var_HarvestGas_get, Swig_var_HarvestGas_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ReturnGas",Swig_var_ReturnGas_get, Swig_var_ReturnGas_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MoveToMinerals",Swig_var_MoveToMinerals_get, Swig_var_MoveToMinerals_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WaitForMinerals",Swig_var_WaitForMinerals_get, Swig_var_WaitForMinerals_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MiningMinerals",Swig_var_MiningMinerals_get, Swig_var_MiningMinerals_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Harvest3",Swig_var_Harvest3_get, Swig_var_Harvest3_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Harvest4",Swig_var_Harvest4_get, Swig_var_Harvest4_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ReturnMinerals",Swig_var_ReturnMinerals_get, Swig_var_ReturnMinerals_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Interrupted",Swig_var_Interrupted_get, Swig_var_Interrupted_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"EnterTransport",Swig_var_EnterTransport_get, Swig_var_EnterTransport_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PickupIdle",Swig_var_PickupIdle_get, Swig_var_PickupIdle_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PickupTransport",Swig_var_PickupTransport_get, Swig_var_PickupTransport_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PickupBunker",Swig_var_PickupBunker_get, Swig_var_PickupBunker_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Pickup4",Swig_var_Pickup4_get, Swig_var_Pickup4_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PowerupIdle",Swig_var_PowerupIdle_get, Swig_var_PowerupIdle_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Sieging",Swig_var_Sieging_get, Swig_var_Sieging_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Unsieging",Swig_var_Unsieging_get, Swig_var_Unsieging_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"InitCreepGrowth",Swig_var_InitCreepGrowth_get, Swig_var_InitCreepGrowth_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SpreadCreep",Swig_var_SpreadCreep_get, Swig_var_SpreadCreep_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StoppingCreepGrowth",Swig_var_StoppingCreepGrowth_get, Swig_var_StoppingCreepGrowth_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"GuardianAspect",Swig_var_GuardianAspect_get, Swig_var_GuardianAspect_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ArchonWarp",Swig_var_ArchonWarp_get, Swig_var_ArchonWarp_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CompletingArchonsummon",Swig_var_CompletingArchonsummon_get, Swig_var_CompletingArchonsummon_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"HoldPosition",Swig_var_HoldPosition_get, Swig_var_HoldPosition_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Orders_Cloak",Swig_var_Orders_Cloak_get, Swig_var_Orders_Cloak_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Orders_Decloak",Swig_var_Orders_Decloak_get, Swig_var_Orders_Decloak_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Orders_Unload",Swig_var_Orders_Unload_get, Swig_var_Orders_Unload_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MoveUnload",Swig_var_MoveUnload_get, Swig_var_MoveUnload_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"FireYamatoGun",Swig_var_FireYamatoGun_get, Swig_var_FireYamatoGun_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CastLockdown",Swig_var_CastLockdown_get, Swig_var_CastLockdown_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Orders_Burrowing",Swig_var_Orders_Burrowing_get, Swig_var_Orders_Burrowing_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Burrowed",Swig_var_Burrowed_get, Swig_var_Burrowed_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Unburrowing",Swig_var_Unburrowing_get, Swig_var_Unburrowing_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CastDarkSwarm",Swig_var_CastDarkSwarm_get, Swig_var_CastDarkSwarm_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CastParasite",Swig_var_CastParasite_get, Swig_var_CastParasite_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CastSpawnBroodlings",Swig_var_CastSpawnBroodlings_get, Swig_var_CastSpawnBroodlings_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CastEMPShockwave",Swig_var_CastEMPShockwave_get, Swig_var_CastEMPShockwave_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"NukeWait",Swig_var_NukeWait_get, Swig_var_NukeWait_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"NukeTrain",Swig_var_NukeTrain_get, Swig_var_NukeTrain_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"NukeLaunch",Swig_var_NukeLaunch_get, Swig_var_NukeLaunch_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"NukeUnit",Swig_var_NukeUnit_get, Swig_var_NukeUnit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CastNuclearStrike",Swig_var_CastNuclearStrike_get, Swig_var_CastNuclearStrike_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"NukeTrack",Swig_var_NukeTrack_get, Swig_var_NukeTrack_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CloakNearbyUnits",Swig_var_CloakNearbyUnits_get, Swig_var_CloakNearbyUnits_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PlaceMine",Swig_var_PlaceMine_get, Swig_var_PlaceMine_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RightClickAction",Swig_var_RightClickAction_get, Swig_var_RightClickAction_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CastRecall",Swig_var_CastRecall_get, Swig_var_CastRecall_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TeleporttoLocation",Swig_var_TeleporttoLocation_get, Swig_var_TeleporttoLocation_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CastScannerSweep",Swig_var_CastScannerSweep_get, Swig_var_CastScannerSweep_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Scanner",Swig_var_Scanner_get, Swig_var_Scanner_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CastDefensiveMatrix",Swig_var_CastDefensiveMatrix_get, Swig_var_CastDefensiveMatrix_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CastPsionicStorm",Swig_var_CastPsionicStorm_get, Swig_var_CastPsionicStorm_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CastIrradiate",Swig_var_CastIrradiate_get, Swig_var_CastIrradiate_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CastPlague",Swig_var_CastPlague_get, Swig_var_CastPlague_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CastConsume",Swig_var_CastConsume_get, Swig_var_CastConsume_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CastEnsnare",Swig_var_CastEnsnare_get, Swig_var_CastEnsnare_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CastStasisField",Swig_var_CastStasisField_get, Swig_var_CastStasisField_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CastHallucination",Swig_var_CastHallucination_get, Swig_var_CastHallucination_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hallucination2",Swig_var_Hallucination2_get, Swig_var_Hallucination2_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ResetCollision",Swig_var_ResetCollision_get, Swig_var_ResetCollision_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Orders_Patrol",Swig_var_Orders_Patrol_get, Swig_var_Orders_Patrol_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CTFCOPInit",Swig_var_CTFCOPInit_get, Swig_var_CTFCOPInit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CTFCOP1",Swig_var_CTFCOP1_get, Swig_var_CTFCOP1_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CTFCOP2",Swig_var_CTFCOP2_get, Swig_var_CTFCOP2_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ComputerAI",Swig_var_ComputerAI_get, Swig_var_ComputerAI_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AtkMoveEP",Swig_var_AtkMoveEP_get, Swig_var_AtkMoveEP_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"HarassMove",Swig_var_HarassMove_get, Swig_var_HarassMove_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AIPatrol",Swig_var_AIPatrol_get, Swig_var_AIPatrol_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"GuardPost",Swig_var_GuardPost_get, Swig_var_GuardPost_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Orders_RescuePassive",Swig_var_Orders_RescuePassive_get, Swig_var_Orders_RescuePassive_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Orders_Neutral",Swig_var_Orders_Neutral_get, Swig_var_Orders_Neutral_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ComputerReturn",Swig_var_ComputerReturn_get, Swig_var_ComputerReturn_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SelfDestrucing",Swig_var_SelfDestrucing_get, Swig_var_SelfDestrucing_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Critter",Swig_var_Critter_get, Swig_var_Critter_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"HiddenGun",Swig_var_HiddenGun_get, Swig_var_HiddenGun_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OpenDoor",Swig_var_OpenDoor_get, Swig_var_OpenDoor_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CloseDoor",Swig_var_CloseDoor_get, Swig_var_CloseDoor_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"HideTrap",Swig_var_HideTrap_get, Swig_var_HideTrap_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RevealTrap",Swig_var_RevealTrap_get, Swig_var_RevealTrap_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Enabledoodad",Swig_var_Enabledoodad_get, Swig_var_Enabledoodad_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Disabledoodad",Swig_var_Disabledoodad_get, Swig_var_Disabledoodad_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Warpin",Swig_var_Warpin_get, Swig_var_Warpin_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Medic",Swig_var_Medic_get, Swig_var_Medic_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MedicHeal1",Swig_var_MedicHeal1_get, Swig_var_MedicHeal1_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"HealMove",Swig_var_HealMove_get, Swig_var_HealMove_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MedicHeal2",Swig_var_MedicHeal2_get, Swig_var_MedicHeal2_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CastRestoration",Swig_var_CastRestoration_get, Swig_var_CastRestoration_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CastDisruptionWeb",Swig_var_CastDisruptionWeb_get, Swig_var_CastDisruptionWeb_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CastMindControl",Swig_var_CastMindControl_get, Swig_var_CastMindControl_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DarkArchonMeld",Swig_var_DarkArchonMeld_get, Swig_var_DarkArchonMeld_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CastFeedback",Swig_var_CastFeedback_get, Swig_var_CastFeedback_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CastOpticalFlare",Swig_var_CastOpticalFlare_get, Swig_var_CastOpticalFlare_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CastMaelstrom",Swig_var_CastMaelstrom_get, Swig_var_CastMaelstrom_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"JunkYardDog",Swig_var_JunkYardDog_get, Swig_var_JunkYardDog_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Fatal",Swig_var_Fatal_get, Swig_var_Fatal_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Orders_None",Swig_var_Orders_None_get, Swig_var_Orders_None_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Orders_Unknown",Swig_var_Orders_Unknown_get, Swig_var_Orders_Unknown_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PlayerTypes_None",Swig_var_PlayerTypes_None_get, Swig_var_PlayerTypes_None_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Computer",Swig_var_Computer_get, Swig_var_Computer_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PlayerTypes_Player",Swig_var_PlayerTypes_Player_get, Swig_var_PlayerTypes_Player_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PlayerTypes_RescuePassive",Swig_var_PlayerTypes_RescuePassive_get, Swig_var_PlayerTypes_RescuePassive_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"EitherPreferComputer",Swig_var_EitherPreferComputer_get, Swig_var_EitherPreferComputer_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"EitherPreferHuman",Swig_var_EitherPreferHuman_get, Swig_var_EitherPreferHuman_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PlayerTypes_Neutral",Swig_var_PlayerTypes_Neutral_get, Swig_var_PlayerTypes_Neutral_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Closed",Swig_var_Closed_get, Swig_var_Closed_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PlayerTypes_PlayerLeft",Swig_var_PlayerTypes_PlayerLeft_get, Swig_var_PlayerTypes_PlayerLeft_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ComputerLeft",Swig_var_ComputerLeft_get, Swig_var_ComputerLeft_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PlayerTypes_Unknown",Swig_var_PlayerTypes_Unknown_get, Swig_var_PlayerTypes_Unknown_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Positions_Invalid",Swig_var_Positions_Invalid_get, Swig_var_Positions_Invalid_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Positions_None",Swig_var_Positions_None_get, Swig_var_Positions_None_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Positions_Unknown",Swig_var_Positions_Unknown_get, Swig_var_Positions_Unknown_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg",Swig_var_Zerg_get, Swig_var_Zerg_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran",Swig_var_Terran_get, Swig_var_Terran_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss",Swig_var_Protoss_get, Swig_var_Protoss_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Random",Swig_var_Random_get, Swig_var_Random_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Other",Swig_var_Other_get, Swig_var_Other_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Races_None",Swig_var_Races_None_get, Swig_var_Races_None_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Races_Unknown",Swig_var_Races_Unknown_get, Swig_var_Races_Unknown_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Stim_Packs",Swig_var_Stim_Packs_get, Swig_var_Stim_Packs_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TechTypes_Lockdown",Swig_var_TechTypes_Lockdown_get, Swig_var_TechTypes_Lockdown_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TechTypes_EMP_Shockwave",Swig_var_TechTypes_EMP_Shockwave_get, Swig_var_TechTypes_EMP_Shockwave_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TechTypes_Spider_Mines",Swig_var_TechTypes_Spider_Mines_get, Swig_var_TechTypes_Spider_Mines_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Scanner_Sweep",Swig_var_Scanner_Sweep_get, Swig_var_Scanner_Sweep_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Tank_Siege_Mode",Swig_var_Tank_Siege_Mode_get, Swig_var_Tank_Siege_Mode_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Defensive_Matrix",Swig_var_Defensive_Matrix_get, Swig_var_Defensive_Matrix_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TechTypes_Irradiate",Swig_var_TechTypes_Irradiate_get, Swig_var_TechTypes_Irradiate_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TechTypes_Yamato_Gun",Swig_var_TechTypes_Yamato_Gun_get, Swig_var_TechTypes_Yamato_Gun_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Cloaking_Field",Swig_var_Cloaking_Field_get, Swig_var_Cloaking_Field_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Personnel_Cloaking",Swig_var_Personnel_Cloaking_get, Swig_var_Personnel_Cloaking_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TechTypes_Burrowing",Swig_var_TechTypes_Burrowing_get, Swig_var_TechTypes_Burrowing_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Infestation",Swig_var_Infestation_get, Swig_var_Infestation_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TechTypes_Spawn_Broodlings",Swig_var_TechTypes_Spawn_Broodlings_get, Swig_var_TechTypes_Spawn_Broodlings_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TechTypes_Dark_Swarm",Swig_var_TechTypes_Dark_Swarm_get, Swig_var_TechTypes_Dark_Swarm_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TechTypes_Plague",Swig_var_TechTypes_Plague_get, Swig_var_TechTypes_Plague_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TechTypes_Consume",Swig_var_TechTypes_Consume_get, Swig_var_TechTypes_Consume_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TechTypes_Ensnare",Swig_var_TechTypes_Ensnare_get, Swig_var_TechTypes_Ensnare_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TechTypes_Parasite",Swig_var_TechTypes_Parasite_get, Swig_var_TechTypes_Parasite_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TechTypes_Psionic_Storm",Swig_var_TechTypes_Psionic_Storm_get, Swig_var_TechTypes_Psionic_Storm_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hallucination",Swig_var_Hallucination_get, Swig_var_Hallucination_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Recall",Swig_var_Recall_get, Swig_var_Recall_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TechTypes_Stasis_Field",Swig_var_TechTypes_Stasis_Field_get, Swig_var_TechTypes_Stasis_Field_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Archon_Warp",Swig_var_Archon_Warp_get, Swig_var_Archon_Warp_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TechTypes_Restoration",Swig_var_TechTypes_Restoration_get, Swig_var_TechTypes_Restoration_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TechTypes_Disruption_Web",Swig_var_TechTypes_Disruption_Web_get, Swig_var_TechTypes_Disruption_Web_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TechTypes_Mind_Control",Swig_var_TechTypes_Mind_Control_get, Swig_var_TechTypes_Mind_Control_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Dark_Archon_Meld",Swig_var_Dark_Archon_Meld_get, Swig_var_Dark_Archon_Meld_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TechTypes_Feedback",Swig_var_TechTypes_Feedback_get, Swig_var_TechTypes_Feedback_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TechTypes_Optical_Flare",Swig_var_TechTypes_Optical_Flare_get, Swig_var_TechTypes_Optical_Flare_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TechTypes_Maelstrom",Swig_var_TechTypes_Maelstrom_get, Swig_var_TechTypes_Maelstrom_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Lurker_Aspect",Swig_var_Lurker_Aspect_get, Swig_var_Lurker_Aspect_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Healing",Swig_var_Healing_get, Swig_var_Healing_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TechTypes_None",Swig_var_TechTypes_None_get, Swig_var_TechTypes_None_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TechTypes_Unknown",Swig_var_TechTypes_Unknown_get, Swig_var_TechTypes_Unknown_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TechTypes_Nuclear_Strike",Swig_var_TechTypes_Nuclear_Strike_get, Swig_var_TechTypes_Nuclear_Strike_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TilePositions_Invalid",Swig_var_TilePositions_Invalid_get, Swig_var_TilePositions_Invalid_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TilePositions_None",Swig_var_TilePositions_None_get, Swig_var_TilePositions_None_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TilePositions_Unknown",Swig_var_TilePositions_Unknown_get, Swig_var_TilePositions_Unknown_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Attack_Move",Swig_var_UnitCommandTypes_Attack_Move_get, Swig_var_UnitCommandTypes_Attack_Move_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Attack_Unit",Swig_var_UnitCommandTypes_Attack_Unit_get, Swig_var_UnitCommandTypes_Attack_Unit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Build",Swig_var_UnitCommandTypes_Build_get, Swig_var_UnitCommandTypes_Build_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Build_Addon",Swig_var_UnitCommandTypes_Build_Addon_get, Swig_var_UnitCommandTypes_Build_Addon_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Train",Swig_var_UnitCommandTypes_Train_get, Swig_var_UnitCommandTypes_Train_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Morph",Swig_var_UnitCommandTypes_Morph_get, Swig_var_UnitCommandTypes_Morph_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Research",Swig_var_UnitCommandTypes_Research_get, Swig_var_UnitCommandTypes_Research_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Upgrade",Swig_var_UnitCommandTypes_Upgrade_get, Swig_var_UnitCommandTypes_Upgrade_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Set_Rally_Position",Swig_var_UnitCommandTypes_Set_Rally_Position_get, Swig_var_UnitCommandTypes_Set_Rally_Position_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Set_Rally_Unit",Swig_var_UnitCommandTypes_Set_Rally_Unit_get, Swig_var_UnitCommandTypes_Set_Rally_Unit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Move",Swig_var_UnitCommandTypes_Move_get, Swig_var_UnitCommandTypes_Move_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Patrol",Swig_var_UnitCommandTypes_Patrol_get, Swig_var_UnitCommandTypes_Patrol_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Hold_Position",Swig_var_UnitCommandTypes_Hold_Position_get, Swig_var_UnitCommandTypes_Hold_Position_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Stop",Swig_var_UnitCommandTypes_Stop_get, Swig_var_UnitCommandTypes_Stop_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Follow",Swig_var_UnitCommandTypes_Follow_get, Swig_var_UnitCommandTypes_Follow_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Gather",Swig_var_UnitCommandTypes_Gather_get, Swig_var_UnitCommandTypes_Gather_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Return_Cargo",Swig_var_UnitCommandTypes_Return_Cargo_get, Swig_var_UnitCommandTypes_Return_Cargo_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Repair",Swig_var_UnitCommandTypes_Repair_get, Swig_var_UnitCommandTypes_Repair_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Burrow",Swig_var_UnitCommandTypes_Burrow_get, Swig_var_UnitCommandTypes_Burrow_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Unburrow",Swig_var_UnitCommandTypes_Unburrow_get, Swig_var_UnitCommandTypes_Unburrow_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Cloak",Swig_var_UnitCommandTypes_Cloak_get, Swig_var_UnitCommandTypes_Cloak_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Decloak",Swig_var_UnitCommandTypes_Decloak_get, Swig_var_UnitCommandTypes_Decloak_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Siege",Swig_var_UnitCommandTypes_Siege_get, Swig_var_UnitCommandTypes_Siege_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Unsiege",Swig_var_UnitCommandTypes_Unsiege_get, Swig_var_UnitCommandTypes_Unsiege_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Lift",Swig_var_UnitCommandTypes_Lift_get, Swig_var_UnitCommandTypes_Lift_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Land",Swig_var_UnitCommandTypes_Land_get, Swig_var_UnitCommandTypes_Land_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Load",Swig_var_UnitCommandTypes_Load_get, Swig_var_UnitCommandTypes_Load_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Unload",Swig_var_UnitCommandTypes_Unload_get, Swig_var_UnitCommandTypes_Unload_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Unload_All",Swig_var_UnitCommandTypes_Unload_All_get, Swig_var_UnitCommandTypes_Unload_All_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Unload_All_Position",Swig_var_UnitCommandTypes_Unload_All_Position_get, Swig_var_UnitCommandTypes_Unload_All_Position_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Right_Click_Position",Swig_var_UnitCommandTypes_Right_Click_Position_get, Swig_var_UnitCommandTypes_Right_Click_Position_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Right_Click_Unit",Swig_var_UnitCommandTypes_Right_Click_Unit_get, Swig_var_UnitCommandTypes_Right_Click_Unit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Halt_Construction",Swig_var_UnitCommandTypes_Halt_Construction_get, Swig_var_UnitCommandTypes_Halt_Construction_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Cancel_Construction",Swig_var_UnitCommandTypes_Cancel_Construction_get, Swig_var_UnitCommandTypes_Cancel_Construction_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Cancel_Addon",Swig_var_UnitCommandTypes_Cancel_Addon_get, Swig_var_UnitCommandTypes_Cancel_Addon_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Cancel_Train",Swig_var_UnitCommandTypes_Cancel_Train_get, Swig_var_UnitCommandTypes_Cancel_Train_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Cancel_Train_Slot",Swig_var_UnitCommandTypes_Cancel_Train_Slot_get, Swig_var_UnitCommandTypes_Cancel_Train_Slot_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Cancel_Morph",Swig_var_UnitCommandTypes_Cancel_Morph_get, Swig_var_UnitCommandTypes_Cancel_Morph_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Cancel_Research",Swig_var_UnitCommandTypes_Cancel_Research_get, Swig_var_UnitCommandTypes_Cancel_Research_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Cancel_Upgrade",Swig_var_UnitCommandTypes_Cancel_Upgrade_get, Swig_var_UnitCommandTypes_Cancel_Upgrade_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Use_Tech",Swig_var_UnitCommandTypes_Use_Tech_get, Swig_var_UnitCommandTypes_Use_Tech_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Use_Tech_Position",Swig_var_UnitCommandTypes_Use_Tech_Position_get, Swig_var_UnitCommandTypes_Use_Tech_Position_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Use_Tech_Unit",Swig_var_UnitCommandTypes_Use_Tech_Unit_get, Swig_var_UnitCommandTypes_Use_Tech_Unit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_None",Swig_var_UnitCommandTypes_None_get, Swig_var_UnitCommandTypes_None_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitCommandTypes_Unknown",Swig_var_UnitCommandTypes_Unknown_get, Swig_var_UnitCommandTypes_Unknown_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitSizeTypes_Independent",Swig_var_UnitSizeTypes_Independent_get, Swig_var_UnitSizeTypes_Independent_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Small",Swig_var_Small_get, Swig_var_Small_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Medium",Swig_var_Medium_get, Swig_var_Medium_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Large",Swig_var_Large_get, Swig_var_Large_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitSizeTypes_None",Swig_var_UnitSizeTypes_None_get, Swig_var_UnitSizeTypes_None_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitSizeTypes_Unknown",Swig_var_UnitSizeTypes_Unknown_get, Swig_var_UnitSizeTypes_Unknown_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Marine",Swig_var_Terran_Marine_get, Swig_var_Terran_Marine_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Jim_Raynor_Marine",Swig_var_Hero_Jim_Raynor_Marine_get, Swig_var_Hero_Jim_Raynor_Marine_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Ghost",Swig_var_Terran_Ghost_get, Swig_var_Terran_Ghost_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Sarah_Kerrigan",Swig_var_Hero_Sarah_Kerrigan_get, Swig_var_Hero_Sarah_Kerrigan_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Samir_Duran",Swig_var_Hero_Samir_Duran_get, Swig_var_Hero_Samir_Duran_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Infested_Duran",Swig_var_Hero_Infested_Duran_get, Swig_var_Hero_Infested_Duran_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Alexei_Stukov",Swig_var_Hero_Alexei_Stukov_get, Swig_var_Hero_Alexei_Stukov_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Vulture",Swig_var_Terran_Vulture_get, Swig_var_Terran_Vulture_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Jim_Raynor_Vulture",Swig_var_Hero_Jim_Raynor_Vulture_get, Swig_var_Hero_Jim_Raynor_Vulture_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Goliath",Swig_var_Terran_Goliath_get, Swig_var_Terran_Goliath_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Alan_Schezar",Swig_var_Hero_Alan_Schezar_get, Swig_var_Hero_Alan_Schezar_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Siege_Tank_Tank_Mode",Swig_var_Terran_Siege_Tank_Tank_Mode_get, Swig_var_Terran_Siege_Tank_Tank_Mode_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Edmund_Duke_Tank_Mode",Swig_var_Hero_Edmund_Duke_Tank_Mode_get, Swig_var_Hero_Edmund_Duke_Tank_Mode_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_SCV",Swig_var_Terran_SCV_get, Swig_var_Terran_SCV_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Wraith",Swig_var_Terran_Wraith_get, Swig_var_Terran_Wraith_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Tom_Kazansky",Swig_var_Hero_Tom_Kazansky_get, Swig_var_Hero_Tom_Kazansky_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Science_Vessel",Swig_var_Terran_Science_Vessel_get, Swig_var_Terran_Science_Vessel_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Magellan",Swig_var_Hero_Magellan_get, Swig_var_Hero_Magellan_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Dropship",Swig_var_Terran_Dropship_get, Swig_var_Terran_Dropship_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Battlecruiser",Swig_var_Terran_Battlecruiser_get, Swig_var_Terran_Battlecruiser_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Arcturus_Mengsk",Swig_var_Hero_Arcturus_Mengsk_get, Swig_var_Hero_Arcturus_Mengsk_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Hyperion",Swig_var_Hero_Hyperion_get, Swig_var_Hero_Hyperion_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Norad_II",Swig_var_Hero_Norad_II_get, Swig_var_Hero_Norad_II_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Gerard_DuGalle",Swig_var_Hero_Gerard_DuGalle_get, Swig_var_Hero_Gerard_DuGalle_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Vulture_Spider_Mine",Swig_var_Terran_Vulture_Spider_Mine_get, Swig_var_Terran_Vulture_Spider_Mine_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Nuclear_Missile",Swig_var_Terran_Nuclear_Missile_get, Swig_var_Terran_Nuclear_Missile_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Siege_Tank_Siege_Mode",Swig_var_Terran_Siege_Tank_Siege_Mode_get, Swig_var_Terran_Siege_Tank_Siege_Mode_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Edmund_Duke_Siege_Mode",Swig_var_Hero_Edmund_Duke_Siege_Mode_get, Swig_var_Hero_Edmund_Duke_Siege_Mode_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Firebat",Swig_var_Terran_Firebat_get, Swig_var_Terran_Firebat_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Gui_Montag",Swig_var_Hero_Gui_Montag_get, Swig_var_Hero_Gui_Montag_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Spell_Scanner_Sweep",Swig_var_Spell_Scanner_Sweep_get, Swig_var_Spell_Scanner_Sweep_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Medic",Swig_var_Terran_Medic_get, Swig_var_Terran_Medic_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Civilian",Swig_var_Terran_Civilian_get, Swig_var_Terran_Civilian_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Larva",Swig_var_Zerg_Larva_get, Swig_var_Zerg_Larva_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Egg",Swig_var_Zerg_Egg_get, Swig_var_Zerg_Egg_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Zergling",Swig_var_Zerg_Zergling_get, Swig_var_Zerg_Zergling_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Devouring_One",Swig_var_Hero_Devouring_One_get, Swig_var_Hero_Devouring_One_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Infested_Kerrigan",Swig_var_Hero_Infested_Kerrigan_get, Swig_var_Hero_Infested_Kerrigan_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Hydralisk",Swig_var_Zerg_Hydralisk_get, Swig_var_Zerg_Hydralisk_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Hunter_Killer",Swig_var_Hero_Hunter_Killer_get, Swig_var_Hero_Hunter_Killer_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Ultralisk",Swig_var_Zerg_Ultralisk_get, Swig_var_Zerg_Ultralisk_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Torrasque",Swig_var_Hero_Torrasque_get, Swig_var_Hero_Torrasque_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Broodling",Swig_var_Zerg_Broodling_get, Swig_var_Zerg_Broodling_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Drone",Swig_var_Zerg_Drone_get, Swig_var_Zerg_Drone_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Overlord",Swig_var_Zerg_Overlord_get, Swig_var_Zerg_Overlord_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Yggdrasill",Swig_var_Hero_Yggdrasill_get, Swig_var_Hero_Yggdrasill_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Mutalisk",Swig_var_Zerg_Mutalisk_get, Swig_var_Zerg_Mutalisk_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Kukulza_Mutalisk",Swig_var_Hero_Kukulza_Mutalisk_get, Swig_var_Hero_Kukulza_Mutalisk_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Guardian",Swig_var_Zerg_Guardian_get, Swig_var_Zerg_Guardian_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Kukulza_Guardian",Swig_var_Hero_Kukulza_Guardian_get, Swig_var_Hero_Kukulza_Guardian_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Queen",Swig_var_Zerg_Queen_get, Swig_var_Zerg_Queen_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Matriarch",Swig_var_Hero_Matriarch_get, Swig_var_Hero_Matriarch_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Defiler",Swig_var_Zerg_Defiler_get, Swig_var_Zerg_Defiler_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Unclean_One",Swig_var_Hero_Unclean_One_get, Swig_var_Hero_Unclean_One_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Scourge",Swig_var_Zerg_Scourge_get, Swig_var_Zerg_Scourge_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Infested_Terran",Swig_var_Zerg_Infested_Terran_get, Swig_var_Zerg_Infested_Terran_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Valkyrie",Swig_var_Terran_Valkyrie_get, Swig_var_Terran_Valkyrie_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Cocoon",Swig_var_Zerg_Cocoon_get, Swig_var_Zerg_Cocoon_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_Corsair",Swig_var_Protoss_Corsair_get, Swig_var_Protoss_Corsair_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Raszagal",Swig_var_Hero_Raszagal_get, Swig_var_Hero_Raszagal_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_Dark_Templar",Swig_var_Protoss_Dark_Templar_get, Swig_var_Protoss_Dark_Templar_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Dark_Templar",Swig_var_Hero_Dark_Templar_get, Swig_var_Hero_Dark_Templar_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Zeratul",Swig_var_Hero_Zeratul_get, Swig_var_Hero_Zeratul_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Devourer",Swig_var_Zerg_Devourer_get, Swig_var_Zerg_Devourer_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_Dark_Archon",Swig_var_Protoss_Dark_Archon_get, Swig_var_Protoss_Dark_Archon_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_Probe",Swig_var_Protoss_Probe_get, Swig_var_Protoss_Probe_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_Zealot",Swig_var_Protoss_Zealot_get, Swig_var_Protoss_Zealot_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Fenix_Zealot",Swig_var_Hero_Fenix_Zealot_get, Swig_var_Hero_Fenix_Zealot_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_Dragoon",Swig_var_Protoss_Dragoon_get, Swig_var_Protoss_Dragoon_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Fenix_Dragoon",Swig_var_Hero_Fenix_Dragoon_get, Swig_var_Hero_Fenix_Dragoon_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_High_Templar",Swig_var_Protoss_High_Templar_get, Swig_var_Protoss_High_Templar_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Tassadar",Swig_var_Hero_Tassadar_get, Swig_var_Hero_Tassadar_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Aldaris",Swig_var_Hero_Aldaris_get, Swig_var_Hero_Aldaris_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_Archon",Swig_var_Protoss_Archon_get, Swig_var_Protoss_Archon_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Tassadar_Zeratul_Archon",Swig_var_Hero_Tassadar_Zeratul_Archon_get, Swig_var_Hero_Tassadar_Zeratul_Archon_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_Shuttle",Swig_var_Protoss_Shuttle_get, Swig_var_Protoss_Shuttle_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_Scout",Swig_var_Protoss_Scout_get, Swig_var_Protoss_Scout_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Mojo",Swig_var_Hero_Mojo_get, Swig_var_Hero_Mojo_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Artanis",Swig_var_Hero_Artanis_get, Swig_var_Hero_Artanis_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_Arbiter",Swig_var_Protoss_Arbiter_get, Swig_var_Protoss_Arbiter_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Danimoth",Swig_var_Hero_Danimoth_get, Swig_var_Hero_Danimoth_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_Carrier",Swig_var_Protoss_Carrier_get, Swig_var_Protoss_Carrier_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Gantrithor",Swig_var_Hero_Gantrithor_get, Swig_var_Hero_Gantrithor_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_Interceptor",Swig_var_Protoss_Interceptor_get, Swig_var_Protoss_Interceptor_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_Reaver",Swig_var_Protoss_Reaver_get, Swig_var_Protoss_Reaver_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hero_Warbringer",Swig_var_Hero_Warbringer_get, Swig_var_Hero_Warbringer_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_Observer",Swig_var_Protoss_Observer_get, Swig_var_Protoss_Observer_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_Scarab",Swig_var_Protoss_Scarab_get, Swig_var_Protoss_Scarab_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Critter_Rhynadon",Swig_var_Critter_Rhynadon_get, Swig_var_Critter_Rhynadon_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Critter_Bengalaas",Swig_var_Critter_Bengalaas_get, Swig_var_Critter_Bengalaas_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Critter_Scantid",Swig_var_Critter_Scantid_get, Swig_var_Critter_Scantid_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Critter_Kakaru",Swig_var_Critter_Kakaru_get, Swig_var_Critter_Kakaru_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Critter_Ragnasaur",Swig_var_Critter_Ragnasaur_get, Swig_var_Critter_Ragnasaur_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Critter_Ursadon",Swig_var_Critter_Ursadon_get, Swig_var_Critter_Ursadon_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Lurker_Egg",Swig_var_Zerg_Lurker_Egg_get, Swig_var_Zerg_Lurker_Egg_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Lurker",Swig_var_Zerg_Lurker_get, Swig_var_Zerg_Lurker_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Spell_Disruption_Web",Swig_var_Spell_Disruption_Web_get, Swig_var_Spell_Disruption_Web_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Command_Center",Swig_var_Terran_Command_Center_get, Swig_var_Terran_Command_Center_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Comsat_Station",Swig_var_Terran_Comsat_Station_get, Swig_var_Terran_Comsat_Station_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Nuclear_Silo",Swig_var_Terran_Nuclear_Silo_get, Swig_var_Terran_Nuclear_Silo_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Supply_Depot",Swig_var_Terran_Supply_Depot_get, Swig_var_Terran_Supply_Depot_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Refinery",Swig_var_Terran_Refinery_get, Swig_var_Terran_Refinery_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Barracks",Swig_var_Terran_Barracks_get, Swig_var_Terran_Barracks_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Academy",Swig_var_Terran_Academy_get, Swig_var_Terran_Academy_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Factory",Swig_var_Terran_Factory_get, Swig_var_Terran_Factory_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Starport",Swig_var_Terran_Starport_get, Swig_var_Terran_Starport_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Control_Tower",Swig_var_Terran_Control_Tower_get, Swig_var_Terran_Control_Tower_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Science_Facility",Swig_var_Terran_Science_Facility_get, Swig_var_Terran_Science_Facility_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Covert_Ops",Swig_var_Terran_Covert_Ops_get, Swig_var_Terran_Covert_Ops_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Physics_Lab",Swig_var_Terran_Physics_Lab_get, Swig_var_Terran_Physics_Lab_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Machine_Shop",Swig_var_Terran_Machine_Shop_get, Swig_var_Terran_Machine_Shop_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Engineering_Bay",Swig_var_Terran_Engineering_Bay_get, Swig_var_Terran_Engineering_Bay_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Armory",Swig_var_Terran_Armory_get, Swig_var_Terran_Armory_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Missile_Turret",Swig_var_Terran_Missile_Turret_get, Swig_var_Terran_Missile_Turret_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Bunker",Swig_var_Terran_Bunker_get, Swig_var_Terran_Bunker_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Special_Crashed_Norad_II",Swig_var_Special_Crashed_Norad_II_get, Swig_var_Special_Crashed_Norad_II_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Special_Ion_Cannon",Swig_var_Special_Ion_Cannon_get, Swig_var_Special_Ion_Cannon_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Infested_Command_Center",Swig_var_Zerg_Infested_Command_Center_get, Swig_var_Zerg_Infested_Command_Center_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Hatchery",Swig_var_Zerg_Hatchery_get, Swig_var_Zerg_Hatchery_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Lair",Swig_var_Zerg_Lair_get, Swig_var_Zerg_Lair_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Hive",Swig_var_Zerg_Hive_get, Swig_var_Zerg_Hive_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Nydus_Canal",Swig_var_Zerg_Nydus_Canal_get, Swig_var_Zerg_Nydus_Canal_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Hydralisk_Den",Swig_var_Zerg_Hydralisk_Den_get, Swig_var_Zerg_Hydralisk_Den_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Defiler_Mound",Swig_var_Zerg_Defiler_Mound_get, Swig_var_Zerg_Defiler_Mound_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Greater_Spire",Swig_var_Zerg_Greater_Spire_get, Swig_var_Zerg_Greater_Spire_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Queens_Nest",Swig_var_Zerg_Queens_Nest_get, Swig_var_Zerg_Queens_Nest_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Evolution_Chamber",Swig_var_Zerg_Evolution_Chamber_get, Swig_var_Zerg_Evolution_Chamber_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Ultralisk_Cavern",Swig_var_Zerg_Ultralisk_Cavern_get, Swig_var_Zerg_Ultralisk_Cavern_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Spire",Swig_var_Zerg_Spire_get, Swig_var_Zerg_Spire_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Spawning_Pool",Swig_var_Zerg_Spawning_Pool_get, Swig_var_Zerg_Spawning_Pool_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Creep_Colony",Swig_var_Zerg_Creep_Colony_get, Swig_var_Zerg_Creep_Colony_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Spore_Colony",Swig_var_Zerg_Spore_Colony_get, Swig_var_Zerg_Spore_Colony_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Sunken_Colony",Swig_var_Zerg_Sunken_Colony_get, Swig_var_Zerg_Sunken_Colony_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Special_Overmind_With_Shell",Swig_var_Special_Overmind_With_Shell_get, Swig_var_Special_Overmind_With_Shell_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Special_Overmind",Swig_var_Special_Overmind_get, Swig_var_Special_Overmind_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Extractor",Swig_var_Zerg_Extractor_get, Swig_var_Zerg_Extractor_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Special_Mature_Chrysalis",Swig_var_Special_Mature_Chrysalis_get, Swig_var_Special_Mature_Chrysalis_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Special_Cerebrate",Swig_var_Special_Cerebrate_get, Swig_var_Special_Cerebrate_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Special_Cerebrate_Daggoth",Swig_var_Special_Cerebrate_Daggoth_get, Swig_var_Special_Cerebrate_Daggoth_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_Nexus",Swig_var_Protoss_Nexus_get, Swig_var_Protoss_Nexus_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_Robotics_Facility",Swig_var_Protoss_Robotics_Facility_get, Swig_var_Protoss_Robotics_Facility_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_Pylon",Swig_var_Protoss_Pylon_get, Swig_var_Protoss_Pylon_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_Assimilator",Swig_var_Protoss_Assimilator_get, Swig_var_Protoss_Assimilator_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_Observatory",Swig_var_Protoss_Observatory_get, Swig_var_Protoss_Observatory_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_Gateway",Swig_var_Protoss_Gateway_get, Swig_var_Protoss_Gateway_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_Photon_Cannon",Swig_var_Protoss_Photon_Cannon_get, Swig_var_Protoss_Photon_Cannon_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_Citadel_of_Adun",Swig_var_Protoss_Citadel_of_Adun_get, Swig_var_Protoss_Citadel_of_Adun_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_Cybernetics_Core",Swig_var_Protoss_Cybernetics_Core_get, Swig_var_Protoss_Cybernetics_Core_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_Templar_Archives",Swig_var_Protoss_Templar_Archives_get, Swig_var_Protoss_Templar_Archives_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_Forge",Swig_var_Protoss_Forge_get, Swig_var_Protoss_Forge_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_Stargate",Swig_var_Protoss_Stargate_get, Swig_var_Protoss_Stargate_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Special_Stasis_Cell_Prison",Swig_var_Special_Stasis_Cell_Prison_get, Swig_var_Special_Stasis_Cell_Prison_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_Fleet_Beacon",Swig_var_Protoss_Fleet_Beacon_get, Swig_var_Protoss_Fleet_Beacon_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_Arbiter_Tribunal",Swig_var_Protoss_Arbiter_Tribunal_get, Swig_var_Protoss_Arbiter_Tribunal_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_Robotics_Support_Bay",Swig_var_Protoss_Robotics_Support_Bay_get, Swig_var_Protoss_Robotics_Support_Bay_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_Shield_Battery",Swig_var_Protoss_Shield_Battery_get, Swig_var_Protoss_Shield_Battery_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Special_Khaydarin_Crystal_Form",Swig_var_Special_Khaydarin_Crystal_Form_get, Swig_var_Special_Khaydarin_Crystal_Form_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Special_Protoss_Temple",Swig_var_Special_Protoss_Temple_get, Swig_var_Special_Protoss_Temple_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Special_XelNaga_Temple",Swig_var_Special_XelNaga_Temple_get, Swig_var_Special_XelNaga_Temple_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Resource_Mineral_Field",Swig_var_Resource_Mineral_Field_get, Swig_var_Resource_Mineral_Field_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Resource_Vespene_Geyser",Swig_var_Resource_Vespene_Geyser_get, Swig_var_Resource_Vespene_Geyser_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Special_Warp_Gate",Swig_var_Special_Warp_Gate_get, Swig_var_Special_Warp_Gate_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Special_Psi_Disrupter",Swig_var_Special_Psi_Disrupter_get, Swig_var_Special_Psi_Disrupter_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Special_Power_Generator",Swig_var_Special_Power_Generator_get, Swig_var_Special_Power_Generator_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Special_Overmind_Cocoon",Swig_var_Special_Overmind_Cocoon_get, Swig_var_Special_Overmind_Cocoon_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Special_Zerg_Beacon",Swig_var_Special_Zerg_Beacon_get, Swig_var_Special_Zerg_Beacon_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Special_Terran_Beacon",Swig_var_Special_Terran_Beacon_get, Swig_var_Special_Terran_Beacon_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Special_Protoss_Beacon",Swig_var_Special_Protoss_Beacon_get, Swig_var_Special_Protoss_Beacon_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Special_Zerg_Flag_Beacon",Swig_var_Special_Zerg_Flag_Beacon_get, Swig_var_Special_Zerg_Flag_Beacon_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Special_Terran_Flag_Beacon",Swig_var_Special_Terran_Flag_Beacon_get, Swig_var_Special_Terran_Flag_Beacon_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Special_Protoss_Flag_Beacon",Swig_var_Special_Protoss_Flag_Beacon_get, Swig_var_Special_Protoss_Flag_Beacon_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Spell_Dark_Swarm",Swig_var_Spell_Dark_Swarm_get, Swig_var_Spell_Dark_Swarm_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Powerup_Uraj_Crystal",Swig_var_Powerup_Uraj_Crystal_get, Swig_var_Powerup_Uraj_Crystal_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Powerup_Khalis_Crystal",Swig_var_Powerup_Khalis_Crystal_get, Swig_var_Powerup_Khalis_Crystal_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Powerup_Flag",Swig_var_Powerup_Flag_get, Swig_var_Powerup_Flag_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Powerup_Young_Chrysalis",Swig_var_Powerup_Young_Chrysalis_get, Swig_var_Powerup_Young_Chrysalis_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Powerup_Psi_Emitter",Swig_var_Powerup_Psi_Emitter_get, Swig_var_Powerup_Psi_Emitter_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Powerup_Data_Disk",Swig_var_Powerup_Data_Disk_get, Swig_var_Powerup_Data_Disk_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Powerup_Khaydarin_Crystal",Swig_var_Powerup_Khaydarin_Crystal_get, Swig_var_Powerup_Khaydarin_Crystal_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitTypes_None",Swig_var_UnitTypes_None_get, Swig_var_UnitTypes_None_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UnitTypes_Unknown",Swig_var_UnitTypes_Unknown_get, Swig_var_UnitTypes_Unknown_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Infantry_Armor",Swig_var_Terran_Infantry_Armor_get, Swig_var_Terran_Infantry_Armor_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Vehicle_Plating",Swig_var_Terran_Vehicle_Plating_get, Swig_var_Terran_Vehicle_Plating_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Ship_Plating",Swig_var_Terran_Ship_Plating_get, Swig_var_Terran_Ship_Plating_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Carapace",Swig_var_Zerg_Carapace_get, Swig_var_Zerg_Carapace_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Flyer_Carapace",Swig_var_Zerg_Flyer_Carapace_get, Swig_var_Zerg_Flyer_Carapace_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_Ground_Armor",Swig_var_Protoss_Ground_Armor_get, Swig_var_Protoss_Ground_Armor_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_Air_Armor",Swig_var_Protoss_Air_Armor_get, Swig_var_Protoss_Air_Armor_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Infantry_Weapons",Swig_var_Terran_Infantry_Weapons_get, Swig_var_Terran_Infantry_Weapons_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Vehicle_Weapons",Swig_var_Terran_Vehicle_Weapons_get, Swig_var_Terran_Vehicle_Weapons_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Terran_Ship_Weapons",Swig_var_Terran_Ship_Weapons_get, Swig_var_Terran_Ship_Weapons_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Melee_Attacks",Swig_var_Zerg_Melee_Attacks_get, Swig_var_Zerg_Melee_Attacks_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Missile_Attacks",Swig_var_Zerg_Missile_Attacks_get, Swig_var_Zerg_Missile_Attacks_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Zerg_Flyer_Attacks",Swig_var_Zerg_Flyer_Attacks_get, Swig_var_Zerg_Flyer_Attacks_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_Ground_Weapons",Swig_var_Protoss_Ground_Weapons_get, Swig_var_Protoss_Ground_Weapons_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_Air_Weapons",Swig_var_Protoss_Air_Weapons_get, Swig_var_Protoss_Air_Weapons_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Protoss_Plasma_Shields",Swig_var_Protoss_Plasma_Shields_get, Swig_var_Protoss_Plasma_Shields_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"U_238_Shells",Swig_var_U_238_Shells_get, Swig_var_U_238_Shells_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Ion_Thrusters",Swig_var_Ion_Thrusters_get, Swig_var_Ion_Thrusters_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Titan_Reactor",Swig_var_Titan_Reactor_get, Swig_var_Titan_Reactor_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Ocular_Implants",Swig_var_Ocular_Implants_get, Swig_var_Ocular_Implants_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Moebius_Reactor",Swig_var_Moebius_Reactor_get, Swig_var_Moebius_Reactor_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Apollo_Reactor",Swig_var_Apollo_Reactor_get, Swig_var_Apollo_Reactor_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Colossus_Reactor",Swig_var_Colossus_Reactor_get, Swig_var_Colossus_Reactor_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Ventral_Sacs",Swig_var_Ventral_Sacs_get, Swig_var_Ventral_Sacs_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Antennae",Swig_var_Antennae_get, Swig_var_Antennae_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Pneumatized_Carapace",Swig_var_Pneumatized_Carapace_get, Swig_var_Pneumatized_Carapace_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Metabolic_Boost",Swig_var_Metabolic_Boost_get, Swig_var_Metabolic_Boost_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Adrenal_Glands",Swig_var_Adrenal_Glands_get, Swig_var_Adrenal_Glands_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Muscular_Augments",Swig_var_Muscular_Augments_get, Swig_var_Muscular_Augments_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Grooved_Spines",Swig_var_Grooved_Spines_get, Swig_var_Grooved_Spines_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Gamete_Meiosis",Swig_var_Gamete_Meiosis_get, Swig_var_Gamete_Meiosis_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Metasynaptic_Node",Swig_var_Metasynaptic_Node_get, Swig_var_Metasynaptic_Node_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Singularity_Charge",Swig_var_Singularity_Charge_get, Swig_var_Singularity_Charge_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Leg_Enhancements",Swig_var_Leg_Enhancements_get, Swig_var_Leg_Enhancements_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Scarab_Damage",Swig_var_Scarab_Damage_get, Swig_var_Scarab_Damage_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Reaver_Capacity",Swig_var_Reaver_Capacity_get, Swig_var_Reaver_Capacity_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Gravitic_Drive",Swig_var_Gravitic_Drive_get, Swig_var_Gravitic_Drive_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Sensor_Array",Swig_var_Sensor_Array_get, Swig_var_Sensor_Array_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Gravitic_Boosters",Swig_var_Gravitic_Boosters_get, Swig_var_Gravitic_Boosters_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Khaydarin_Amulet",Swig_var_Khaydarin_Amulet_get, Swig_var_Khaydarin_Amulet_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Apial_Sensors",Swig_var_Apial_Sensors_get, Swig_var_Apial_Sensors_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Gravitic_Thrusters",Swig_var_Gravitic_Thrusters_get, Swig_var_Gravitic_Thrusters_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Carrier_Capacity",Swig_var_Carrier_Capacity_get, Swig_var_Carrier_Capacity_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Khaydarin_Core",Swig_var_Khaydarin_Core_get, Swig_var_Khaydarin_Core_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Argus_Jewel",Swig_var_Argus_Jewel_get, Swig_var_Argus_Jewel_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Argus_Talisman",Swig_var_Argus_Talisman_get, Swig_var_Argus_Talisman_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Caduceus_Reactor",Swig_var_Caduceus_Reactor_get, Swig_var_Caduceus_Reactor_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Chitinous_Plating",Swig_var_Chitinous_Plating_get, Swig_var_Chitinous_Plating_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Anabolic_Synthesis",Swig_var_Anabolic_Synthesis_get, Swig_var_Anabolic_Synthesis_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Charon_Boosters",Swig_var_Charon_Boosters_get, Swig_var_Charon_Boosters_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UpgradeTypes_None",Swig_var_UpgradeTypes_None_get, Swig_var_UpgradeTypes_None_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UpgradeTypes_Unknown",Swig_var_UpgradeTypes_Unknown_get, Swig_var_UpgradeTypes_Unknown_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Gauss_Rifle",Swig_var_Gauss_Rifle_get, Swig_var_Gauss_Rifle_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Gauss_Rifle_Jim_Raynor",Swig_var_Gauss_Rifle_Jim_Raynor_get, Swig_var_Gauss_Rifle_Jim_Raynor_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"C_10_Canister_Rifle",Swig_var_C_10_Canister_Rifle_get, Swig_var_C_10_Canister_Rifle_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"C_10_Canister_Rifle_Sarah_Kerrigan",Swig_var_C_10_Canister_Rifle_Sarah_Kerrigan_get, Swig_var_C_10_Canister_Rifle_Sarah_Kerrigan_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"C_10_Canister_Rifle_Samir_Duran",Swig_var_C_10_Canister_Rifle_Samir_Duran_get, Swig_var_C_10_Canister_Rifle_Samir_Duran_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"C_10_Canister_Rifle_Infested_Duran",Swig_var_C_10_Canister_Rifle_Infested_Duran_get, Swig_var_C_10_Canister_Rifle_Infested_Duran_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"C_10_Canister_Rifle_Alexei_Stukov",Swig_var_C_10_Canister_Rifle_Alexei_Stukov_get, Swig_var_C_10_Canister_Rifle_Alexei_Stukov_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WeaponTypes_Fragmentation_Grenade",Swig_var_WeaponTypes_Fragmentation_Grenade_get, Swig_var_WeaponTypes_Fragmentation_Grenade_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Fragmentation_Grenade_Jim_Raynor",Swig_var_Fragmentation_Grenade_Jim_Raynor_get, Swig_var_Fragmentation_Grenade_Jim_Raynor_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WeaponTypes_Spider_Mines",Swig_var_WeaponTypes_Spider_Mines_get, Swig_var_WeaponTypes_Spider_Mines_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Twin_Autocannons",Swig_var_Twin_Autocannons_get, Swig_var_Twin_Autocannons_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Twin_Autocannons_Alan_Schezar",Swig_var_Twin_Autocannons_Alan_Schezar_get, Swig_var_Twin_Autocannons_Alan_Schezar_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hellfire_Missile_Pack",Swig_var_Hellfire_Missile_Pack_get, Swig_var_Hellfire_Missile_Pack_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Hellfire_Missile_Pack_Alan_Schezar",Swig_var_Hellfire_Missile_Pack_Alan_Schezar_get, Swig_var_Hellfire_Missile_Pack_Alan_Schezar_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Arclite_Cannon",Swig_var_Arclite_Cannon_get, Swig_var_Arclite_Cannon_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Arclite_Cannon_Edmund_Duke",Swig_var_Arclite_Cannon_Edmund_Duke_get, Swig_var_Arclite_Cannon_Edmund_Duke_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Fusion_Cutter",Swig_var_Fusion_Cutter_get, Swig_var_Fusion_Cutter_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WeaponTypes_Gemini_Missiles",Swig_var_WeaponTypes_Gemini_Missiles_get, Swig_var_WeaponTypes_Gemini_Missiles_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Gemini_Missiles_Tom_Kazansky",Swig_var_Gemini_Missiles_Tom_Kazansky_get, Swig_var_Gemini_Missiles_Tom_Kazansky_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WeaponTypes_Burst_Lasers",Swig_var_WeaponTypes_Burst_Lasers_get, Swig_var_WeaponTypes_Burst_Lasers_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Burst_Lasers_Tom_Kazansky",Swig_var_Burst_Lasers_Tom_Kazansky_get, Swig_var_Burst_Lasers_Tom_Kazansky_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ATS_Laser_Battery",Swig_var_ATS_Laser_Battery_get, Swig_var_ATS_Laser_Battery_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ATS_Laser_Battery_Hero",Swig_var_ATS_Laser_Battery_Hero_get, Swig_var_ATS_Laser_Battery_Hero_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ATS_Laser_Battery_Hyperion",Swig_var_ATS_Laser_Battery_Hyperion_get, Swig_var_ATS_Laser_Battery_Hyperion_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ATA_Laser_Battery",Swig_var_ATA_Laser_Battery_get, Swig_var_ATA_Laser_Battery_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ATA_Laser_Battery_Hero",Swig_var_ATA_Laser_Battery_Hero_get, Swig_var_ATA_Laser_Battery_Hero_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ATA_Laser_Battery_Hyperion",Swig_var_ATA_Laser_Battery_Hyperion_get, Swig_var_ATA_Laser_Battery_Hyperion_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Flame_Thrower",Swig_var_Flame_Thrower_get, Swig_var_Flame_Thrower_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Flame_Thrower_Gui_Montag",Swig_var_Flame_Thrower_Gui_Montag_get, Swig_var_Flame_Thrower_Gui_Montag_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Arclite_Shock_Cannon",Swig_var_Arclite_Shock_Cannon_get, Swig_var_Arclite_Shock_Cannon_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Arclite_Shock_Cannon_Edmund_Duke",Swig_var_Arclite_Shock_Cannon_Edmund_Duke_get, Swig_var_Arclite_Shock_Cannon_Edmund_Duke_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WeaponTypes_Longbolt_Missile",Swig_var_WeaponTypes_Longbolt_Missile_get, Swig_var_WeaponTypes_Longbolt_Missile_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Claws",Swig_var_Claws_get, Swig_var_Claws_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Claws_Devouring_One",Swig_var_Claws_Devouring_One_get, Swig_var_Claws_Devouring_One_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Claws_Infested_Kerrigan",Swig_var_Claws_Infested_Kerrigan_get, Swig_var_Claws_Infested_Kerrigan_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Needle_Spines",Swig_var_Needle_Spines_get, Swig_var_Needle_Spines_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Needle_Spines_Hunter_Killer",Swig_var_Needle_Spines_Hunter_Killer_get, Swig_var_Needle_Spines_Hunter_Killer_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Kaiser_Blades",Swig_var_Kaiser_Blades_get, Swig_var_Kaiser_Blades_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Kaiser_Blades_Torrasque",Swig_var_Kaiser_Blades_Torrasque_get, Swig_var_Kaiser_Blades_Torrasque_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Toxic_Spores",Swig_var_Toxic_Spores_get, Swig_var_Toxic_Spores_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Spines",Swig_var_Spines_get, Swig_var_Spines_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WeaponTypes_Acid_Spore",Swig_var_WeaponTypes_Acid_Spore_get, Swig_var_WeaponTypes_Acid_Spore_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Acid_Spore_Kukulza",Swig_var_Acid_Spore_Kukulza_get, Swig_var_Acid_Spore_Kukulza_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WeaponTypes_Glave_Wurm",Swig_var_WeaponTypes_Glave_Wurm_get, Swig_var_WeaponTypes_Glave_Wurm_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Glave_Wurm_Kukulza",Swig_var_Glave_Wurm_Kukulza_get, Swig_var_Glave_Wurm_Kukulza_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WeaponTypes_Seeker_Spores",Swig_var_WeaponTypes_Seeker_Spores_get, Swig_var_WeaponTypes_Seeker_Spores_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Subterranean_Tentacle",Swig_var_Subterranean_Tentacle_get, Swig_var_Subterranean_Tentacle_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Suicide_Infested_Terran",Swig_var_Suicide_Infested_Terran_get, Swig_var_Suicide_Infested_Terran_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Suicide_Scourge",Swig_var_Suicide_Scourge_get, Swig_var_Suicide_Scourge_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Particle_Beam",Swig_var_Particle_Beam_get, Swig_var_Particle_Beam_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Psi_Blades",Swig_var_Psi_Blades_get, Swig_var_Psi_Blades_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Psi_Blades_Fenix",Swig_var_Psi_Blades_Fenix_get, Swig_var_Psi_Blades_Fenix_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WeaponTypes_Phase_Disruptor",Swig_var_WeaponTypes_Phase_Disruptor_get, Swig_var_WeaponTypes_Phase_Disruptor_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Phase_Disruptor_Fenix",Swig_var_Phase_Disruptor_Fenix_get, Swig_var_Phase_Disruptor_Fenix_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Psi_Assault",Swig_var_Psi_Assault_get, Swig_var_Psi_Assault_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Psionic_Shockwave",Swig_var_Psionic_Shockwave_get, Swig_var_Psionic_Shockwave_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Psionic_Shockwave_TZ_Archon",Swig_var_Psionic_Shockwave_TZ_Archon_get, Swig_var_Psionic_Shockwave_TZ_Archon_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Dual_Photon_Blasters",Swig_var_Dual_Photon_Blasters_get, Swig_var_Dual_Photon_Blasters_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Dual_Photon_Blasters_Mojo",Swig_var_Dual_Photon_Blasters_Mojo_get, Swig_var_Dual_Photon_Blasters_Mojo_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Dual_Photon_Blasters_Artanis",Swig_var_Dual_Photon_Blasters_Artanis_get, Swig_var_Dual_Photon_Blasters_Artanis_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Anti_Matter_Missiles",Swig_var_Anti_Matter_Missiles_get, Swig_var_Anti_Matter_Missiles_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Anti_Matter_Missiles_Mojo",Swig_var_Anti_Matter_Missiles_Mojo_get, Swig_var_Anti_Matter_Missiles_Mojo_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Anti_Matter_Missiles_Artanis",Swig_var_Anti_Matter_Missiles_Artanis_get, Swig_var_Anti_Matter_Missiles_Artanis_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Phase_Disruptor_Cannon",Swig_var_Phase_Disruptor_Cannon_get, Swig_var_Phase_Disruptor_Cannon_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Phase_Disruptor_Cannon_Danimoth",Swig_var_Phase_Disruptor_Cannon_Danimoth_get, Swig_var_Phase_Disruptor_Cannon_Danimoth_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WeaponTypes_Pulse_Cannon",Swig_var_WeaponTypes_Pulse_Cannon_get, Swig_var_WeaponTypes_Pulse_Cannon_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"STS_Photon_Cannon",Swig_var_STS_Photon_Cannon_get, Swig_var_STS_Photon_Cannon_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"STA_Photon_Cannon",Swig_var_STA_Photon_Cannon_get, Swig_var_STA_Photon_Cannon_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Scarab",Swig_var_Scarab_get, Swig_var_Scarab_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WeaponTypes_Neutron_Flare",Swig_var_WeaponTypes_Neutron_Flare_get, Swig_var_WeaponTypes_Neutron_Flare_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WeaponTypes_Halo_Rockets",Swig_var_WeaponTypes_Halo_Rockets_get, Swig_var_WeaponTypes_Halo_Rockets_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WeaponTypes_Corrosive_Acid",Swig_var_WeaponTypes_Corrosive_Acid_get, Swig_var_WeaponTypes_Corrosive_Acid_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WeaponTypes_Subterranean_Spines",Swig_var_WeaponTypes_Subterranean_Spines_get, Swig_var_WeaponTypes_Subterranean_Spines_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Warp_Blades",Swig_var_Warp_Blades_get, Swig_var_Warp_Blades_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Warp_Blades_Hero",Swig_var_Warp_Blades_Hero_get, Swig_var_Warp_Blades_Hero_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Warp_Blades_Zeratul",Swig_var_Warp_Blades_Zeratul_get, Swig_var_Warp_Blades_Zeratul_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WeaponTypes_Yamato_Gun",Swig_var_WeaponTypes_Yamato_Gun_get, Swig_var_WeaponTypes_Yamato_Gun_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WeaponTypes_Nuclear_Strike",Swig_var_WeaponTypes_Nuclear_Strike_get, Swig_var_WeaponTypes_Nuclear_Strike_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WeaponTypes_Lockdown",Swig_var_WeaponTypes_Lockdown_get, Swig_var_WeaponTypes_Lockdown_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WeaponTypes_EMP_Shockwave",Swig_var_WeaponTypes_EMP_Shockwave_get, Swig_var_WeaponTypes_EMP_Shockwave_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WeaponTypes_Irradiate",Swig_var_WeaponTypes_Irradiate_get, Swig_var_WeaponTypes_Irradiate_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WeaponTypes_Parasite",Swig_var_WeaponTypes_Parasite_get, Swig_var_WeaponTypes_Parasite_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WeaponTypes_Spawn_Broodlings",Swig_var_WeaponTypes_Spawn_Broodlings_get, Swig_var_WeaponTypes_Spawn_Broodlings_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WeaponTypes_Ensnare",Swig_var_WeaponTypes_Ensnare_get, Swig_var_WeaponTypes_Ensnare_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WeaponTypes_Dark_Swarm",Swig_var_WeaponTypes_Dark_Swarm_get, Swig_var_WeaponTypes_Dark_Swarm_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WeaponTypes_Plague",Swig_var_WeaponTypes_Plague_get, Swig_var_WeaponTypes_Plague_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WeaponTypes_Consume",Swig_var_WeaponTypes_Consume_get, Swig_var_WeaponTypes_Consume_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WeaponTypes_Stasis_Field",Swig_var_WeaponTypes_Stasis_Field_get, Swig_var_WeaponTypes_Stasis_Field_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WeaponTypes_Psionic_Storm",Swig_var_WeaponTypes_Psionic_Storm_get, Swig_var_WeaponTypes_Psionic_Storm_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WeaponTypes_Disruption_Web",Swig_var_WeaponTypes_Disruption_Web_get, Swig_var_WeaponTypes_Disruption_Web_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WeaponTypes_Restoration",Swig_var_WeaponTypes_Restoration_get, Swig_var_WeaponTypes_Restoration_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WeaponTypes_Mind_Control",Swig_var_WeaponTypes_Mind_Control_get, Swig_var_WeaponTypes_Mind_Control_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WeaponTypes_Feedback",Swig_var_WeaponTypes_Feedback_get, Swig_var_WeaponTypes_Feedback_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WeaponTypes_Optical_Flare",Swig_var_WeaponTypes_Optical_Flare_get, Swig_var_WeaponTypes_Optical_Flare_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WeaponTypes_Maelstrom",Swig_var_WeaponTypes_Maelstrom_get, Swig_var_WeaponTypes_Maelstrom_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WeaponTypes_None",Swig_var_WeaponTypes_None_get, Swig_var_WeaponTypes_None_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WeaponTypes_Unknown",Swig_var_WeaponTypes_Unknown_get, Swig_var_WeaponTypes_Unknown_set);
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

