# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pybw_swig', [dirname(__file__)])
        except ImportError:
            import _pybw_swig
            return _pybw_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_pybw_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pybw_swig = swig_import_helper()
    del swig_import_helper
else:
    import _pybw_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pybw_swig.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _pybw_swig.SwigPyIterator_value(self)
    def incr(self, n = 1): return _pybw_swig.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _pybw_swig.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _pybw_swig.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _pybw_swig.SwigPyIterator_equal(self, *args)
    def copy(self): return _pybw_swig.SwigPyIterator_copy(self)
    def next(self): return _pybw_swig.SwigPyIterator_next(self)
    def __next__(self): return _pybw_swig.SwigPyIterator___next__(self)
    def previous(self): return _pybw_swig.SwigPyIterator_previous(self)
    def advance(self, *args): return _pybw_swig.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _pybw_swig.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _pybw_swig.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _pybw_swig.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _pybw_swig.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _pybw_swig.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _pybw_swig.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _pybw_swig.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class RegionSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegionSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RegionSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_RegionSet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybw_swig.delete_RegionSet
    __del__ = lambda self : None;
    def __len__(self): return _pybw_swig.RegionSet___len__(self)
    def __contains__(self, *args): return _pybw_swig.RegionSet___contains__(self, *args)
    def __iter__(self): return _pybw_swig.RegionSet___iter__(self)
    def next(self): return _pybw_swig.RegionSet_next(self)
RegionSet_swigregister = _pybw_swig.RegionSet_swigregister
RegionSet_swigregister(RegionSet)

class ChokepointSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChokepointSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChokepointSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_ChokepointSet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybw_swig.delete_ChokepointSet
    __del__ = lambda self : None;
    def __len__(self): return _pybw_swig.ChokepointSet___len__(self)
    def __contains__(self, *args): return _pybw_swig.ChokepointSet___contains__(self, *args)
    def __iter__(self): return _pybw_swig.ChokepointSet___iter__(self)
    def next(self): return _pybw_swig.ChokepointSet_next(self)
ChokepointSet_swigregister = _pybw_swig.ChokepointSet_swigregister
ChokepointSet_swigregister(ChokepointSet)

class BaseLocationSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseLocationSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseLocationSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_BaseLocationSet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybw_swig.delete_BaseLocationSet
    __del__ = lambda self : None;
    def __len__(self): return _pybw_swig.BaseLocationSet___len__(self)
    def __contains__(self, *args): return _pybw_swig.BaseLocationSet___contains__(self, *args)
    def __iter__(self): return _pybw_swig.BaseLocationSet___iter__(self)
    def next(self): return _pybw_swig.BaseLocationSet_next(self)
BaseLocationSet_swigregister = _pybw_swig.BaseLocationSet_swigregister
BaseLocationSet_swigregister(BaseLocationSet)

class PlayerSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlayerSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PlayerSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_PlayerSet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybw_swig.delete_PlayerSet
    __del__ = lambda self : None;
    def __len__(self): return _pybw_swig.PlayerSet___len__(self)
    def __contains__(self, *args): return _pybw_swig.PlayerSet___contains__(self, *args)
    def __iter__(self): return _pybw_swig.PlayerSet___iter__(self)
    def next(self): return _pybw_swig.PlayerSet_next(self)
PlayerSet_swigregister = _pybw_swig.PlayerSet_swigregister
PlayerSet_swigregister(PlayerSet)

class UnitSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnitSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_UnitSet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybw_swig.delete_UnitSet
    __del__ = lambda self : None;
    def __len__(self): return _pybw_swig.UnitSet___len__(self)
    def __contains__(self, *args): return _pybw_swig.UnitSet___contains__(self, *args)
    def __iter__(self): return _pybw_swig.UnitSet___iter__(self)
    def next(self): return _pybw_swig.UnitSet_next(self)
UnitSet_swigregister = _pybw_swig.UnitSet_swigregister
UnitSet_swigregister(UnitSet)

class ForceSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForceSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ForceSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_ForceSet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybw_swig.delete_ForceSet
    __del__ = lambda self : None;
    def __len__(self): return _pybw_swig.ForceSet___len__(self)
    def __contains__(self, *args): return _pybw_swig.ForceSet___contains__(self, *args)
    def __iter__(self): return _pybw_swig.ForceSet___iter__(self)
    def next(self): return _pybw_swig.ForceSet_next(self)
ForceSet_swigregister = _pybw_swig.ForceSet_swigregister
ForceSet_swigregister(ForceSet)

class PositionSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PositionSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PositionSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_PositionSet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybw_swig.delete_PositionSet
    __del__ = lambda self : None;
    def __len__(self): return _pybw_swig.PositionSet___len__(self)
    def __contains__(self, *args): return _pybw_swig.PositionSet___contains__(self, *args)
    def __iter__(self): return _pybw_swig.PositionSet___iter__(self)
    def next(self): return _pybw_swig.PositionSet_next(self)
PositionSet_swigregister = _pybw_swig.PositionSet_swigregister
PositionSet_swigregister(PositionSet)

class TilePositionSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TilePositionSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TilePositionSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_TilePositionSet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybw_swig.delete_TilePositionSet
    __del__ = lambda self : None;
    def __len__(self): return _pybw_swig.TilePositionSet___len__(self)
    def __contains__(self, *args): return _pybw_swig.TilePositionSet___contains__(self, *args)
    def __iter__(self): return _pybw_swig.TilePositionSet___iter__(self)
    def next(self): return _pybw_swig.TilePositionSet_next(self)
TilePositionSet_swigregister = _pybw_swig.TilePositionSet_swigregister
TilePositionSet_swigregister(TilePositionSet)

class UnitTypeSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitTypeSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnitTypeSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_UnitTypeSet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybw_swig.delete_UnitTypeSet
    __del__ = lambda self : None;
    def __len__(self): return _pybw_swig.UnitTypeSet___len__(self)
    def __contains__(self, *args): return _pybw_swig.UnitTypeSet___contains__(self, *args)
    def __iter__(self): return _pybw_swig.UnitTypeSet___iter__(self)
    def next(self): return _pybw_swig.UnitTypeSet_next(self)
UnitTypeSet_swigregister = _pybw_swig.UnitTypeSet_swigregister
UnitTypeSet_swigregister(UnitTypeSet)

class RegionList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegionList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RegionList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_RegionList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybw_swig.delete_RegionList
    __del__ = lambda self : None;
    def __len__(self): return _pybw_swig.RegionList___len__(self)
    def _size(self): return _pybw_swig.RegionList__size(self)
    def __contains__(self, *args): return _pybw_swig.RegionList___contains__(self, *args)
    def __iter__(self): return _pybw_swig.RegionList___iter__(self)
    def next(self): return _pybw_swig.RegionList_next(self)
RegionList_swigregister = _pybw_swig.RegionList_swigregister
RegionList_swigregister(RegionList)

class ChokepointList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChokepointList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChokepointList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_ChokepointList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybw_swig.delete_ChokepointList
    __del__ = lambda self : None;
    def __len__(self): return _pybw_swig.ChokepointList___len__(self)
    def _size(self): return _pybw_swig.ChokepointList__size(self)
    def __contains__(self, *args): return _pybw_swig.ChokepointList___contains__(self, *args)
    def __iter__(self): return _pybw_swig.ChokepointList___iter__(self)
    def next(self): return _pybw_swig.ChokepointList_next(self)
ChokepointList_swigregister = _pybw_swig.ChokepointList_swigregister
ChokepointList_swigregister(ChokepointList)

class BaseLocationList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseLocationList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseLocationList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_BaseLocationList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybw_swig.delete_BaseLocationList
    __del__ = lambda self : None;
    def __len__(self): return _pybw_swig.BaseLocationList___len__(self)
    def _size(self): return _pybw_swig.BaseLocationList__size(self)
    def __contains__(self, *args): return _pybw_swig.BaseLocationList___contains__(self, *args)
    def __iter__(self): return _pybw_swig.BaseLocationList___iter__(self)
    def next(self): return _pybw_swig.BaseLocationList_next(self)
BaseLocationList_swigregister = _pybw_swig.BaseLocationList_swigregister
BaseLocationList_swigregister(BaseLocationList)

class PlayerList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlayerList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PlayerList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_PlayerList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybw_swig.delete_PlayerList
    __del__ = lambda self : None;
    def __len__(self): return _pybw_swig.PlayerList___len__(self)
    def _size(self): return _pybw_swig.PlayerList__size(self)
    def __contains__(self, *args): return _pybw_swig.PlayerList___contains__(self, *args)
    def __iter__(self): return _pybw_swig.PlayerList___iter__(self)
    def next(self): return _pybw_swig.PlayerList_next(self)
PlayerList_swigregister = _pybw_swig.PlayerList_swigregister
PlayerList_swigregister(PlayerList)

class UnitList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnitList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_UnitList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybw_swig.delete_UnitList
    __del__ = lambda self : None;
    def __len__(self): return _pybw_swig.UnitList___len__(self)
    def _size(self): return _pybw_swig.UnitList__size(self)
    def __contains__(self, *args): return _pybw_swig.UnitList___contains__(self, *args)
    def __iter__(self): return _pybw_swig.UnitList___iter__(self)
    def next(self): return _pybw_swig.UnitList_next(self)
UnitList_swigregister = _pybw_swig.UnitList_swigregister
UnitList_swigregister(UnitList)

class ForceList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForceList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ForceList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_ForceList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybw_swig.delete_ForceList
    __del__ = lambda self : None;
    def __len__(self): return _pybw_swig.ForceList___len__(self)
    def _size(self): return _pybw_swig.ForceList__size(self)
    def __contains__(self, *args): return _pybw_swig.ForceList___contains__(self, *args)
    def __iter__(self): return _pybw_swig.ForceList___iter__(self)
    def next(self): return _pybw_swig.ForceList_next(self)
ForceList_swigregister = _pybw_swig.ForceList_swigregister
ForceList_swigregister(ForceList)

class PositionList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PositionList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PositionList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_PositionList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybw_swig.delete_PositionList
    __del__ = lambda self : None;
    def __len__(self): return _pybw_swig.PositionList___len__(self)
    def _size(self): return _pybw_swig.PositionList__size(self)
    def __contains__(self, *args): return _pybw_swig.PositionList___contains__(self, *args)
    def __iter__(self): return _pybw_swig.PositionList___iter__(self)
    def next(self): return _pybw_swig.PositionList_next(self)
PositionList_swigregister = _pybw_swig.PositionList_swigregister
PositionList_swigregister(PositionList)

class TilePositionList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TilePositionList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TilePositionList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_TilePositionList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybw_swig.delete_TilePositionList
    __del__ = lambda self : None;
    def __len__(self): return _pybw_swig.TilePositionList___len__(self)
    def _size(self): return _pybw_swig.TilePositionList__size(self)
    def __contains__(self, *args): return _pybw_swig.TilePositionList___contains__(self, *args)
    def __iter__(self): return _pybw_swig.TilePositionList___iter__(self)
    def next(self): return _pybw_swig.TilePositionList_next(self)
TilePositionList_swigregister = _pybw_swig.TilePositionList_swigregister
TilePositionList_swigregister(TilePositionList)

class UnitTypeList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitTypeList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnitTypeList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_UnitTypeList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybw_swig.delete_UnitTypeList
    __del__ = lambda self : None;
    def __len__(self): return _pybw_swig.UnitTypeList___len__(self)
    def _size(self): return _pybw_swig.UnitTypeList__size(self)
    def __contains__(self, *args): return _pybw_swig.UnitTypeList___contains__(self, *args)
    def __iter__(self): return _pybw_swig.UnitTypeList___iter__(self)
    def next(self): return _pybw_swig.UnitTypeList_next(self)
UnitTypeList_swigregister = _pybw_swig.UnitTypeList_swigregister
UnitTypeList_swigregister(UnitTypeList)

class PositionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PositionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PositionVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pybw_swig.PositionVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pybw_swig.PositionVector___nonzero__(self)
    def __bool__(self): return _pybw_swig.PositionVector___bool__(self)
    def __len__(self): return _pybw_swig.PositionVector___len__(self)
    def pop(self): return _pybw_swig.PositionVector_pop(self)
    def __getslice__(self, *args): return _pybw_swig.PositionVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pybw_swig.PositionVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pybw_swig.PositionVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pybw_swig.PositionVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pybw_swig.PositionVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pybw_swig.PositionVector___setitem__(self, *args)
    def append(self, *args): return _pybw_swig.PositionVector_append(self, *args)
    def empty(self): return _pybw_swig.PositionVector_empty(self)
    def size(self): return _pybw_swig.PositionVector_size(self)
    def clear(self): return _pybw_swig.PositionVector_clear(self)
    def swap(self, *args): return _pybw_swig.PositionVector_swap(self, *args)
    def get_allocator(self): return _pybw_swig.PositionVector_get_allocator(self)
    def begin(self): return _pybw_swig.PositionVector_begin(self)
    def end(self): return _pybw_swig.PositionVector_end(self)
    def rbegin(self): return _pybw_swig.PositionVector_rbegin(self)
    def rend(self): return _pybw_swig.PositionVector_rend(self)
    def pop_back(self): return _pybw_swig.PositionVector_pop_back(self)
    def erase(self, *args): return _pybw_swig.PositionVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pybw_swig.new_PositionVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pybw_swig.PositionVector_push_back(self, *args)
    def front(self): return _pybw_swig.PositionVector_front(self)
    def back(self): return _pybw_swig.PositionVector_back(self)
    def assign(self, *args): return _pybw_swig.PositionVector_assign(self, *args)
    def resize(self, *args): return _pybw_swig.PositionVector_resize(self, *args)
    def insert(self, *args): return _pybw_swig.PositionVector_insert(self, *args)
    def reserve(self, *args): return _pybw_swig.PositionVector_reserve(self, *args)
    def capacity(self): return _pybw_swig.PositionVector_capacity(self)
    __swig_destroy__ = _pybw_swig.delete_PositionVector
    __del__ = lambda self : None;
PositionVector_swigregister = _pybw_swig.PositionVector_swigregister
PositionVector_swigregister(PositionVector)


def BWAPI_init():
  return _pybw_swig.BWAPI_init()
BWAPI_init = _pybw_swig.BWAPI_init

def TA_getStartLocation(*args):
  return _pybw_swig.TA_getStartLocation(*args)
TA_getStartLocation = _pybw_swig.TA_getStartLocation

def TA_getNearestBaseLocation(*args):
  return _pybw_swig.TA_getNearestBaseLocation(*args)
TA_getNearestBaseLocation = _pybw_swig.TA_getNearestBaseLocation

def TA_getRegions():
  return _pybw_swig.TA_getRegions()
TA_getRegions = _pybw_swig.TA_getRegions

def TA_getChokepoints():
  return _pybw_swig.TA_getChokepoints()
TA_getChokepoints = _pybw_swig.TA_getChokepoints

def TA_getBaseLocations():
  return _pybw_swig.TA_getBaseLocations()
TA_getBaseLocations = _pybw_swig.TA_getBaseLocations

def TA_getStartLocations():
  return _pybw_swig.TA_getStartLocations()
TA_getStartLocations = _pybw_swig.TA_getStartLocations

def readMap():
  return _pybw_swig.readMap()
readMap = _pybw_swig.readMap

def analyze():
  return _pybw_swig.analyze()
analyze = _pybw_swig.analyze

def getNearestUnwalkablePosition(*args):
  return _pybw_swig.getNearestUnwalkablePosition(*args)
getNearestUnwalkablePosition = _pybw_swig.getNearestUnwalkablePosition

def getGroundDistance(*args):
  return _pybw_swig.getGroundDistance(*args)
getGroundDistance = _pybw_swig.getGroundDistance

def getNearestTilePosition(*args):
  return _pybw_swig.getNearestTilePosition(*args)
getNearestTilePosition = _pybw_swig.getNearestTilePosition

def getGroundDistances(*args):
  return _pybw_swig.getGroundDistances(*args)
getGroundDistances = _pybw_swig.getGroundDistances

def getGroundDistanceMap(*args):
  return _pybw_swig.getGroundDistanceMap(*args)
getGroundDistanceMap = _pybw_swig.getGroundDistanceMap

def getGroundWalkDistanceMap(*args):
  return _pybw_swig.getGroundWalkDistanceMap(*args)
getGroundWalkDistanceMap = _pybw_swig.getGroundWalkDistanceMap

def getGame():
  return _pybw_swig.getGame()
getGame = _pybw_swig.getGame

def analyzeMap():
  return _pybw_swig.analyzeMap()
analyzeMap = _pybw_swig.analyzeMap

def analyzeMapThreaded():
  return _pybw_swig.analyzeMapThreaded()
analyzeMapThreaded = _pybw_swig.analyzeMapThreaded

def isAnalyzed():
  return _pybw_swig.isAnalyzed()
isAnalyzed = _pybw_swig.isAnalyzed

def sendText(*args):
  return _pybw_swig.sendText(*args)
sendText = _pybw_swig.sendText
class AIModule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AIModule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AIModule, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pybw_swig.new_AIModule()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybw_swig.delete_AIModule
    __del__ = lambda self : None;
    def onStart(self): return _pybw_swig.AIModule_onStart(self)
    def onEnd(self, *args): return _pybw_swig.AIModule_onEnd(self, *args)
    def onFrame(self): return _pybw_swig.AIModule_onFrame(self)
    def onSendText(self, *args): return _pybw_swig.AIModule_onSendText(self, *args)
    def onReceiveText(self, *args): return _pybw_swig.AIModule_onReceiveText(self, *args)
    def onPlayerLeft(self, *args): return _pybw_swig.AIModule_onPlayerLeft(self, *args)
    def onNukeDetect(self, *args): return _pybw_swig.AIModule_onNukeDetect(self, *args)
    def onUnitDiscover(self, *args): return _pybw_swig.AIModule_onUnitDiscover(self, *args)
    def onUnitEvade(self, *args): return _pybw_swig.AIModule_onUnitEvade(self, *args)
    def onUnitShow(self, *args): return _pybw_swig.AIModule_onUnitShow(self, *args)
    def onUnitHide(self, *args): return _pybw_swig.AIModule_onUnitHide(self, *args)
    def onUnitCreate(self, *args): return _pybw_swig.AIModule_onUnitCreate(self, *args)
    def onUnitDestroy(self, *args): return _pybw_swig.AIModule_onUnitDestroy(self, *args)
    def onUnitMorph(self, *args): return _pybw_swig.AIModule_onUnitMorph(self, *args)
    def onUnitRenegade(self, *args): return _pybw_swig.AIModule_onUnitRenegade(self, *args)
    def onSaveGame(self, *args): return _pybw_swig.AIModule_onSaveGame(self, *args)
AIModule_swigregister = _pybw_swig.AIModule_swigregister
AIModule_swigregister(AIModule)

def getRegion(*args):
  return _pybw_swig.getRegion(*args)
getRegion = _pybw_swig.getRegion

def getNearestChokepoint(*args):
  return _pybw_swig.getNearestChokepoint(*args)
getNearestChokepoint = _pybw_swig.getNearestChokepoint

def isConnected(*args):
  return _pybw_swig.isConnected(*args)
isConnected = _pybw_swig.isConnected

def getShortestPath(*args):
  return _pybw_swig.getShortestPath(*args)
getShortestPath = _pybw_swig.getShortestPath

class BitmapProxy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BitmapProxy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BitmapProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_BitmapProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybw_swig.delete_BitmapProxy
    __del__ = lambda self : None;
BitmapProxy_swigregister = _pybw_swig.BitmapProxy_swigregister
BitmapProxy_swigregister(BitmapProxy)

class Bitmap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bitmap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bitmap, name)
    __repr__ = _swig_repr
    def getWidth(self): return _pybw_swig.Bitmap_getWidth(self)
    def getHeight(self): return _pybw_swig.Bitmap_getHeight(self)
    def __init__(self): 
        this = _pybw_swig.new_Bitmap()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybw_swig.delete_Bitmap
    __del__ = lambda self : None;
Bitmap_swigregister = _pybw_swig.Bitmap_swigregister
Bitmap_swigregister(Bitmap)

class Bullet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bullet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bullet, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getID(self): return _pybw_swig.Bullet_getID(self)
    def getPlayer(self): return _pybw_swig.Bullet_getPlayer(self)
    def getType(self): return _pybw_swig.Bullet_getType(self)
    def getSource(self): return _pybw_swig.Bullet_getSource(self)
    def getPosition(self): return _pybw_swig.Bullet_getPosition(self)
    def getAngle(self): return _pybw_swig.Bullet_getAngle(self)
    def getVelocityX(self): return _pybw_swig.Bullet_getVelocityX(self)
    def getVelocityY(self): return _pybw_swig.Bullet_getVelocityY(self)
    def getTarget(self): return _pybw_swig.Bullet_getTarget(self)
    def getTargetPosition(self): return _pybw_swig.Bullet_getTargetPosition(self)
    def getRemoveTimer(self): return _pybw_swig.Bullet_getRemoveTimer(self)
    def exists(self): return _pybw_swig.Bullet_exists(self)
    def isVisible(self, *args): return _pybw_swig.Bullet_isVisible(self, *args)
    __swig_destroy__ = _pybw_swig.delete_Bullet
    __del__ = lambda self : None;
Bullet_swigregister = _pybw_swig.Bullet_swigregister
Bullet_swigregister(Bullet)

class BulletType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BulletType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BulletType, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_BulletType(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _pybw_swig.BulletType___eq__(self, *args)
    def __ne__(self, *args): return _pybw_swig.BulletType___ne__(self, *args)
    def __lt__(self, *args): return _pybw_swig.BulletType___lt__(self, *args)
    def getID(self): return _pybw_swig.BulletType_getID(self)
    def getName(self): return _pybw_swig.BulletType_getName(self)
    __swig_destroy__ = _pybw_swig.delete_BulletType
    __del__ = lambda self : None;
BulletType_swigregister = _pybw_swig.BulletType_swigregister
BulletType_swigregister(BulletType)


def getBulletType(*args):
  return _pybw_swig.getBulletType(*args)
getBulletType = _pybw_swig.getBulletType

def allBulletTypes():
  return _pybw_swig.allBulletTypes()
allBulletTypes = _pybw_swig.allBulletTypes
class Color(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Color, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Color, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_Color(*args)
        try: self.this.append(this)
        except: self.this = this
    def getID(self): return _pybw_swig.Color_getID(self)
    def red(self): return _pybw_swig.Color_red(self)
    def green(self): return _pybw_swig.Color_green(self)
    def blue(self): return _pybw_swig.Color_blue(self)
    def __eq__(self, *args): return _pybw_swig.Color___eq__(self, *args)
    def __ne__(self, *args): return _pybw_swig.Color___ne__(self, *args)
    def __lt__(self, *args): return _pybw_swig.Color___lt__(self, *args)
    __swig_destroy__ = _pybw_swig.delete_Color
    __del__ = lambda self : None;
Color_swigregister = _pybw_swig.Color_swigregister
Color_swigregister(Color)
cvar = _pybw_swig.cvar
BulletTypes_Melee = cvar.BulletTypes_Melee
Fusion_Cutter_Hit = cvar.Fusion_Cutter_Hit
Gauss_Rifle_Hit = cvar.Gauss_Rifle_Hit
C_10_Canister_Rifle_Hit = cvar.C_10_Canister_Rifle_Hit
BulletTypes_Gemini_Missiles = cvar.BulletTypes_Gemini_Missiles
BulletTypes_Fragmentation_Grenade = cvar.BulletTypes_Fragmentation_Grenade
BulletTypes_Longbolt_Missile = cvar.BulletTypes_Longbolt_Missile
ATS_ATA_Laser_Battery = cvar.ATS_ATA_Laser_Battery
BulletTypes_Burst_Lasers = cvar.BulletTypes_Burst_Lasers
Arclite_Shock_Cannon_Hit = cvar.Arclite_Shock_Cannon_Hit
EMP_Missile = cvar.EMP_Missile
Dual_Photon_Blasters_Hit = cvar.Dual_Photon_Blasters_Hit
Particle_Beam_Hit = cvar.Particle_Beam_Hit
Anti_Matter_Missile = cvar.Anti_Matter_Missile
BulletTypes_Pulse_Cannon = cvar.BulletTypes_Pulse_Cannon
Psionic_Shockwave_Hit = cvar.Psionic_Shockwave_Hit
BulletTypes_Psionic_Storm = cvar.BulletTypes_Psionic_Storm
BulletTypes_Yamato_Gun = cvar.BulletTypes_Yamato_Gun
BulletTypes_Phase_Disruptor = cvar.BulletTypes_Phase_Disruptor
STA_STS_Cannon_Overlay = cvar.STA_STS_Cannon_Overlay
Sunken_Colony_Tentacle = cvar.Sunken_Colony_Tentacle
BulletTypes_Acid_Spore = cvar.BulletTypes_Acid_Spore
BulletTypes_Glave_Wurm = cvar.BulletTypes_Glave_Wurm
BulletTypes_Seeker_Spores = cvar.BulletTypes_Seeker_Spores
Queen_Spell_Carrier = cvar.Queen_Spell_Carrier
Plague_Cloud = cvar.Plague_Cloud
BulletTypes_Consume = cvar.BulletTypes_Consume
Needle_Spine_Hit = cvar.Needle_Spine_Hit
Invisible = cvar.Invisible
Optical_Flare_Grenade = cvar.Optical_Flare_Grenade
BulletTypes_Halo_Rockets = cvar.BulletTypes_Halo_Rockets
BulletTypes_Subterranean_Spines = cvar.BulletTypes_Subterranean_Spines
Corrosive_Acid_Shot = cvar.Corrosive_Acid_Shot
BulletTypes_Neutron_Flare = cvar.BulletTypes_Neutron_Flare
BulletTypes_None = cvar.BulletTypes_None
BulletTypes_Unknown = cvar.BulletTypes_Unknown

TILE_SIZE = _pybw_swig.TILE_SIZE
PYLON_X_RADIUS = _pybw_swig.PYLON_X_RADIUS
PYLON_Y_RADIUS = _pybw_swig.PYLON_Y_RADIUS
Screen = _pybw_swig.Screen
Map = _pybw_swig.Map
Mouse = _pybw_swig.Mouse
class DamageType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DamageType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DamageType, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_DamageType(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _pybw_swig.DamageType___eq__(self, *args)
    def __ne__(self, *args): return _pybw_swig.DamageType___ne__(self, *args)
    def __lt__(self, *args): return _pybw_swig.DamageType___lt__(self, *args)
    def getID(self): return _pybw_swig.DamageType_getID(self)
    def getName(self): return _pybw_swig.DamageType_getName(self)
    __swig_destroy__ = _pybw_swig.delete_DamageType
    __del__ = lambda self : None;
DamageType_swigregister = _pybw_swig.DamageType_swigregister
DamageType_swigregister(DamageType)
Red = cvar.Red
Blue = cvar.Blue
Teal = cvar.Teal
Purple = cvar.Purple
Orange = cvar.Orange
Brown = cvar.Brown
White = cvar.White
Yellow = cvar.Yellow
Green = cvar.Green
Cyan = cvar.Cyan
Black = cvar.Black
Grey = cvar.Grey


def getDamageType(*args):
  return _pybw_swig.getDamageType(*args)
getDamageType = _pybw_swig.getDamageType

def allDamageTypes():
  return _pybw_swig.allDamageTypes()
allDamageTypes = _pybw_swig.allDamageTypes
class Error(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Error, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Error, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_Error(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _pybw_swig.Error___eq__(self, *args)
    def __ne__(self, *args): return _pybw_swig.Error___ne__(self, *args)
    def __lt__(self, *args): return _pybw_swig.Error___lt__(self, *args)
    def getID(self): return _pybw_swig.Error_getID(self)
    def toString(self): return _pybw_swig.Error_toString(self)
    __swig_destroy__ = _pybw_swig.delete_Error
    __del__ = lambda self : None;
Error_swigregister = _pybw_swig.Error_swigregister
Error_swigregister(Error)
DamageTypes_Independent = cvar.DamageTypes_Independent
Explosive = cvar.Explosive
Concussive = cvar.Concussive
DamageTypes_Normal = cvar.DamageTypes_Normal
Ignore_Armor = cvar.Ignore_Armor
DamageTypes_None = cvar.DamageTypes_None
DamageTypes_Unknown = cvar.DamageTypes_Unknown


def getError(*args):
  return _pybw_swig.getError(*args)
getError = _pybw_swig.getError

def allErrors():
  return _pybw_swig.allErrors()
allErrors = _pybw_swig.allErrors
class Event(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Event, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pybw_swig.new_Event()
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _pybw_swig.Event___eq__(self, *args)
    __swig_getmethods__["MatchStart"] = lambda x: _pybw_swig.Event_MatchStart
    if _newclass:MatchStart = staticmethod(_pybw_swig.Event_MatchStart)
    __swig_getmethods__["MatchEnd"] = lambda x: _pybw_swig.Event_MatchEnd
    if _newclass:MatchEnd = staticmethod(_pybw_swig.Event_MatchEnd)
    __swig_getmethods__["MatchFrame"] = lambda x: _pybw_swig.Event_MatchFrame
    if _newclass:MatchFrame = staticmethod(_pybw_swig.Event_MatchFrame)
    __swig_getmethods__["MenuFrame"] = lambda x: _pybw_swig.Event_MenuFrame
    if _newclass:MenuFrame = staticmethod(_pybw_swig.Event_MenuFrame)
    __swig_getmethods__["SendText"] = lambda x: _pybw_swig.Event_SendText
    if _newclass:SendText = staticmethod(_pybw_swig.Event_SendText)
    __swig_getmethods__["ReceiveText"] = lambda x: _pybw_swig.Event_ReceiveText
    if _newclass:ReceiveText = staticmethod(_pybw_swig.Event_ReceiveText)
    __swig_getmethods__["PlayerLeft"] = lambda x: _pybw_swig.Event_PlayerLeft
    if _newclass:PlayerLeft = staticmethod(_pybw_swig.Event_PlayerLeft)
    __swig_getmethods__["NukeDetect"] = lambda x: _pybw_swig.Event_NukeDetect
    if _newclass:NukeDetect = staticmethod(_pybw_swig.Event_NukeDetect)
    __swig_getmethods__["UnitDiscover"] = lambda x: _pybw_swig.Event_UnitDiscover
    if _newclass:UnitDiscover = staticmethod(_pybw_swig.Event_UnitDiscover)
    __swig_getmethods__["UnitEvade"] = lambda x: _pybw_swig.Event_UnitEvade
    if _newclass:UnitEvade = staticmethod(_pybw_swig.Event_UnitEvade)
    __swig_getmethods__["UnitShow"] = lambda x: _pybw_swig.Event_UnitShow
    if _newclass:UnitShow = staticmethod(_pybw_swig.Event_UnitShow)
    __swig_getmethods__["UnitHide"] = lambda x: _pybw_swig.Event_UnitHide
    if _newclass:UnitHide = staticmethod(_pybw_swig.Event_UnitHide)
    __swig_getmethods__["UnitCreate"] = lambda x: _pybw_swig.Event_UnitCreate
    if _newclass:UnitCreate = staticmethod(_pybw_swig.Event_UnitCreate)
    __swig_getmethods__["UnitDestroy"] = lambda x: _pybw_swig.Event_UnitDestroy
    if _newclass:UnitDestroy = staticmethod(_pybw_swig.Event_UnitDestroy)
    __swig_getmethods__["UnitMorph"] = lambda x: _pybw_swig.Event_UnitMorph
    if _newclass:UnitMorph = staticmethod(_pybw_swig.Event_UnitMorph)
    __swig_getmethods__["UnitRenegade"] = lambda x: _pybw_swig.Event_UnitRenegade
    if _newclass:UnitRenegade = staticmethod(_pybw_swig.Event_UnitRenegade)
    __swig_getmethods__["SaveGame"] = lambda x: _pybw_swig.Event_SaveGame
    if _newclass:SaveGame = staticmethod(_pybw_swig.Event_SaveGame)
    __swig_setmethods__["type"] = _pybw_swig.Event_type_set
    __swig_getmethods__["type"] = _pybw_swig.Event_type_get
    if _newclass:type = _swig_property(_pybw_swig.Event_type_get, _pybw_swig.Event_type_set)
    __swig_setmethods__["position"] = _pybw_swig.Event_position_set
    __swig_getmethods__["position"] = _pybw_swig.Event_position_get
    if _newclass:position = _swig_property(_pybw_swig.Event_position_get, _pybw_swig.Event_position_set)
    __swig_setmethods__["text"] = _pybw_swig.Event_text_set
    __swig_getmethods__["text"] = _pybw_swig.Event_text_get
    if _newclass:text = _swig_property(_pybw_swig.Event_text_get, _pybw_swig.Event_text_set)
    __swig_setmethods__["unit"] = _pybw_swig.Event_unit_set
    __swig_getmethods__["unit"] = _pybw_swig.Event_unit_get
    if _newclass:unit = _swig_property(_pybw_swig.Event_unit_get, _pybw_swig.Event_unit_set)
    __swig_setmethods__["player"] = _pybw_swig.Event_player_set
    __swig_getmethods__["player"] = _pybw_swig.Event_player_get
    if _newclass:player = _swig_property(_pybw_swig.Event_player_get, _pybw_swig.Event_player_set)
    __swig_setmethods__["isWinner"] = _pybw_swig.Event_isWinner_set
    __swig_getmethods__["isWinner"] = _pybw_swig.Event_isWinner_get
    if _newclass:isWinner = _swig_property(_pybw_swig.Event_isWinner_get, _pybw_swig.Event_isWinner_set)
    __swig_destroy__ = _pybw_swig.delete_Event
    __del__ = lambda self : None;
Event_swigregister = _pybw_swig.Event_swigregister
Event_swigregister(Event)
Unit_Does_Not_Exist = cvar.Unit_Does_Not_Exist
Unit_Not_Visible = cvar.Unit_Not_Visible
Unit_Not_Owned = cvar.Unit_Not_Owned
Unit_Busy = cvar.Unit_Busy
Incompatible_UnitType = cvar.Incompatible_UnitType
Incompatible_TechType = cvar.Incompatible_TechType
Incompatible_State = cvar.Incompatible_State
Already_Researched = cvar.Already_Researched
Fully_Upgraded = cvar.Fully_Upgraded
Currently_Researching = cvar.Currently_Researching
Currently_Upgrading = cvar.Currently_Upgrading
Insufficient_Minerals = cvar.Insufficient_Minerals
Insufficient_Gas = cvar.Insufficient_Gas
Insufficient_Supply = cvar.Insufficient_Supply
Insufficient_Energy = cvar.Insufficient_Energy
Insufficient_Tech = cvar.Insufficient_Tech
Insufficient_Ammo = cvar.Insufficient_Ammo
Insufficient_Space = cvar.Insufficient_Space
Invalid_Tile_Position = cvar.Invalid_Tile_Position
Unbuildable_Location = cvar.Unbuildable_Location
Unreachable_Location = cvar.Unreachable_Location
Out_Of_Range = cvar.Out_Of_Range
Unable_To_Hit = cvar.Unable_To_Hit
Access_Denied = cvar.Access_Denied
Errors_None = cvar.Errors_None
Errors_Unknown = cvar.Errors_Unknown

def Event_MatchStart():
  return _pybw_swig.Event_MatchStart()
Event_MatchStart = _pybw_swig.Event_MatchStart

def Event_MatchEnd(*args):
  return _pybw_swig.Event_MatchEnd(*args)
Event_MatchEnd = _pybw_swig.Event_MatchEnd

def Event_MatchFrame():
  return _pybw_swig.Event_MatchFrame()
Event_MatchFrame = _pybw_swig.Event_MatchFrame

def Event_MenuFrame():
  return _pybw_swig.Event_MenuFrame()
Event_MenuFrame = _pybw_swig.Event_MenuFrame

def Event_SendText(*args):
  return _pybw_swig.Event_SendText(*args)
Event_SendText = _pybw_swig.Event_SendText

def Event_ReceiveText(*args):
  return _pybw_swig.Event_ReceiveText(*args)
Event_ReceiveText = _pybw_swig.Event_ReceiveText

def Event_PlayerLeft(*args):
  return _pybw_swig.Event_PlayerLeft(*args)
Event_PlayerLeft = _pybw_swig.Event_PlayerLeft

def Event_NukeDetect(*args):
  return _pybw_swig.Event_NukeDetect(*args)
Event_NukeDetect = _pybw_swig.Event_NukeDetect

def Event_UnitDiscover(*args):
  return _pybw_swig.Event_UnitDiscover(*args)
Event_UnitDiscover = _pybw_swig.Event_UnitDiscover

def Event_UnitEvade(*args):
  return _pybw_swig.Event_UnitEvade(*args)
Event_UnitEvade = _pybw_swig.Event_UnitEvade

def Event_UnitShow(*args):
  return _pybw_swig.Event_UnitShow(*args)
Event_UnitShow = _pybw_swig.Event_UnitShow

def Event_UnitHide(*args):
  return _pybw_swig.Event_UnitHide(*args)
Event_UnitHide = _pybw_swig.Event_UnitHide

def Event_UnitCreate(*args):
  return _pybw_swig.Event_UnitCreate(*args)
Event_UnitCreate = _pybw_swig.Event_UnitCreate

def Event_UnitDestroy(*args):
  return _pybw_swig.Event_UnitDestroy(*args)
Event_UnitDestroy = _pybw_swig.Event_UnitDestroy

def Event_UnitMorph(*args):
  return _pybw_swig.Event_UnitMorph(*args)
Event_UnitMorph = _pybw_swig.Event_UnitMorph

def Event_UnitRenegade(*args):
  return _pybw_swig.Event_UnitRenegade(*args)
Event_UnitRenegade = _pybw_swig.Event_UnitRenegade

def Event_SaveGame(*args):
  return _pybw_swig.Event_SaveGame(*args)
Event_SaveGame = _pybw_swig.Event_SaveGame

EventTypes_MatchStart = _pybw_swig.EventTypes_MatchStart
EventTypes_MatchEnd = _pybw_swig.EventTypes_MatchEnd
EventTypes_MatchFrame = _pybw_swig.EventTypes_MatchFrame
EventTypes_MenuFrame = _pybw_swig.EventTypes_MenuFrame
EventTypes_SendText = _pybw_swig.EventTypes_SendText
EventTypes_ReceiveText = _pybw_swig.EventTypes_ReceiveText
EventTypes_PlayerLeft = _pybw_swig.EventTypes_PlayerLeft
EventTypes_NukeDetect = _pybw_swig.EventTypes_NukeDetect
EventTypes_UnitDiscover = _pybw_swig.EventTypes_UnitDiscover
EventTypes_UnitEvade = _pybw_swig.EventTypes_UnitEvade
EventTypes_UnitShow = _pybw_swig.EventTypes_UnitShow
EventTypes_UnitHide = _pybw_swig.EventTypes_UnitHide
EventTypes_UnitCreate = _pybw_swig.EventTypes_UnitCreate
EventTypes_UnitDestroy = _pybw_swig.EventTypes_UnitDestroy
EventTypes_UnitMorph = _pybw_swig.EventTypes_UnitMorph
EventTypes_UnitRenegade = _pybw_swig.EventTypes_UnitRenegade
EventTypes_SaveGame = _pybw_swig.EventTypes_SaveGame
EventTypes_None = _pybw_swig.EventTypes_None
class ExplosionType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExplosionType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExplosionType, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_ExplosionType(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _pybw_swig.ExplosionType___eq__(self, *args)
    def __ne__(self, *args): return _pybw_swig.ExplosionType___ne__(self, *args)
    def __lt__(self, *args): return _pybw_swig.ExplosionType___lt__(self, *args)
    def getID(self): return _pybw_swig.ExplosionType_getID(self)
    def getName(self): return _pybw_swig.ExplosionType_getName(self)
    __swig_destroy__ = _pybw_swig.delete_ExplosionType
    __del__ = lambda self : None;
ExplosionType_swigregister = _pybw_swig.ExplosionType_swigregister
ExplosionType_swigregister(ExplosionType)


def getExplosionType(*args):
  return _pybw_swig.getExplosionType(*args)
getExplosionType = _pybw_swig.getExplosionType

def allExplosionTypes():
  return _pybw_swig.allExplosionTypes()
allExplosionTypes = _pybw_swig.allExplosionTypes
CompleteMapInformation = _pybw_swig.CompleteMapInformation
UserInput = _pybw_swig.UserInput
Max = _pybw_swig.Max
class Force(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Force, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Force, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getID(self): return _pybw_swig.Force_getID(self)
    def getName(self): return _pybw_swig.Force_getName(self)
    def getPlayers(self): return _pybw_swig.Force_getPlayers(self)
    __swig_destroy__ = _pybw_swig.delete_Force
    __del__ = lambda self : None;
Force_swigregister = _pybw_swig.Force_swigregister
Force_swigregister(Force)
ExplosionTypes_None = cvar.ExplosionTypes_None
ExplosionTypes_Normal = cvar.ExplosionTypes_Normal
Radial_Splash = cvar.Radial_Splash
Enemy_Splash = cvar.Enemy_Splash
ExplosionTypes_Lockdown = cvar.ExplosionTypes_Lockdown
Nuclear_Missile = cvar.Nuclear_Missile
ExplosionTypes_Parasite = cvar.ExplosionTypes_Parasite
Broodlings = cvar.Broodlings
ExplosionTypes_EMP_Shockwave = cvar.ExplosionTypes_EMP_Shockwave
ExplosionTypes_Irradiate = cvar.ExplosionTypes_Irradiate
ExplosionTypes_Ensnare = cvar.ExplosionTypes_Ensnare
ExplosionTypes_Plague = cvar.ExplosionTypes_Plague
ExplosionTypes_Stasis_Field = cvar.ExplosionTypes_Stasis_Field
ExplosionTypes_Dark_Swarm = cvar.ExplosionTypes_Dark_Swarm
ExplosionTypes_Consume = cvar.ExplosionTypes_Consume
ExplosionTypes_Yamato_Gun = cvar.ExplosionTypes_Yamato_Gun
ExplosionTypes_Restoration = cvar.ExplosionTypes_Restoration
ExplosionTypes_Disruption_Web = cvar.ExplosionTypes_Disruption_Web
ExplosionTypes_Corrosive_Acid = cvar.ExplosionTypes_Corrosive_Acid
ExplosionTypes_Mind_Control = cvar.ExplosionTypes_Mind_Control
ExplosionTypes_Feedback = cvar.ExplosionTypes_Feedback
ExplosionTypes_Optical_Flare = cvar.ExplosionTypes_Optical_Flare
ExplosionTypes_Maelstrom = cvar.ExplosionTypes_Maelstrom
Air_Splash = cvar.Air_Splash
ExplosionTypes_Unknown = cvar.ExplosionTypes_Unknown

class Game(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Game, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Game, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getBullets(self): return _pybw_swig.Game_getBullets(self)
    def getNukeDots(self): return _pybw_swig.Game_getNukeDots(self)
    def getEvents(self): return _pybw_swig.Game_getEvents(self)
    def getForce(self, *args): return _pybw_swig.Game_getForce(self, *args)
    def getPlayer(self, *args): return _pybw_swig.Game_getPlayer(self, *args)
    def getUnit(self, *args): return _pybw_swig.Game_getUnit(self, *args)
    def indexToUnit(self, *args): return _pybw_swig.Game_indexToUnit(self, *args)
    def getGameType(self): return _pybw_swig.Game_getGameType(self)
    def getLatency(self): return _pybw_swig.Game_getLatency(self)
    def getFrameCount(self): return _pybw_swig.Game_getFrameCount(self)
    def getFPS(self): return _pybw_swig.Game_getFPS(self)
    def getAverageFPS(self): return _pybw_swig.Game_getAverageFPS(self)
    def getMousePosition(self): return _pybw_swig.Game_getMousePosition(self)
    def getMouseState(self, *args): return _pybw_swig.Game_getMouseState(self, *args)
    def getKeyState(self, *args): return _pybw_swig.Game_getKeyState(self, *args)
    def getScreenPosition(self): return _pybw_swig.Game_getScreenPosition(self)
    def setScreenPosition(self, *args): return _pybw_swig.Game_setScreenPosition(self, *args)
    def pingMinimap(self, *args): return _pybw_swig.Game_pingMinimap(self, *args)
    def isFlagEnabled(self, *args): return _pybw_swig.Game_isFlagEnabled(self, *args)
    def enableFlag(self, *args): return _pybw_swig.Game_enableFlag(self, *args)
    def getLastError(self): return _pybw_swig.Game_getLastError(self)
    def setLastError(self, *args): return _pybw_swig.Game_setLastError(self, *args)
    def mapWidth(self): return _pybw_swig.Game_mapWidth(self)
    def mapHeight(self): return _pybw_swig.Game_mapHeight(self)
    def mapFileName(self): return _pybw_swig.Game_mapFileName(self)
    def mapPathName(self): return _pybw_swig.Game_mapPathName(self)
    def mapName(self): return _pybw_swig.Game_mapName(self)
    def mapHash(self): return _pybw_swig.Game_mapHash(self)
    def isWalkable(self, *args): return _pybw_swig.Game_isWalkable(self, *args)
    def getGroundHeight(self, *args): return _pybw_swig.Game_getGroundHeight(self, *args)
    def isBuildable(self, *args): return _pybw_swig.Game_isBuildable(self, *args)
    def isVisible(self, *args): return _pybw_swig.Game_isVisible(self, *args)
    def isExplored(self, *args): return _pybw_swig.Game_isExplored(self, *args)
    def hasCreep(self, *args): return _pybw_swig.Game_hasCreep(self, *args)
    def hasPower(self, *args): return _pybw_swig.Game_hasPower(self, *args)
    def canMake(self, *args): return _pybw_swig.Game_canMake(self, *args)
    def canResearch(self, *args): return _pybw_swig.Game_canResearch(self, *args)
    def canUpgrade(self, *args): return _pybw_swig.Game_canUpgrade(self, *args)
    def printf(self, *args): return _pybw_swig.Game_printf(self, *args)
    def sendText(self, *args): return _pybw_swig.Game_sendText(self, *args)
    def sendTextEx(self, *args): return _pybw_swig.Game_sendTextEx(self, *args)
    def changeRace(self, *args): return _pybw_swig.Game_changeRace(self, *args)
    def isInGame(self): return _pybw_swig.Game_isInGame(self)
    def isMultiplayer(self): return _pybw_swig.Game_isMultiplayer(self)
    def isBattleNet(self): return _pybw_swig.Game_isBattleNet(self)
    def isPaused(self): return _pybw_swig.Game_isPaused(self)
    def isReplay(self): return _pybw_swig.Game_isReplay(self)
    def startGame(self): return _pybw_swig.Game_startGame(self)
    def pauseGame(self): return _pybw_swig.Game_pauseGame(self)
    def resumeGame(self): return _pybw_swig.Game_resumeGame(self)
    def leaveGame(self): return _pybw_swig.Game_leaveGame(self)
    def restartGame(self): return _pybw_swig.Game_restartGame(self)
    def setLocalSpeed(self, *args): return _pybw_swig.Game_setLocalSpeed(self, *args)
    def issueCommand(self, *args): return _pybw_swig.Game_issueCommand(self, *args)
    def self(self): return _pybw_swig.Game_self(self)
    def enemy(self): return _pybw_swig.Game_enemy(self)
    def setTextSize(self, size = 1): return _pybw_swig.Game_setTextSize(self, size)
    def drawText(self, *args): return _pybw_swig.Game_drawText(self, *args)
    def drawTextMap(self, *args): return _pybw_swig.Game_drawTextMap(self, *args)
    def drawTextMouse(self, *args): return _pybw_swig.Game_drawTextMouse(self, *args)
    def drawTextScreen(self, *args): return _pybw_swig.Game_drawTextScreen(self, *args)
    def drawBox(self, *args): return _pybw_swig.Game_drawBox(self, *args)
    def drawBoxMap(self, *args): return _pybw_swig.Game_drawBoxMap(self, *args)
    def drawBoxMouse(self, *args): return _pybw_swig.Game_drawBoxMouse(self, *args)
    def drawBoxScreen(self, *args): return _pybw_swig.Game_drawBoxScreen(self, *args)
    def drawTriangle(self, *args): return _pybw_swig.Game_drawTriangle(self, *args)
    def drawTriangleMap(self, *args): return _pybw_swig.Game_drawTriangleMap(self, *args)
    def drawTriangleMouse(self, *args): return _pybw_swig.Game_drawTriangleMouse(self, *args)
    def drawTriangleScreen(self, *args): return _pybw_swig.Game_drawTriangleScreen(self, *args)
    def drawCircle(self, *args): return _pybw_swig.Game_drawCircle(self, *args)
    def drawCircleMap(self, *args): return _pybw_swig.Game_drawCircleMap(self, *args)
    def drawCircleMouse(self, *args): return _pybw_swig.Game_drawCircleMouse(self, *args)
    def drawCircleScreen(self, *args): return _pybw_swig.Game_drawCircleScreen(self, *args)
    def drawEllipse(self, *args): return _pybw_swig.Game_drawEllipse(self, *args)
    def drawEllipseMap(self, *args): return _pybw_swig.Game_drawEllipseMap(self, *args)
    def drawEllipseMouse(self, *args): return _pybw_swig.Game_drawEllipseMouse(self, *args)
    def drawEllipseScreen(self, *args): return _pybw_swig.Game_drawEllipseScreen(self, *args)
    def drawDot(self, *args): return _pybw_swig.Game_drawDot(self, *args)
    def drawDotMap(self, *args): return _pybw_swig.Game_drawDotMap(self, *args)
    def drawDotMouse(self, *args): return _pybw_swig.Game_drawDotMouse(self, *args)
    def drawDotScreen(self, *args): return _pybw_swig.Game_drawDotScreen(self, *args)
    def drawLine(self, *args): return _pybw_swig.Game_drawLine(self, *args)
    def drawLineMap(self, *args): return _pybw_swig.Game_drawLineMap(self, *args)
    def drawLineMouse(self, *args): return _pybw_swig.Game_drawLineMouse(self, *args)
    def drawLineScreen(self, *args): return _pybw_swig.Game_drawLineScreen(self, *args)
    def getScreenBuffer(self): return _pybw_swig.Game_getScreenBuffer(self)
    def getLatencyFrames(self): return _pybw_swig.Game_getLatencyFrames(self)
    def getLatencyTime(self): return _pybw_swig.Game_getLatencyTime(self)
    def getRemainingLatencyFrames(self): return _pybw_swig.Game_getRemainingLatencyFrames(self)
    def getRemainingLatencyTime(self): return _pybw_swig.Game_getRemainingLatencyTime(self)
    def getRevision(self): return _pybw_swig.Game_getRevision(self)
    def isDebug(self): return _pybw_swig.Game_isDebug(self)
    def isLatComEnabled(self): return _pybw_swig.Game_isLatComEnabled(self)
    def setLatCom(self, *args): return _pybw_swig.Game_setLatCom(self, *args)
    def getReplayFrameCount(self): return _pybw_swig.Game_getReplayFrameCount(self)
    def setGUI(self, enabled = True): return _pybw_swig.Game_setGUI(self, enabled)
    def getInstanceNumber(self): return _pybw_swig.Game_getInstanceNumber(self)
    def getAllUnits(self): return _pybw_swig.Game_getAllUnits(self)
    def getMinerals(self): return _pybw_swig.Game_getMinerals(self)
    def getGeysers(self): return _pybw_swig.Game_getGeysers(self)
    def getNeutralUnits(self): return _pybw_swig.Game_getNeutralUnits(self)
    def getStaticMinerals(self): return _pybw_swig.Game_getStaticMinerals(self)
    def getStaticGeysers(self): return _pybw_swig.Game_getStaticGeysers(self)
    def getStaticNeutralUnits(self): return _pybw_swig.Game_getStaticNeutralUnits(self)
    def getSelectedUnits(self): return _pybw_swig.Game_getSelectedUnits(self)
    def getPlayers(self): return _pybw_swig.Game_getPlayers(self)
    def getForces(self): return _pybw_swig.Game_getForces(self)
    def unitsOnTile(self, *args): return _pybw_swig.Game_unitsOnTile(self, *args)
    def getStartLocations(self): return _pybw_swig.Game_getStartLocations(self)
    def canBuildHere(self, *args): return _pybw_swig.Game_canBuildHere(self, *args)
    __swig_destroy__ = _pybw_swig.delete_Game
    __del__ = lambda self : None;
Game_swigregister = _pybw_swig.Game_swigregister
Game_swigregister(Game)

class GameType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GameType, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_GameType(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _pybw_swig.GameType___eq__(self, *args)
    def __ne__(self, *args): return _pybw_swig.GameType___ne__(self, *args)
    def __lt__(self, *args): return _pybw_swig.GameType___lt__(self, *args)
    def getID(self): return _pybw_swig.GameType_getID(self)
    def getName(self): return _pybw_swig.GameType_getName(self)
    __swig_destroy__ = _pybw_swig.delete_GameType
    __del__ = lambda self : None;
GameType_swigregister = _pybw_swig.GameType_swigregister
GameType_swigregister(GameType)


def getGameType(*args):
  return _pybw_swig.getGameType(*args)
getGameType = _pybw_swig.getGameType

def allGameTypes():
  return _pybw_swig.allGameTypes()
allGameTypes = _pybw_swig.allGameTypes
M_LEFT = _pybw_swig.M_LEFT
M_RIGHT = _pybw_swig.M_RIGHT
M_MIDDLE = _pybw_swig.M_MIDDLE
K_LBUTTON = _pybw_swig.K_LBUTTON
K_RBUTTON = _pybw_swig.K_RBUTTON
K_CANCEL = _pybw_swig.K_CANCEL
K_MBUTTON = _pybw_swig.K_MBUTTON
K_XBUTTON1 = _pybw_swig.K_XBUTTON1
K_XBUTTON2 = _pybw_swig.K_XBUTTON2
K_BACK = _pybw_swig.K_BACK
K_TAB = _pybw_swig.K_TAB
K_CLEAR = _pybw_swig.K_CLEAR
K_RETURN = _pybw_swig.K_RETURN
K_SHIFT = _pybw_swig.K_SHIFT
K_CONTROL = _pybw_swig.K_CONTROL
K_MENU = _pybw_swig.K_MENU
K_PAUSE = _pybw_swig.K_PAUSE
K_CAPITAL = _pybw_swig.K_CAPITAL
K_KANA = _pybw_swig.K_KANA
K_HANGEUL = _pybw_swig.K_HANGEUL
K_HANGUL = _pybw_swig.K_HANGUL
K_JUNJA = _pybw_swig.K_JUNJA
K_FINAL = _pybw_swig.K_FINAL
K_HANJA = _pybw_swig.K_HANJA
K_KANJI = _pybw_swig.K_KANJI
K_ESCAPE = _pybw_swig.K_ESCAPE
K_CONVERT = _pybw_swig.K_CONVERT
K_NONCONVERT = _pybw_swig.K_NONCONVERT
K_ACCEPT = _pybw_swig.K_ACCEPT
K_MODECHANGE = _pybw_swig.K_MODECHANGE
K_SPACE = _pybw_swig.K_SPACE
K_PRIOR = _pybw_swig.K_PRIOR
K_NEXT = _pybw_swig.K_NEXT
K_END = _pybw_swig.K_END
K_HOME = _pybw_swig.K_HOME
K_LEFT = _pybw_swig.K_LEFT
K_UP = _pybw_swig.K_UP
K_RIGHT = _pybw_swig.K_RIGHT
K_DOWN = _pybw_swig.K_DOWN
K_SELECT = _pybw_swig.K_SELECT
K_PRINT = _pybw_swig.K_PRINT
K_EXECUTE = _pybw_swig.K_EXECUTE
K_SNAPSHOT = _pybw_swig.K_SNAPSHOT
K_INSERT = _pybw_swig.K_INSERT
K_DELETE = _pybw_swig.K_DELETE
K_HELP = _pybw_swig.K_HELP
K_0 = _pybw_swig.K_0
K_1 = _pybw_swig.K_1
K_2 = _pybw_swig.K_2
K_3 = _pybw_swig.K_3
K_4 = _pybw_swig.K_4
K_5 = _pybw_swig.K_5
K_6 = _pybw_swig.K_6
K_7 = _pybw_swig.K_7
K_8 = _pybw_swig.K_8
K_9 = _pybw_swig.K_9
K_A = _pybw_swig.K_A
K_B = _pybw_swig.K_B
K_C = _pybw_swig.K_C
K_D = _pybw_swig.K_D
K_E = _pybw_swig.K_E
K_F = _pybw_swig.K_F
K_G = _pybw_swig.K_G
K_H = _pybw_swig.K_H
K_I = _pybw_swig.K_I
K_J = _pybw_swig.K_J
K_K = _pybw_swig.K_K
K_L = _pybw_swig.K_L
K_M = _pybw_swig.K_M
K_N = _pybw_swig.K_N
K_O = _pybw_swig.K_O
K_P = _pybw_swig.K_P
K_Q = _pybw_swig.K_Q
K_R = _pybw_swig.K_R
K_S = _pybw_swig.K_S
K_T = _pybw_swig.K_T
K_U = _pybw_swig.K_U
K_V = _pybw_swig.K_V
K_W = _pybw_swig.K_W
K_X = _pybw_swig.K_X
K_Y = _pybw_swig.K_Y
K_Z = _pybw_swig.K_Z
K_LWIN = _pybw_swig.K_LWIN
K_RWIN = _pybw_swig.K_RWIN
K_APPS = _pybw_swig.K_APPS
K_SLEEP = _pybw_swig.K_SLEEP
K_NUMPAD0 = _pybw_swig.K_NUMPAD0
K_NUMPAD1 = _pybw_swig.K_NUMPAD1
K_NUMPAD2 = _pybw_swig.K_NUMPAD2
K_NUMPAD3 = _pybw_swig.K_NUMPAD3
K_NUMPAD4 = _pybw_swig.K_NUMPAD4
K_NUMPAD5 = _pybw_swig.K_NUMPAD5
K_NUMPAD6 = _pybw_swig.K_NUMPAD6
K_NUMPAD7 = _pybw_swig.K_NUMPAD7
K_NUMPAD8 = _pybw_swig.K_NUMPAD8
K_NUMPAD9 = _pybw_swig.K_NUMPAD9
K_MULTIPLY = _pybw_swig.K_MULTIPLY
K_ADD = _pybw_swig.K_ADD
K_SEPARATOR = _pybw_swig.K_SEPARATOR
K_SUBTRACT = _pybw_swig.K_SUBTRACT
K_DECIMAL = _pybw_swig.K_DECIMAL
K_DIVIDE = _pybw_swig.K_DIVIDE
K_F1 = _pybw_swig.K_F1
K_F2 = _pybw_swig.K_F2
K_F3 = _pybw_swig.K_F3
K_F4 = _pybw_swig.K_F4
K_F5 = _pybw_swig.K_F5
K_F6 = _pybw_swig.K_F6
K_F7 = _pybw_swig.K_F7
K_F8 = _pybw_swig.K_F8
K_F9 = _pybw_swig.K_F9
K_F10 = _pybw_swig.K_F10
K_F11 = _pybw_swig.K_F11
K_F12 = _pybw_swig.K_F12
K_F13 = _pybw_swig.K_F13
K_F14 = _pybw_swig.K_F14
K_F15 = _pybw_swig.K_F15
K_F16 = _pybw_swig.K_F16
K_F17 = _pybw_swig.K_F17
K_F18 = _pybw_swig.K_F18
K_F19 = _pybw_swig.K_F19
K_F20 = _pybw_swig.K_F20
K_F21 = _pybw_swig.K_F21
K_F22 = _pybw_swig.K_F22
K_F23 = _pybw_swig.K_F23
K_F24 = _pybw_swig.K_F24
K_NUMLOCK = _pybw_swig.K_NUMLOCK
K_SCROLL = _pybw_swig.K_SCROLL
K_OEM_NEC_EQUAL = _pybw_swig.K_OEM_NEC_EQUAL
K_OEM_FJ_JISHO = _pybw_swig.K_OEM_FJ_JISHO
K_OEM_FJ_MASSHOU = _pybw_swig.K_OEM_FJ_MASSHOU
K_OEM_FJ_TOUROKU = _pybw_swig.K_OEM_FJ_TOUROKU
K_OEM_FJ_LOYA = _pybw_swig.K_OEM_FJ_LOYA
K_OEM_FJ_ROYA = _pybw_swig.K_OEM_FJ_ROYA
K_LSHIFT = _pybw_swig.K_LSHIFT
K_RSHIFT = _pybw_swig.K_RSHIFT
K_LCONTROL = _pybw_swig.K_LCONTROL
K_RCONTROL = _pybw_swig.K_RCONTROL
K_LMENU = _pybw_swig.K_LMENU
K_RMENU = _pybw_swig.K_RMENU
K_BROWSER_BACK = _pybw_swig.K_BROWSER_BACK
K_BROWSER_FORWARD = _pybw_swig.K_BROWSER_FORWARD
K_BROWSER_REFRESH = _pybw_swig.K_BROWSER_REFRESH
K_BROWSER_STOP = _pybw_swig.K_BROWSER_STOP
K_BROWSER_SEARCH = _pybw_swig.K_BROWSER_SEARCH
K_BROWSER_FAVORITES = _pybw_swig.K_BROWSER_FAVORITES
K_BROWSER_HOME = _pybw_swig.K_BROWSER_HOME
K_VOLUME_MUTE = _pybw_swig.K_VOLUME_MUTE
K_VOLUME_DOWN = _pybw_swig.K_VOLUME_DOWN
K_VOLUME_UP = _pybw_swig.K_VOLUME_UP
K_MEDIA_NEXT_TRACK = _pybw_swig.K_MEDIA_NEXT_TRACK
K_MEDIA_PREV_TRACK = _pybw_swig.K_MEDIA_PREV_TRACK
K_MEDIA_STOP = _pybw_swig.K_MEDIA_STOP
K_MEDIA_PLAY_PAUSE = _pybw_swig.K_MEDIA_PLAY_PAUSE
K_LAUNCH_MAIL = _pybw_swig.K_LAUNCH_MAIL
K_LAUNCH_MEDIA_SELECT = _pybw_swig.K_LAUNCH_MEDIA_SELECT
K_LAUNCH_APP1 = _pybw_swig.K_LAUNCH_APP1
K_LAUNCH_APP2 = _pybw_swig.K_LAUNCH_APP2
K_OEM_1 = _pybw_swig.K_OEM_1
K_OEM_PLUS = _pybw_swig.K_OEM_PLUS
K_OEM_COMMA = _pybw_swig.K_OEM_COMMA
K_OEM_MINUS = _pybw_swig.K_OEM_MINUS
K_OEM_PERIOD = _pybw_swig.K_OEM_PERIOD
K_OEM_2 = _pybw_swig.K_OEM_2
K_OEM_3 = _pybw_swig.K_OEM_3
K_OEM_4 = _pybw_swig.K_OEM_4
K_OEM_5 = _pybw_swig.K_OEM_5
K_OEM_6 = _pybw_swig.K_OEM_6
K_OEM_7 = _pybw_swig.K_OEM_7
K_OEM_8 = _pybw_swig.K_OEM_8
K_OEM_AX = _pybw_swig.K_OEM_AX
K_OEM_102 = _pybw_swig.K_OEM_102
K_ICO_HELP = _pybw_swig.K_ICO_HELP
K_ICO_00 = _pybw_swig.K_ICO_00
K_PROCESSKEY = _pybw_swig.K_PROCESSKEY
K_ICO_CLEAR = _pybw_swig.K_ICO_CLEAR
K_PACKET = _pybw_swig.K_PACKET
K_OEM_RESET = _pybw_swig.K_OEM_RESET
K_OEM_JUMP = _pybw_swig.K_OEM_JUMP
K_OEM_PA1 = _pybw_swig.K_OEM_PA1
K_OEM_PA2 = _pybw_swig.K_OEM_PA2
K_OEM_PA3 = _pybw_swig.K_OEM_PA3
K_OEM_WSCTRL = _pybw_swig.K_OEM_WSCTRL
K_OEM_CUSEL = _pybw_swig.K_OEM_CUSEL
K_OEM_ATTN = _pybw_swig.K_OEM_ATTN
K_OEM_FINISH = _pybw_swig.K_OEM_FINISH
K_OEM_COPY = _pybw_swig.K_OEM_COPY
K_OEM_AUTO = _pybw_swig.K_OEM_AUTO
K_OEM_ENLW = _pybw_swig.K_OEM_ENLW
K_OEM_BACKTAB = _pybw_swig.K_OEM_BACKTAB
K_ATTN = _pybw_swig.K_ATTN
K_CRSEL = _pybw_swig.K_CRSEL
K_EXSEL = _pybw_swig.K_EXSEL
K_EREOF = _pybw_swig.K_EREOF
K_PLAY = _pybw_swig.K_PLAY
K_ZOOM = _pybw_swig.K_ZOOM
K_NONAME = _pybw_swig.K_NONAME
K_PA1 = _pybw_swig.K_PA1
K_OEM_CLEAR = _pybw_swig.K_OEM_CLEAR
SinglePlayer = _pybw_swig.SinglePlayer
LanLow = _pybw_swig.LanLow
LanMedium = _pybw_swig.LanMedium
LanHigh = _pybw_swig.LanHigh
BattlenetLow = _pybw_swig.BattlenetLow
BattlenetMedium = _pybw_swig.BattlenetMedium
BattlenetHigh = _pybw_swig.BattlenetHigh
class Order(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Order, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Order, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_Order(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _pybw_swig.Order___eq__(self, *args)
    def __ne__(self, *args): return _pybw_swig.Order___ne__(self, *args)
    def __lt__(self, *args): return _pybw_swig.Order___lt__(self, *args)
    def getID(self): return _pybw_swig.Order_getID(self)
    def getName(self): return _pybw_swig.Order_getName(self)
    __swig_destroy__ = _pybw_swig.delete_Order
    __del__ = lambda self : None;
Order_swigregister = _pybw_swig.Order_swigregister
Order_swigregister(Order)
GameTypes_Melee = cvar.GameTypes_Melee
Free_For_All = cvar.Free_For_All
One_on_One = cvar.One_on_One
Capture_The_Flag = cvar.Capture_The_Flag
Greed = cvar.Greed
Slaughter = cvar.Slaughter
Sudden_Death = cvar.Sudden_Death
Ladder = cvar.Ladder
Use_Map_Settings = cvar.Use_Map_Settings
Team_Melee = cvar.Team_Melee
Team_Free_For_All = cvar.Team_Free_For_All
Team_Capture_The_Flag = cvar.Team_Capture_The_Flag
Top_vs_Bottom = cvar.Top_vs_Bottom
Pro_Gamer_League = cvar.Pro_Gamer_League
GameTypes_None = cvar.GameTypes_None
GameTypes_Unknown = cvar.GameTypes_Unknown


def getOrder(*args):
  return _pybw_swig.getOrder(*args)
getOrder = _pybw_swig.getOrder

def allOrders():
  return _pybw_swig.allOrders()
allOrders = _pybw_swig.allOrders
class Player(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Player, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Player, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getID(self): return _pybw_swig.Player_getID(self)
    def getName(self): return _pybw_swig.Player_getName(self)
    def getType(self): return _pybw_swig.Player_getType(self)
    def getForce(self): return _pybw_swig.Player_getForce(self)
    def isAlly(self, *args): return _pybw_swig.Player_isAlly(self, *args)
    def isEnemy(self, *args): return _pybw_swig.Player_isEnemy(self, *args)
    def isNeutral(self): return _pybw_swig.Player_isNeutral(self)
    def isVictorious(self): return _pybw_swig.Player_isVictorious(self)
    def isDefeated(self): return _pybw_swig.Player_isDefeated(self)
    def leftGame(self): return _pybw_swig.Player_leftGame(self)
    def minerals(self): return _pybw_swig.Player_minerals(self)
    def gas(self): return _pybw_swig.Player_gas(self)
    def cumulativeMinerals(self): return _pybw_swig.Player_cumulativeMinerals(self)
    def cumulativeGas(self): return _pybw_swig.Player_cumulativeGas(self)
    def supplyTotal(self, *args): return _pybw_swig.Player_supplyTotal(self, *args)
    def supplyUsed(self, *args): return _pybw_swig.Player_supplyUsed(self, *args)
    def allUnitCount(self, *args): return _pybw_swig.Player_allUnitCount(self, *args)
    def visibleUnitCount(self, *args): return _pybw_swig.Player_visibleUnitCount(self, *args)
    def completedUnitCount(self, *args): return _pybw_swig.Player_completedUnitCount(self, *args)
    def incompleteUnitCount(self, *args): return _pybw_swig.Player_incompleteUnitCount(self, *args)
    def deadUnitCount(self, *args): return _pybw_swig.Player_deadUnitCount(self, *args)
    def killedUnitCount(self, *args): return _pybw_swig.Player_killedUnitCount(self, *args)
    def getUpgradeLevel(self, *args): return _pybw_swig.Player_getUpgradeLevel(self, *args)
    def hasResearched(self, *args): return _pybw_swig.Player_hasResearched(self, *args)
    def isResearching(self, *args): return _pybw_swig.Player_isResearching(self, *args)
    def isUpgrading(self, *args): return _pybw_swig.Player_isUpgrading(self, *args)
    def getColor(self): return _pybw_swig.Player_getColor(self)
    def getTextColor(self): return _pybw_swig.Player_getTextColor(self)
    def maxEnergy(self, *args): return _pybw_swig.Player_maxEnergy(self, *args)
    def topSpeed(self, *args): return _pybw_swig.Player_topSpeed(self, *args)
    def groundWeaponMaxRange(self, *args): return _pybw_swig.Player_groundWeaponMaxRange(self, *args)
    def airWeaponMaxRange(self, *args): return _pybw_swig.Player_airWeaponMaxRange(self, *args)
    def sightRange(self, *args): return _pybw_swig.Player_sightRange(self, *args)
    def groundWeaponDamageCooldown(self, *args): return _pybw_swig.Player_groundWeaponDamageCooldown(self, *args)
    def armor(self, *args): return _pybw_swig.Player_armor(self, *args)
    def getUnits(self): return _pybw_swig.Player_getUnits(self)
    def getRace(self): return _pybw_swig.Player_getRace(self)
    def getStartLocation(self): return _pybw_swig.Player_getStartLocation(self)
    __swig_destroy__ = _pybw_swig.delete_Player
    __del__ = lambda self : None;
Player_swigregister = _pybw_swig.Player_swigregister
Player_swigregister(Player)
Die = cvar.Die
Orders_Stop = cvar.Orders_Stop
Guard = cvar.Guard
PlayerGuard = cvar.PlayerGuard
TurretGuard = cvar.TurretGuard
BunkerGuard = cvar.BunkerGuard
Orders_Move = cvar.Orders_Move
AttackUnit = cvar.AttackUnit
AttackTile = cvar.AttackTile
Hover = cvar.Hover
AttackMove = cvar.AttackMove
InfestedCommandCenter = cvar.InfestedCommandCenter
UnusedNothing = cvar.UnusedNothing
UnusedPowerup = cvar.UnusedPowerup
TowerGuard = cvar.TowerGuard
VultureMine = cvar.VultureMine
Nothing = cvar.Nothing
Nothing3 = cvar.Nothing3
CastInfestation = cvar.CastInfestation
InfestingCommandCenter = cvar.InfestingCommandCenter
PlaceBuilding = cvar.PlaceBuilding
BuildProtoss2 = cvar.BuildProtoss2
ConstructingBuilding = cvar.ConstructingBuilding
Orders_Repair = cvar.Orders_Repair
PlaceAddon = cvar.PlaceAddon
BuildAddon = cvar.BuildAddon
Orders_Train = cvar.Orders_Train
RallyPointUnit = cvar.RallyPointUnit
RallyPointTile = cvar.RallyPointTile
ZergBirth = cvar.ZergBirth
ZergUnitMorph = cvar.ZergUnitMorph
ZergBuildingMorph = cvar.ZergBuildingMorph
IncompleteBuilding = cvar.IncompleteBuilding
BuildNydusExit = cvar.BuildNydusExit
EnterNydusCanal = cvar.EnterNydusCanal
Orders_Follow = cvar.Orders_Follow
Carrier = cvar.Carrier
ReaverCarrierMove = cvar.ReaverCarrierMove
CarrierIgnore2 = cvar.CarrierIgnore2
Reaver = cvar.Reaver
TrainFighter = cvar.TrainFighter
InterceptorAttack = cvar.InterceptorAttack
ScarabAttack = cvar.ScarabAttack
RechargeShieldsUnit = cvar.RechargeShieldsUnit
RechargeShieldsBattery = cvar.RechargeShieldsBattery
ShieldBattery = cvar.ShieldBattery
InterceptorReturn = cvar.InterceptorReturn
BuildingLand = cvar.BuildingLand
BuildingLiftOff = cvar.BuildingLiftOff
DroneLiftOff = cvar.DroneLiftOff
LiftingOff = cvar.LiftingOff
ResearchTech = cvar.ResearchTech
Orders_Upgrade = cvar.Orders_Upgrade
Larva = cvar.Larva
SpawningLarva = cvar.SpawningLarva
Harvest1 = cvar.Harvest1
Harvest2 = cvar.Harvest2
MoveToGas = cvar.MoveToGas
WaitForGas = cvar.WaitForGas
HarvestGas = cvar.HarvestGas
ReturnGas = cvar.ReturnGas
MoveToMinerals = cvar.MoveToMinerals
WaitForMinerals = cvar.WaitForMinerals
MiningMinerals = cvar.MiningMinerals
Harvest3 = cvar.Harvest3
Harvest4 = cvar.Harvest4
ReturnMinerals = cvar.ReturnMinerals
Interrupted = cvar.Interrupted
EnterTransport = cvar.EnterTransport
PickupIdle = cvar.PickupIdle
PickupTransport = cvar.PickupTransport
PickupBunker = cvar.PickupBunker
Pickup4 = cvar.Pickup4
PowerupIdle = cvar.PowerupIdle
Sieging = cvar.Sieging
Unsieging = cvar.Unsieging
InitCreepGrowth = cvar.InitCreepGrowth
SpreadCreep = cvar.SpreadCreep
StoppingCreepGrowth = cvar.StoppingCreepGrowth
GuardianAspect = cvar.GuardianAspect
ArchonWarp = cvar.ArchonWarp
CompletingArchonsummon = cvar.CompletingArchonsummon
HoldPosition = cvar.HoldPosition
Orders_Cloak = cvar.Orders_Cloak
Orders_Decloak = cvar.Orders_Decloak
Orders_Unload = cvar.Orders_Unload
MoveUnload = cvar.MoveUnload
FireYamatoGun = cvar.FireYamatoGun
CastLockdown = cvar.CastLockdown
Orders_Burrowing = cvar.Orders_Burrowing
Burrowed = cvar.Burrowed
Unburrowing = cvar.Unburrowing
CastDarkSwarm = cvar.CastDarkSwarm
CastParasite = cvar.CastParasite
CastSpawnBroodlings = cvar.CastSpawnBroodlings
CastEMPShockwave = cvar.CastEMPShockwave
NukeWait = cvar.NukeWait
NukeTrain = cvar.NukeTrain
NukeLaunch = cvar.NukeLaunch
NukeUnit = cvar.NukeUnit
CastNuclearStrike = cvar.CastNuclearStrike
NukeTrack = cvar.NukeTrack
CloakNearbyUnits = cvar.CloakNearbyUnits
PlaceMine = cvar.PlaceMine
RightClickAction = cvar.RightClickAction
CastRecall = cvar.CastRecall
TeleporttoLocation = cvar.TeleporttoLocation
CastScannerSweep = cvar.CastScannerSweep
Scanner = cvar.Scanner
CastDefensiveMatrix = cvar.CastDefensiveMatrix
CastPsionicStorm = cvar.CastPsionicStorm
CastIrradiate = cvar.CastIrradiate
CastPlague = cvar.CastPlague
CastConsume = cvar.CastConsume
CastEnsnare = cvar.CastEnsnare
CastStasisField = cvar.CastStasisField
CastHallucination = cvar.CastHallucination
Hallucination2 = cvar.Hallucination2
ResetCollision = cvar.ResetCollision
Orders_Patrol = cvar.Orders_Patrol
CTFCOPInit = cvar.CTFCOPInit
CTFCOP1 = cvar.CTFCOP1
CTFCOP2 = cvar.CTFCOP2
ComputerAI = cvar.ComputerAI
AtkMoveEP = cvar.AtkMoveEP
HarassMove = cvar.HarassMove
AIPatrol = cvar.AIPatrol
GuardPost = cvar.GuardPost
Orders_RescuePassive = cvar.Orders_RescuePassive
Orders_Neutral = cvar.Orders_Neutral
ComputerReturn = cvar.ComputerReturn
SelfDestrucing = cvar.SelfDestrucing
Critter = cvar.Critter
HiddenGun = cvar.HiddenGun
OpenDoor = cvar.OpenDoor
CloseDoor = cvar.CloseDoor
HideTrap = cvar.HideTrap
RevealTrap = cvar.RevealTrap
Enabledoodad = cvar.Enabledoodad
Disabledoodad = cvar.Disabledoodad
Warpin = cvar.Warpin
Medic = cvar.Medic
MedicHeal1 = cvar.MedicHeal1
HealMove = cvar.HealMove
MedicHeal2 = cvar.MedicHeal2
CastRestoration = cvar.CastRestoration
CastDisruptionWeb = cvar.CastDisruptionWeb
CastMindControl = cvar.CastMindControl
DarkArchonMeld = cvar.DarkArchonMeld
CastFeedback = cvar.CastFeedback
CastOpticalFlare = cvar.CastOpticalFlare
CastMaelstrom = cvar.CastMaelstrom
JunkYardDog = cvar.JunkYardDog
Fatal = cvar.Fatal
Orders_None = cvar.Orders_None
Orders_Unknown = cvar.Orders_Unknown

class PlayerType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlayerType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PlayerType, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_PlayerType(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _pybw_swig.PlayerType___eq__(self, *args)
    def __ne__(self, *args): return _pybw_swig.PlayerType___ne__(self, *args)
    def __lt__(self, *args): return _pybw_swig.PlayerType___lt__(self, *args)
    def getID(self): return _pybw_swig.PlayerType_getID(self)
    def getName(self): return _pybw_swig.PlayerType_getName(self)
    __swig_destroy__ = _pybw_swig.delete_PlayerType
    __del__ = lambda self : None;
PlayerType_swigregister = _pybw_swig.PlayerType_swigregister
PlayerType_swigregister(PlayerType)


def getPlayerType(*args):
  return _pybw_swig.getPlayerType(*args)
getPlayerType = _pybw_swig.getPlayerType

def allPlayerTypes():
  return _pybw_swig.allPlayerTypes()
allPlayerTypes = _pybw_swig.allPlayerTypes
class Position(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Position, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Position, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_Position(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _pybw_swig.Position___eq__(self, *args)
    def __ne__(self, *args): return _pybw_swig.Position___ne__(self, *args)
    def __lt__(self, *args): return _pybw_swig.Position___lt__(self, *args)
    def isValid(self): return _pybw_swig.Position_isValid(self)
    def __add__(self, *args): return _pybw_swig.Position___add__(self, *args)
    def __sub__(self, *args): return _pybw_swig.Position___sub__(self, *args)
    def makeValid(self): return _pybw_swig.Position_makeValid(self)
    def __iadd__(self, *args): return _pybw_swig.Position___iadd__(self, *args)
    def __isub__(self, *args): return _pybw_swig.Position___isub__(self, *args)
    def getDistance(self, *args): return _pybw_swig.Position_getDistance(self, *args)
    def getApproxDistance(self, *args): return _pybw_swig.Position_getApproxDistance(self, *args)
    def getLength(self): return _pybw_swig.Position_getLength(self)
    def getX(self): return _pybw_swig.Position_getX(self)
    def getY(self): return _pybw_swig.Position_getY(self)
    __swig_destroy__ = _pybw_swig.delete_Position
    __del__ = lambda self : None;
Position_swigregister = _pybw_swig.Position_swigregister
Position_swigregister(Position)
PlayerTypes_None = cvar.PlayerTypes_None
Computer = cvar.Computer
PlayerTypes_Player = cvar.PlayerTypes_Player
PlayerTypes_RescuePassive = cvar.PlayerTypes_RescuePassive
EitherPreferComputer = cvar.EitherPreferComputer
EitherPreferHuman = cvar.EitherPreferHuman
PlayerTypes_Neutral = cvar.PlayerTypes_Neutral
Closed = cvar.Closed
PlayerTypes_PlayerLeft = cvar.PlayerTypes_PlayerLeft
ComputerLeft = cvar.ComputerLeft
PlayerTypes_Unknown = cvar.PlayerTypes_Unknown

class Race(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Race, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Race, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_Race(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _pybw_swig.Race___eq__(self, *args)
    def __ne__(self, *args): return _pybw_swig.Race___ne__(self, *args)
    def __lt__(self, *args): return _pybw_swig.Race___lt__(self, *args)
    def getID(self): return _pybw_swig.Race_getID(self)
    def getName(self): return _pybw_swig.Race_getName(self)
    def getWorker(self): return _pybw_swig.Race_getWorker(self)
    def getCenter(self): return _pybw_swig.Race_getCenter(self)
    def getRefinery(self): return _pybw_swig.Race_getRefinery(self)
    def getTransport(self): return _pybw_swig.Race_getTransport(self)
    def getSupplyProvider(self): return _pybw_swig.Race_getSupplyProvider(self)
    __swig_destroy__ = _pybw_swig.delete_Race
    __del__ = lambda self : None;
Race_swigregister = _pybw_swig.Race_swigregister
Race_swigregister(Race)
Positions_Invalid = cvar.Positions_Invalid
Positions_None = cvar.Positions_None
Positions_Unknown = cvar.Positions_Unknown


def getRace(*args):
  return _pybw_swig.getRace(*args)
getRace = _pybw_swig.getRace

def allRaces():
  return _pybw_swig.allRaces()
allRaces = _pybw_swig.allRaces
class TechType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TechType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TechType, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_TechType(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _pybw_swig.TechType___eq__(self, *args)
    def __ne__(self, *args): return _pybw_swig.TechType___ne__(self, *args)
    def __lt__(self, *args): return _pybw_swig.TechType___lt__(self, *args)
    def getID(self): return _pybw_swig.TechType_getID(self)
    def getName(self): return _pybw_swig.TechType_getName(self)
    def getRace(self): return _pybw_swig.TechType_getRace(self)
    def mineralPrice(self): return _pybw_swig.TechType_mineralPrice(self)
    def gasPrice(self): return _pybw_swig.TechType_gasPrice(self)
    def researchTime(self): return _pybw_swig.TechType_researchTime(self)
    def energyUsed(self): return _pybw_swig.TechType_energyUsed(self)
    def whatResearches(self): return _pybw_swig.TechType_whatResearches(self)
    def getWeapon(self): return _pybw_swig.TechType_getWeapon(self)
    def targetsUnit(self): return _pybw_swig.TechType_targetsUnit(self)
    def targetsPosition(self): return _pybw_swig.TechType_targetsPosition(self)
    def whatUses(self): return _pybw_swig.TechType_whatUses(self)
    __swig_destroy__ = _pybw_swig.delete_TechType
    __del__ = lambda self : None;
TechType_swigregister = _pybw_swig.TechType_swigregister
TechType_swigregister(TechType)
Zerg = cvar.Zerg
Terran = cvar.Terran
Protoss = cvar.Protoss
Random = cvar.Random
Other = cvar.Other
Races_None = cvar.Races_None
Races_Unknown = cvar.Races_Unknown


def getTechType(*args):
  return _pybw_swig.getTechType(*args)
getTechType = _pybw_swig.getTechType

def allTechTypes():
  return _pybw_swig.allTechTypes()
allTechTypes = _pybw_swig.allTechTypes
class TilePosition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TilePosition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TilePosition, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_TilePosition(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _pybw_swig.TilePosition___eq__(self, *args)
    def __ne__(self, *args): return _pybw_swig.TilePosition___ne__(self, *args)
    def __lt__(self, *args): return _pybw_swig.TilePosition___lt__(self, *args)
    def isValid(self): return _pybw_swig.TilePosition_isValid(self)
    def __add__(self, *args): return _pybw_swig.TilePosition___add__(self, *args)
    def __sub__(self, *args): return _pybw_swig.TilePosition___sub__(self, *args)
    def makeValid(self): return _pybw_swig.TilePosition_makeValid(self)
    def __iadd__(self, *args): return _pybw_swig.TilePosition___iadd__(self, *args)
    def __isub__(self, *args): return _pybw_swig.TilePosition___isub__(self, *args)
    def getDistance(self, *args): return _pybw_swig.TilePosition_getDistance(self, *args)
    def getLength(self): return _pybw_swig.TilePosition_getLength(self)
    def getX(self): return _pybw_swig.TilePosition_getX(self)
    def getY(self): return _pybw_swig.TilePosition_getY(self)
    __swig_destroy__ = _pybw_swig.delete_TilePosition
    __del__ = lambda self : None;
TilePosition_swigregister = _pybw_swig.TilePosition_swigregister
TilePosition_swigregister(TilePosition)
Stim_Packs = cvar.Stim_Packs
TechTypes_Lockdown = cvar.TechTypes_Lockdown
TechTypes_EMP_Shockwave = cvar.TechTypes_EMP_Shockwave
TechTypes_Spider_Mines = cvar.TechTypes_Spider_Mines
Scanner_Sweep = cvar.Scanner_Sweep
Tank_Siege_Mode = cvar.Tank_Siege_Mode
Defensive_Matrix = cvar.Defensive_Matrix
TechTypes_Irradiate = cvar.TechTypes_Irradiate
TechTypes_Yamato_Gun = cvar.TechTypes_Yamato_Gun
Cloaking_Field = cvar.Cloaking_Field
Personnel_Cloaking = cvar.Personnel_Cloaking
TechTypes_Burrowing = cvar.TechTypes_Burrowing
Infestation = cvar.Infestation
TechTypes_Spawn_Broodlings = cvar.TechTypes_Spawn_Broodlings
TechTypes_Dark_Swarm = cvar.TechTypes_Dark_Swarm
TechTypes_Plague = cvar.TechTypes_Plague
TechTypes_Consume = cvar.TechTypes_Consume
TechTypes_Ensnare = cvar.TechTypes_Ensnare
TechTypes_Parasite = cvar.TechTypes_Parasite
TechTypes_Psionic_Storm = cvar.TechTypes_Psionic_Storm
Hallucination = cvar.Hallucination
Recall = cvar.Recall
TechTypes_Stasis_Field = cvar.TechTypes_Stasis_Field
Archon_Warp = cvar.Archon_Warp
TechTypes_Restoration = cvar.TechTypes_Restoration
TechTypes_Disruption_Web = cvar.TechTypes_Disruption_Web
TechTypes_Mind_Control = cvar.TechTypes_Mind_Control
Dark_Archon_Meld = cvar.Dark_Archon_Meld
TechTypes_Feedback = cvar.TechTypes_Feedback
TechTypes_Optical_Flare = cvar.TechTypes_Optical_Flare
TechTypes_Maelstrom = cvar.TechTypes_Maelstrom
Lurker_Aspect = cvar.Lurker_Aspect
Healing = cvar.Healing
TechTypes_None = cvar.TechTypes_None
TechTypes_Unknown = cvar.TechTypes_Unknown
TechTypes_Nuclear_Strike = cvar.TechTypes_Nuclear_Strike

class Unit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Unit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Unit, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getID(self): return _pybw_swig.Unit_getID(self)
    def getPlayer(self): return _pybw_swig.Unit_getPlayer(self)
    def getType(self): return _pybw_swig.Unit_getType(self)
    def getPosition(self): return _pybw_swig.Unit_getPosition(self)
    def getTilePosition(self): return _pybw_swig.Unit_getTilePosition(self)
    def getAngle(self): return _pybw_swig.Unit_getAngle(self)
    def getVelocityX(self): return _pybw_swig.Unit_getVelocityX(self)
    def getVelocityY(self): return _pybw_swig.Unit_getVelocityY(self)
    def getHitPoints(self): return _pybw_swig.Unit_getHitPoints(self)
    def getShields(self): return _pybw_swig.Unit_getShields(self)
    def getEnergy(self): return _pybw_swig.Unit_getEnergy(self)
    def getResources(self): return _pybw_swig.Unit_getResources(self)
    def getResourceGroup(self): return _pybw_swig.Unit_getResourceGroup(self)
    def getDistance(self, *args): return _pybw_swig.Unit_getDistance(self, *args)
    def hasPath(self, *args): return _pybw_swig.Unit_hasPath(self, *args)
    def getLastOrderFrame(self): return _pybw_swig.Unit_getLastOrderFrame(self)
    def getUpgradeLevel(self, *args): return _pybw_swig.Unit_getUpgradeLevel(self, *args)
    def getInitialType(self): return _pybw_swig.Unit_getInitialType(self)
    def getInitialPosition(self): return _pybw_swig.Unit_getInitialPosition(self)
    def getInitialTilePosition(self): return _pybw_swig.Unit_getInitialTilePosition(self)
    def getInitialHitPoints(self): return _pybw_swig.Unit_getInitialHitPoints(self)
    def getInitialResources(self): return _pybw_swig.Unit_getInitialResources(self)
    def getKillCount(self): return _pybw_swig.Unit_getKillCount(self)
    def getInterceptorCount(self): return _pybw_swig.Unit_getInterceptorCount(self)
    def getScarabCount(self): return _pybw_swig.Unit_getScarabCount(self)
    def getSpiderMineCount(self): return _pybw_swig.Unit_getSpiderMineCount(self)
    def getGroundWeaponCooldown(self): return _pybw_swig.Unit_getGroundWeaponCooldown(self)
    def getAirWeaponCooldown(self): return _pybw_swig.Unit_getAirWeaponCooldown(self)
    def getSpellCooldown(self): return _pybw_swig.Unit_getSpellCooldown(self)
    def getDefenseMatrixPoints(self): return _pybw_swig.Unit_getDefenseMatrixPoints(self)
    def getDefenseMatrixTimer(self): return _pybw_swig.Unit_getDefenseMatrixTimer(self)
    def getEnsnareTimer(self): return _pybw_swig.Unit_getEnsnareTimer(self)
    def getIrradiateTimer(self): return _pybw_swig.Unit_getIrradiateTimer(self)
    def getLockdownTimer(self): return _pybw_swig.Unit_getLockdownTimer(self)
    def getMaelstromTimer(self): return _pybw_swig.Unit_getMaelstromTimer(self)
    def getOrderTimer(self): return _pybw_swig.Unit_getOrderTimer(self)
    def getPlagueTimer(self): return _pybw_swig.Unit_getPlagueTimer(self)
    def getRemoveTimer(self): return _pybw_swig.Unit_getRemoveTimer(self)
    def getStasisTimer(self): return _pybw_swig.Unit_getStasisTimer(self)
    def getStimTimer(self): return _pybw_swig.Unit_getStimTimer(self)
    def getBuildType(self): return _pybw_swig.Unit_getBuildType(self)
    def getTech(self): return _pybw_swig.Unit_getTech(self)
    def getUpgrade(self): return _pybw_swig.Unit_getUpgrade(self)
    def getRemainingBuildTime(self): return _pybw_swig.Unit_getRemainingBuildTime(self)
    def getRemainingTrainTime(self): return _pybw_swig.Unit_getRemainingTrainTime(self)
    def getRemainingResearchTime(self): return _pybw_swig.Unit_getRemainingResearchTime(self)
    def getRemainingUpgradeTime(self): return _pybw_swig.Unit_getRemainingUpgradeTime(self)
    def getBuildUnit(self): return _pybw_swig.Unit_getBuildUnit(self)
    def getTarget(self): return _pybw_swig.Unit_getTarget(self)
    def getTargetPosition(self): return _pybw_swig.Unit_getTargetPosition(self)
    def getOrder(self): return _pybw_swig.Unit_getOrder(self)
    def getOrderTarget(self): return _pybw_swig.Unit_getOrderTarget(self)
    def getSecondaryOrder(self): return _pybw_swig.Unit_getSecondaryOrder(self)
    def getRallyPosition(self): return _pybw_swig.Unit_getRallyPosition(self)
    def getRallyUnit(self): return _pybw_swig.Unit_getRallyUnit(self)
    def getAddon(self): return _pybw_swig.Unit_getAddon(self)
    def getNydusExit(self): return _pybw_swig.Unit_getNydusExit(self)
    def getPowerUp(self): return _pybw_swig.Unit_getPowerUp(self)
    def getTransport(self): return _pybw_swig.Unit_getTransport(self)
    def getCarrier(self): return _pybw_swig.Unit_getCarrier(self)
    def getInterceptors(self): return _pybw_swig.Unit_getInterceptors(self)
    def getHatchery(self): return _pybw_swig.Unit_getHatchery(self)
    def getLarva(self): return _pybw_swig.Unit_getLarva(self)
    def exists(self): return _pybw_swig.Unit_exists(self)
    def hasNuke(self): return _pybw_swig.Unit_hasNuke(self)
    def isAccelerating(self): return _pybw_swig.Unit_isAccelerating(self)
    def isAttacking(self): return _pybw_swig.Unit_isAttacking(self)
    def isBeingConstructed(self): return _pybw_swig.Unit_isBeingConstructed(self)
    def isBeingGathered(self): return _pybw_swig.Unit_isBeingGathered(self)
    def isBeingHealed(self): return _pybw_swig.Unit_isBeingHealed(self)
    def isBlind(self): return _pybw_swig.Unit_isBlind(self)
    def isBraking(self): return _pybw_swig.Unit_isBraking(self)
    def isBurrowed(self): return _pybw_swig.Unit_isBurrowed(self)
    def isCarryingGas(self): return _pybw_swig.Unit_isCarryingGas(self)
    def isCarryingMinerals(self): return _pybw_swig.Unit_isCarryingMinerals(self)
    def isCloaked(self): return _pybw_swig.Unit_isCloaked(self)
    def isCompleted(self): return _pybw_swig.Unit_isCompleted(self)
    def isConstructing(self): return _pybw_swig.Unit_isConstructing(self)
    def isDefenseMatrixed(self): return _pybw_swig.Unit_isDefenseMatrixed(self)
    def isDetected(self): return _pybw_swig.Unit_isDetected(self)
    def isEnsnared(self): return _pybw_swig.Unit_isEnsnared(self)
    def isFollowing(self): return _pybw_swig.Unit_isFollowing(self)
    def isGatheringGas(self): return _pybw_swig.Unit_isGatheringGas(self)
    def isGatheringMinerals(self): return _pybw_swig.Unit_isGatheringMinerals(self)
    def isHallucination(self): return _pybw_swig.Unit_isHallucination(self)
    def isHoldingPosition(self): return _pybw_swig.Unit_isHoldingPosition(self)
    def isIdle(self): return _pybw_swig.Unit_isIdle(self)
    def isInterruptible(self): return _pybw_swig.Unit_isInterruptible(self)
    def isInWeaponRange(self, *args): return _pybw_swig.Unit_isInWeaponRange(self, *args)
    def isIrradiated(self): return _pybw_swig.Unit_isIrradiated(self)
    def isLifted(self): return _pybw_swig.Unit_isLifted(self)
    def isLoaded(self): return _pybw_swig.Unit_isLoaded(self)
    def isLockedDown(self): return _pybw_swig.Unit_isLockedDown(self)
    def isMaelstrommed(self): return _pybw_swig.Unit_isMaelstrommed(self)
    def isMorphing(self): return _pybw_swig.Unit_isMorphing(self)
    def isMoving(self): return _pybw_swig.Unit_isMoving(self)
    def isParasited(self): return _pybw_swig.Unit_isParasited(self)
    def isPatrolling(self): return _pybw_swig.Unit_isPatrolling(self)
    def isPlagued(self): return _pybw_swig.Unit_isPlagued(self)
    def isRepairing(self): return _pybw_swig.Unit_isRepairing(self)
    def isResearching(self): return _pybw_swig.Unit_isResearching(self)
    def isSelected(self): return _pybw_swig.Unit_isSelected(self)
    def isSieged(self): return _pybw_swig.Unit_isSieged(self)
    def isStartingAttack(self): return _pybw_swig.Unit_isStartingAttack(self)
    def isStasised(self): return _pybw_swig.Unit_isStasised(self)
    def isStimmed(self): return _pybw_swig.Unit_isStimmed(self)
    def isStuck(self): return _pybw_swig.Unit_isStuck(self)
    def isTraining(self): return _pybw_swig.Unit_isTraining(self)
    def isUnderStorm(self): return _pybw_swig.Unit_isUnderStorm(self)
    def isUnpowered(self): return _pybw_swig.Unit_isUnpowered(self)
    def isUpgrading(self): return _pybw_swig.Unit_isUpgrading(self)
    def isVisible(self, *args): return _pybw_swig.Unit_isVisible(self, *args)
    def canIssueCommand(self, *args): return _pybw_swig.Unit_canIssueCommand(self, *args)
    def issueCommand(self, *args): return _pybw_swig.Unit_issueCommand(self, *args)
    def attackMove(self, *args): return _pybw_swig.Unit_attackMove(self, *args)
    def attackUnit(self, *args): return _pybw_swig.Unit_attackUnit(self, *args)
    def build(self, *args): return _pybw_swig.Unit_build(self, *args)
    def buildAddon(self, *args): return _pybw_swig.Unit_buildAddon(self, *args)
    def train(self, *args): return _pybw_swig.Unit_train(self, *args)
    def morph(self, *args): return _pybw_swig.Unit_morph(self, *args)
    def research(self, *args): return _pybw_swig.Unit_research(self, *args)
    def upgrade(self, *args): return _pybw_swig.Unit_upgrade(self, *args)
    def setRallyPoint(self, *args): return _pybw_swig.Unit_setRallyPoint(self, *args)
    def move(self, *args): return _pybw_swig.Unit_move(self, *args)
    def patrol(self, *args): return _pybw_swig.Unit_patrol(self, *args)
    def holdPosition(self): return _pybw_swig.Unit_holdPosition(self)
    def stop(self): return _pybw_swig.Unit_stop(self)
    def follow(self, *args): return _pybw_swig.Unit_follow(self, *args)
    def gather(self, *args): return _pybw_swig.Unit_gather(self, *args)
    def returnCargo(self): return _pybw_swig.Unit_returnCargo(self)
    def repair(self, *args): return _pybw_swig.Unit_repair(self, *args)
    def burrow(self): return _pybw_swig.Unit_burrow(self)
    def unburrow(self): return _pybw_swig.Unit_unburrow(self)
    def cloak(self): return _pybw_swig.Unit_cloak(self)
    def decloak(self): return _pybw_swig.Unit_decloak(self)
    def siege(self): return _pybw_swig.Unit_siege(self)
    def unsiege(self): return _pybw_swig.Unit_unsiege(self)
    def lift(self): return _pybw_swig.Unit_lift(self)
    def land(self, *args): return _pybw_swig.Unit_land(self, *args)
    def load(self, *args): return _pybw_swig.Unit_load(self, *args)
    def unload(self, *args): return _pybw_swig.Unit_unload(self, *args)
    def unloadAll(self, *args): return _pybw_swig.Unit_unloadAll(self, *args)
    def rightClick(self, *args): return _pybw_swig.Unit_rightClick(self, *args)
    def haltConstruction(self): return _pybw_swig.Unit_haltConstruction(self)
    def cancelConstruction(self): return _pybw_swig.Unit_cancelConstruction(self)
    def cancelAddon(self): return _pybw_swig.Unit_cancelAddon(self)
    def cancelTrain(self, *args): return _pybw_swig.Unit_cancelTrain(self, *args)
    def cancelMorph(self): return _pybw_swig.Unit_cancelMorph(self)
    def cancelResearch(self): return _pybw_swig.Unit_cancelResearch(self)
    def cancelUpgrade(self): return _pybw_swig.Unit_cancelUpgrade(self)
    def useTech(self, *args): return _pybw_swig.Unit_useTech(self, *args)
    def setClientInfo(self, *args): return _pybw_swig.Unit_setClientInfo(self, *args)
    def getClientInfo(self): return _pybw_swig.Unit_getClientInfo(self)
    def getLoadedUnits(self): return _pybw_swig.Unit_getLoadedUnits(self)
    def getTrainingQueue(self): return _pybw_swig.Unit_getTrainingQueue(self)
    __swig_destroy__ = _pybw_swig.delete_Unit
    __del__ = lambda self : None;
Unit_swigregister = _pybw_swig.Unit_swigregister
Unit_swigregister(Unit)
TilePositions_Invalid = cvar.TilePositions_Invalid
TilePositions_None = cvar.TilePositions_None
TilePositions_Unknown = cvar.TilePositions_Unknown

class UnitCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnitCommand, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_UnitCommand(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["attackMove"] = lambda x: _pybw_swig.UnitCommand_attackMove
    if _newclass:attackMove = staticmethod(_pybw_swig.UnitCommand_attackMove)
    __swig_getmethods__["attackUnit"] = lambda x: _pybw_swig.UnitCommand_attackUnit
    if _newclass:attackUnit = staticmethod(_pybw_swig.UnitCommand_attackUnit)
    __swig_getmethods__["build"] = lambda x: _pybw_swig.UnitCommand_build
    if _newclass:build = staticmethod(_pybw_swig.UnitCommand_build)
    __swig_getmethods__["buildAddon"] = lambda x: _pybw_swig.UnitCommand_buildAddon
    if _newclass:buildAddon = staticmethod(_pybw_swig.UnitCommand_buildAddon)
    __swig_getmethods__["train"] = lambda x: _pybw_swig.UnitCommand_train
    if _newclass:train = staticmethod(_pybw_swig.UnitCommand_train)
    __swig_getmethods__["morph"] = lambda x: _pybw_swig.UnitCommand_morph
    if _newclass:morph = staticmethod(_pybw_swig.UnitCommand_morph)
    __swig_getmethods__["research"] = lambda x: _pybw_swig.UnitCommand_research
    if _newclass:research = staticmethod(_pybw_swig.UnitCommand_research)
    __swig_getmethods__["upgrade"] = lambda x: _pybw_swig.UnitCommand_upgrade
    if _newclass:upgrade = staticmethod(_pybw_swig.UnitCommand_upgrade)
    __swig_getmethods__["setRallyPosition"] = lambda x: _pybw_swig.UnitCommand_setRallyPosition
    if _newclass:setRallyPosition = staticmethod(_pybw_swig.UnitCommand_setRallyPosition)
    __swig_getmethods__["setRallyUnit"] = lambda x: _pybw_swig.UnitCommand_setRallyUnit
    if _newclass:setRallyUnit = staticmethod(_pybw_swig.UnitCommand_setRallyUnit)
    __swig_getmethods__["move"] = lambda x: _pybw_swig.UnitCommand_move
    if _newclass:move = staticmethod(_pybw_swig.UnitCommand_move)
    __swig_getmethods__["patrol"] = lambda x: _pybw_swig.UnitCommand_patrol
    if _newclass:patrol = staticmethod(_pybw_swig.UnitCommand_patrol)
    __swig_getmethods__["holdPosition"] = lambda x: _pybw_swig.UnitCommand_holdPosition
    if _newclass:holdPosition = staticmethod(_pybw_swig.UnitCommand_holdPosition)
    __swig_getmethods__["stop"] = lambda x: _pybw_swig.UnitCommand_stop
    if _newclass:stop = staticmethod(_pybw_swig.UnitCommand_stop)
    __swig_getmethods__["follow"] = lambda x: _pybw_swig.UnitCommand_follow
    if _newclass:follow = staticmethod(_pybw_swig.UnitCommand_follow)
    __swig_getmethods__["gather"] = lambda x: _pybw_swig.UnitCommand_gather
    if _newclass:gather = staticmethod(_pybw_swig.UnitCommand_gather)
    __swig_getmethods__["returnCargo"] = lambda x: _pybw_swig.UnitCommand_returnCargo
    if _newclass:returnCargo = staticmethod(_pybw_swig.UnitCommand_returnCargo)
    __swig_getmethods__["repair"] = lambda x: _pybw_swig.UnitCommand_repair
    if _newclass:repair = staticmethod(_pybw_swig.UnitCommand_repair)
    __swig_getmethods__["burrow"] = lambda x: _pybw_swig.UnitCommand_burrow
    if _newclass:burrow = staticmethod(_pybw_swig.UnitCommand_burrow)
    __swig_getmethods__["unburrow"] = lambda x: _pybw_swig.UnitCommand_unburrow
    if _newclass:unburrow = staticmethod(_pybw_swig.UnitCommand_unburrow)
    __swig_getmethods__["cloak"] = lambda x: _pybw_swig.UnitCommand_cloak
    if _newclass:cloak = staticmethod(_pybw_swig.UnitCommand_cloak)
    __swig_getmethods__["decloak"] = lambda x: _pybw_swig.UnitCommand_decloak
    if _newclass:decloak = staticmethod(_pybw_swig.UnitCommand_decloak)
    __swig_getmethods__["siege"] = lambda x: _pybw_swig.UnitCommand_siege
    if _newclass:siege = staticmethod(_pybw_swig.UnitCommand_siege)
    __swig_getmethods__["unsiege"] = lambda x: _pybw_swig.UnitCommand_unsiege
    if _newclass:unsiege = staticmethod(_pybw_swig.UnitCommand_unsiege)
    __swig_getmethods__["lift"] = lambda x: _pybw_swig.UnitCommand_lift
    if _newclass:lift = staticmethod(_pybw_swig.UnitCommand_lift)
    __swig_getmethods__["land"] = lambda x: _pybw_swig.UnitCommand_land
    if _newclass:land = staticmethod(_pybw_swig.UnitCommand_land)
    __swig_getmethods__["load"] = lambda x: _pybw_swig.UnitCommand_load
    if _newclass:load = staticmethod(_pybw_swig.UnitCommand_load)
    __swig_getmethods__["unload"] = lambda x: _pybw_swig.UnitCommand_unload
    if _newclass:unload = staticmethod(_pybw_swig.UnitCommand_unload)
    __swig_getmethods__["unloadAll"] = lambda x: _pybw_swig.UnitCommand_unloadAll
    if _newclass:unloadAll = staticmethod(_pybw_swig.UnitCommand_unloadAll)
    __swig_getmethods__["rightClick"] = lambda x: _pybw_swig.UnitCommand_rightClick
    if _newclass:rightClick = staticmethod(_pybw_swig.UnitCommand_rightClick)
    __swig_getmethods__["haltConstruction"] = lambda x: _pybw_swig.UnitCommand_haltConstruction
    if _newclass:haltConstruction = staticmethod(_pybw_swig.UnitCommand_haltConstruction)
    __swig_getmethods__["cancelConstruction"] = lambda x: _pybw_swig.UnitCommand_cancelConstruction
    if _newclass:cancelConstruction = staticmethod(_pybw_swig.UnitCommand_cancelConstruction)
    __swig_getmethods__["cancelAddon"] = lambda x: _pybw_swig.UnitCommand_cancelAddon
    if _newclass:cancelAddon = staticmethod(_pybw_swig.UnitCommand_cancelAddon)
    __swig_getmethods__["cancelTrain"] = lambda x: _pybw_swig.UnitCommand_cancelTrain
    if _newclass:cancelTrain = staticmethod(_pybw_swig.UnitCommand_cancelTrain)
    __swig_getmethods__["cancelMorph"] = lambda x: _pybw_swig.UnitCommand_cancelMorph
    if _newclass:cancelMorph = staticmethod(_pybw_swig.UnitCommand_cancelMorph)
    __swig_getmethods__["cancelResearch"] = lambda x: _pybw_swig.UnitCommand_cancelResearch
    if _newclass:cancelResearch = staticmethod(_pybw_swig.UnitCommand_cancelResearch)
    __swig_getmethods__["cancelUpgrade"] = lambda x: _pybw_swig.UnitCommand_cancelUpgrade
    if _newclass:cancelUpgrade = staticmethod(_pybw_swig.UnitCommand_cancelUpgrade)
    __swig_getmethods__["useTech"] = lambda x: _pybw_swig.UnitCommand_useTech
    if _newclass:useTech = staticmethod(_pybw_swig.UnitCommand_useTech)
    __swig_setmethods__["unit"] = _pybw_swig.UnitCommand_unit_set
    __swig_getmethods__["unit"] = _pybw_swig.UnitCommand_unit_get
    if _newclass:unit = _swig_property(_pybw_swig.UnitCommand_unit_get, _pybw_swig.UnitCommand_unit_set)
    __swig_setmethods__["type"] = _pybw_swig.UnitCommand_type_set
    __swig_getmethods__["type"] = _pybw_swig.UnitCommand_type_get
    if _newclass:type = _swig_property(_pybw_swig.UnitCommand_type_get, _pybw_swig.UnitCommand_type_set)
    __swig_setmethods__["target"] = _pybw_swig.UnitCommand_target_set
    __swig_getmethods__["target"] = _pybw_swig.UnitCommand_target_get
    if _newclass:target = _swig_property(_pybw_swig.UnitCommand_target_get, _pybw_swig.UnitCommand_target_set)
    __swig_setmethods__["x"] = _pybw_swig.UnitCommand_x_set
    __swig_getmethods__["x"] = _pybw_swig.UnitCommand_x_get
    if _newclass:x = _swig_property(_pybw_swig.UnitCommand_x_get, _pybw_swig.UnitCommand_x_set)
    __swig_setmethods__["y"] = _pybw_swig.UnitCommand_y_set
    __swig_getmethods__["y"] = _pybw_swig.UnitCommand_y_get
    if _newclass:y = _swig_property(_pybw_swig.UnitCommand_y_get, _pybw_swig.UnitCommand_y_set)
    __swig_setmethods__["extra"] = _pybw_swig.UnitCommand_extra_set
    __swig_getmethods__["extra"] = _pybw_swig.UnitCommand_extra_get
    if _newclass:extra = _swig_property(_pybw_swig.UnitCommand_extra_get, _pybw_swig.UnitCommand_extra_set)
    __swig_destroy__ = _pybw_swig.delete_UnitCommand
    __del__ = lambda self : None;
UnitCommand_swigregister = _pybw_swig.UnitCommand_swigregister
UnitCommand_swigregister(UnitCommand)

def UnitCommand_attackMove(*args):
  return _pybw_swig.UnitCommand_attackMove(*args)
UnitCommand_attackMove = _pybw_swig.UnitCommand_attackMove

def UnitCommand_attackUnit(*args):
  return _pybw_swig.UnitCommand_attackUnit(*args)
UnitCommand_attackUnit = _pybw_swig.UnitCommand_attackUnit

def UnitCommand_build(*args):
  return _pybw_swig.UnitCommand_build(*args)
UnitCommand_build = _pybw_swig.UnitCommand_build

def UnitCommand_buildAddon(*args):
  return _pybw_swig.UnitCommand_buildAddon(*args)
UnitCommand_buildAddon = _pybw_swig.UnitCommand_buildAddon

def UnitCommand_train(*args):
  return _pybw_swig.UnitCommand_train(*args)
UnitCommand_train = _pybw_swig.UnitCommand_train

def UnitCommand_morph(*args):
  return _pybw_swig.UnitCommand_morph(*args)
UnitCommand_morph = _pybw_swig.UnitCommand_morph

def UnitCommand_research(*args):
  return _pybw_swig.UnitCommand_research(*args)
UnitCommand_research = _pybw_swig.UnitCommand_research

def UnitCommand_upgrade(*args):
  return _pybw_swig.UnitCommand_upgrade(*args)
UnitCommand_upgrade = _pybw_swig.UnitCommand_upgrade

def UnitCommand_setRallyPosition(*args):
  return _pybw_swig.UnitCommand_setRallyPosition(*args)
UnitCommand_setRallyPosition = _pybw_swig.UnitCommand_setRallyPosition

def UnitCommand_setRallyUnit(*args):
  return _pybw_swig.UnitCommand_setRallyUnit(*args)
UnitCommand_setRallyUnit = _pybw_swig.UnitCommand_setRallyUnit

def UnitCommand_move(*args):
  return _pybw_swig.UnitCommand_move(*args)
UnitCommand_move = _pybw_swig.UnitCommand_move

def UnitCommand_patrol(*args):
  return _pybw_swig.UnitCommand_patrol(*args)
UnitCommand_patrol = _pybw_swig.UnitCommand_patrol

def UnitCommand_holdPosition(*args):
  return _pybw_swig.UnitCommand_holdPosition(*args)
UnitCommand_holdPosition = _pybw_swig.UnitCommand_holdPosition

def UnitCommand_stop(*args):
  return _pybw_swig.UnitCommand_stop(*args)
UnitCommand_stop = _pybw_swig.UnitCommand_stop

def UnitCommand_follow(*args):
  return _pybw_swig.UnitCommand_follow(*args)
UnitCommand_follow = _pybw_swig.UnitCommand_follow

def UnitCommand_gather(*args):
  return _pybw_swig.UnitCommand_gather(*args)
UnitCommand_gather = _pybw_swig.UnitCommand_gather

def UnitCommand_returnCargo(*args):
  return _pybw_swig.UnitCommand_returnCargo(*args)
UnitCommand_returnCargo = _pybw_swig.UnitCommand_returnCargo

def UnitCommand_repair(*args):
  return _pybw_swig.UnitCommand_repair(*args)
UnitCommand_repair = _pybw_swig.UnitCommand_repair

def UnitCommand_burrow(*args):
  return _pybw_swig.UnitCommand_burrow(*args)
UnitCommand_burrow = _pybw_swig.UnitCommand_burrow

def UnitCommand_unburrow(*args):
  return _pybw_swig.UnitCommand_unburrow(*args)
UnitCommand_unburrow = _pybw_swig.UnitCommand_unburrow

def UnitCommand_cloak(*args):
  return _pybw_swig.UnitCommand_cloak(*args)
UnitCommand_cloak = _pybw_swig.UnitCommand_cloak

def UnitCommand_decloak(*args):
  return _pybw_swig.UnitCommand_decloak(*args)
UnitCommand_decloak = _pybw_swig.UnitCommand_decloak

def UnitCommand_siege(*args):
  return _pybw_swig.UnitCommand_siege(*args)
UnitCommand_siege = _pybw_swig.UnitCommand_siege

def UnitCommand_unsiege(*args):
  return _pybw_swig.UnitCommand_unsiege(*args)
UnitCommand_unsiege = _pybw_swig.UnitCommand_unsiege

def UnitCommand_lift(*args):
  return _pybw_swig.UnitCommand_lift(*args)
UnitCommand_lift = _pybw_swig.UnitCommand_lift

def UnitCommand_land(*args):
  return _pybw_swig.UnitCommand_land(*args)
UnitCommand_land = _pybw_swig.UnitCommand_land

def UnitCommand_load(*args):
  return _pybw_swig.UnitCommand_load(*args)
UnitCommand_load = _pybw_swig.UnitCommand_load

def UnitCommand_unload(*args):
  return _pybw_swig.UnitCommand_unload(*args)
UnitCommand_unload = _pybw_swig.UnitCommand_unload

def UnitCommand_unloadAll(*args):
  return _pybw_swig.UnitCommand_unloadAll(*args)
UnitCommand_unloadAll = _pybw_swig.UnitCommand_unloadAll

def UnitCommand_rightClick(*args):
  return _pybw_swig.UnitCommand_rightClick(*args)
UnitCommand_rightClick = _pybw_swig.UnitCommand_rightClick

def UnitCommand_haltConstruction(*args):
  return _pybw_swig.UnitCommand_haltConstruction(*args)
UnitCommand_haltConstruction = _pybw_swig.UnitCommand_haltConstruction

def UnitCommand_cancelConstruction(*args):
  return _pybw_swig.UnitCommand_cancelConstruction(*args)
UnitCommand_cancelConstruction = _pybw_swig.UnitCommand_cancelConstruction

def UnitCommand_cancelAddon(*args):
  return _pybw_swig.UnitCommand_cancelAddon(*args)
UnitCommand_cancelAddon = _pybw_swig.UnitCommand_cancelAddon

def UnitCommand_cancelTrain(*args):
  return _pybw_swig.UnitCommand_cancelTrain(*args)
UnitCommand_cancelTrain = _pybw_swig.UnitCommand_cancelTrain

def UnitCommand_cancelMorph(*args):
  return _pybw_swig.UnitCommand_cancelMorph(*args)
UnitCommand_cancelMorph = _pybw_swig.UnitCommand_cancelMorph

def UnitCommand_cancelResearch(*args):
  return _pybw_swig.UnitCommand_cancelResearch(*args)
UnitCommand_cancelResearch = _pybw_swig.UnitCommand_cancelResearch

def UnitCommand_cancelUpgrade(*args):
  return _pybw_swig.UnitCommand_cancelUpgrade(*args)
UnitCommand_cancelUpgrade = _pybw_swig.UnitCommand_cancelUpgrade

def UnitCommand_useTech(*args):
  return _pybw_swig.UnitCommand_useTech(*args)
UnitCommand_useTech = _pybw_swig.UnitCommand_useTech

class UnitCommandType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitCommandType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnitCommandType, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_UnitCommandType(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _pybw_swig.UnitCommandType___eq__(self, *args)
    def __ne__(self, *args): return _pybw_swig.UnitCommandType___ne__(self, *args)
    def __lt__(self, *args): return _pybw_swig.UnitCommandType___lt__(self, *args)
    def getID(self): return _pybw_swig.UnitCommandType_getID(self)
    def getName(self): return _pybw_swig.UnitCommandType_getName(self)
    __swig_destroy__ = _pybw_swig.delete_UnitCommandType
    __del__ = lambda self : None;
UnitCommandType_swigregister = _pybw_swig.UnitCommandType_swigregister
UnitCommandType_swigregister(UnitCommandType)


def getUnitCommandType(*args):
  return _pybw_swig.getUnitCommandType(*args)
getUnitCommandType = _pybw_swig.getUnitCommandType

def allUnitCommandTypes():
  return _pybw_swig.allUnitCommandTypes()
allUnitCommandTypes = _pybw_swig.allUnitCommandTypes
class UnitSizeType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitSizeType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnitSizeType, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_UnitSizeType(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _pybw_swig.UnitSizeType___eq__(self, *args)
    def __ne__(self, *args): return _pybw_swig.UnitSizeType___ne__(self, *args)
    def __lt__(self, *args): return _pybw_swig.UnitSizeType___lt__(self, *args)
    def getID(self): return _pybw_swig.UnitSizeType_getID(self)
    def getName(self): return _pybw_swig.UnitSizeType_getName(self)
    __swig_destroy__ = _pybw_swig.delete_UnitSizeType
    __del__ = lambda self : None;
UnitSizeType_swigregister = _pybw_swig.UnitSizeType_swigregister
UnitSizeType_swigregister(UnitSizeType)
UnitCommandTypes_Attack_Move = cvar.UnitCommandTypes_Attack_Move
UnitCommandTypes_Attack_Unit = cvar.UnitCommandTypes_Attack_Unit
UnitCommandTypes_Build = cvar.UnitCommandTypes_Build
UnitCommandTypes_Build_Addon = cvar.UnitCommandTypes_Build_Addon
UnitCommandTypes_Train = cvar.UnitCommandTypes_Train
UnitCommandTypes_Morph = cvar.UnitCommandTypes_Morph
UnitCommandTypes_Research = cvar.UnitCommandTypes_Research
UnitCommandTypes_Upgrade = cvar.UnitCommandTypes_Upgrade
UnitCommandTypes_Set_Rally_Position = cvar.UnitCommandTypes_Set_Rally_Position
UnitCommandTypes_Set_Rally_Unit = cvar.UnitCommandTypes_Set_Rally_Unit
UnitCommandTypes_Move = cvar.UnitCommandTypes_Move
UnitCommandTypes_Patrol = cvar.UnitCommandTypes_Patrol
UnitCommandTypes_Hold_Position = cvar.UnitCommandTypes_Hold_Position
UnitCommandTypes_Stop = cvar.UnitCommandTypes_Stop
UnitCommandTypes_Follow = cvar.UnitCommandTypes_Follow
UnitCommandTypes_Gather = cvar.UnitCommandTypes_Gather
UnitCommandTypes_Return_Cargo = cvar.UnitCommandTypes_Return_Cargo
UnitCommandTypes_Repair = cvar.UnitCommandTypes_Repair
UnitCommandTypes_Burrow = cvar.UnitCommandTypes_Burrow
UnitCommandTypes_Unburrow = cvar.UnitCommandTypes_Unburrow
UnitCommandTypes_Cloak = cvar.UnitCommandTypes_Cloak
UnitCommandTypes_Decloak = cvar.UnitCommandTypes_Decloak
UnitCommandTypes_Siege = cvar.UnitCommandTypes_Siege
UnitCommandTypes_Unsiege = cvar.UnitCommandTypes_Unsiege
UnitCommandTypes_Lift = cvar.UnitCommandTypes_Lift
UnitCommandTypes_Land = cvar.UnitCommandTypes_Land
UnitCommandTypes_Load = cvar.UnitCommandTypes_Load
UnitCommandTypes_Unload = cvar.UnitCommandTypes_Unload
UnitCommandTypes_Unload_All = cvar.UnitCommandTypes_Unload_All
UnitCommandTypes_Unload_All_Position = cvar.UnitCommandTypes_Unload_All_Position
UnitCommandTypes_Right_Click_Position = cvar.UnitCommandTypes_Right_Click_Position
UnitCommandTypes_Right_Click_Unit = cvar.UnitCommandTypes_Right_Click_Unit
UnitCommandTypes_Halt_Construction = cvar.UnitCommandTypes_Halt_Construction
UnitCommandTypes_Cancel_Construction = cvar.UnitCommandTypes_Cancel_Construction
UnitCommandTypes_Cancel_Addon = cvar.UnitCommandTypes_Cancel_Addon
UnitCommandTypes_Cancel_Train = cvar.UnitCommandTypes_Cancel_Train
UnitCommandTypes_Cancel_Train_Slot = cvar.UnitCommandTypes_Cancel_Train_Slot
UnitCommandTypes_Cancel_Morph = cvar.UnitCommandTypes_Cancel_Morph
UnitCommandTypes_Cancel_Research = cvar.UnitCommandTypes_Cancel_Research
UnitCommandTypes_Cancel_Upgrade = cvar.UnitCommandTypes_Cancel_Upgrade
UnitCommandTypes_Use_Tech = cvar.UnitCommandTypes_Use_Tech
UnitCommandTypes_Use_Tech_Position = cvar.UnitCommandTypes_Use_Tech_Position
UnitCommandTypes_Use_Tech_Unit = cvar.UnitCommandTypes_Use_Tech_Unit
UnitCommandTypes_None = cvar.UnitCommandTypes_None
UnitCommandTypes_Unknown = cvar.UnitCommandTypes_Unknown


def getUnitSizeType(*args):
  return _pybw_swig.getUnitSizeType(*args)
getUnitSizeType = _pybw_swig.getUnitSizeType

def allUnitSizeTypes():
  return _pybw_swig.allUnitSizeTypes()
allUnitSizeTypes = _pybw_swig.allUnitSizeTypes
class UnitType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnitType, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_UnitType(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _pybw_swig.UnitType___eq__(self, *args)
    def __ne__(self, *args): return _pybw_swig.UnitType___ne__(self, *args)
    def __lt__(self, *args): return _pybw_swig.UnitType___lt__(self, *args)
    def getID(self): return _pybw_swig.UnitType_getID(self)
    def getName(self): return _pybw_swig.UnitType_getName(self)
    def getRace(self): return _pybw_swig.UnitType_getRace(self)
    def requiredTech(self): return _pybw_swig.UnitType_requiredTech(self)
    def cloakingTech(self): return _pybw_swig.UnitType_cloakingTech(self)
    def abilities(self): return _pybw_swig.UnitType_abilities(self)
    def upgrades(self): return _pybw_swig.UnitType_upgrades(self)
    def armorUpgrade(self): return _pybw_swig.UnitType_armorUpgrade(self)
    def maxHitPoints(self): return _pybw_swig.UnitType_maxHitPoints(self)
    def maxShields(self): return _pybw_swig.UnitType_maxShields(self)
    def maxEnergy(self): return _pybw_swig.UnitType_maxEnergy(self)
    def armor(self): return _pybw_swig.UnitType_armor(self)
    def mineralPrice(self): return _pybw_swig.UnitType_mineralPrice(self)
    def gasPrice(self): return _pybw_swig.UnitType_gasPrice(self)
    def buildTime(self): return _pybw_swig.UnitType_buildTime(self)
    def supplyRequired(self): return _pybw_swig.UnitType_supplyRequired(self)
    def supplyProvided(self): return _pybw_swig.UnitType_supplyProvided(self)
    def spaceRequired(self): return _pybw_swig.UnitType_spaceRequired(self)
    def spaceProvided(self): return _pybw_swig.UnitType_spaceProvided(self)
    def buildScore(self): return _pybw_swig.UnitType_buildScore(self)
    def destroyScore(self): return _pybw_swig.UnitType_destroyScore(self)
    def size(self): return _pybw_swig.UnitType_size(self)
    def tileWidth(self): return _pybw_swig.UnitType_tileWidth(self)
    def tileHeight(self): return _pybw_swig.UnitType_tileHeight(self)
    def dimensionLeft(self): return _pybw_swig.UnitType_dimensionLeft(self)
    def dimensionUp(self): return _pybw_swig.UnitType_dimensionUp(self)
    def dimensionRight(self): return _pybw_swig.UnitType_dimensionRight(self)
    def dimensionDown(self): return _pybw_swig.UnitType_dimensionDown(self)
    def seekRange(self): return _pybw_swig.UnitType_seekRange(self)
    def sightRange(self): return _pybw_swig.UnitType_sightRange(self)
    def groundWeapon(self): return _pybw_swig.UnitType_groundWeapon(self)
    def maxGroundHits(self): return _pybw_swig.UnitType_maxGroundHits(self)
    def airWeapon(self): return _pybw_swig.UnitType_airWeapon(self)
    def maxAirHits(self): return _pybw_swig.UnitType_maxAirHits(self)
    def topSpeed(self): return _pybw_swig.UnitType_topSpeed(self)
    def acceleration(self): return _pybw_swig.UnitType_acceleration(self)
    def haltDistance(self): return _pybw_swig.UnitType_haltDistance(self)
    def turnRadius(self): return _pybw_swig.UnitType_turnRadius(self)
    def canProduce(self): return _pybw_swig.UnitType_canProduce(self)
    def canAttack(self): return _pybw_swig.UnitType_canAttack(self)
    def canMove(self): return _pybw_swig.UnitType_canMove(self)
    def isFlyer(self): return _pybw_swig.UnitType_isFlyer(self)
    def regeneratesHP(self): return _pybw_swig.UnitType_regeneratesHP(self)
    def isSpellcaster(self): return _pybw_swig.UnitType_isSpellcaster(self)
    def hasPermanentCloak(self): return _pybw_swig.UnitType_hasPermanentCloak(self)
    def isInvincible(self): return _pybw_swig.UnitType_isInvincible(self)
    def isOrganic(self): return _pybw_swig.UnitType_isOrganic(self)
    def isMechanical(self): return _pybw_swig.UnitType_isMechanical(self)
    def isRobotic(self): return _pybw_swig.UnitType_isRobotic(self)
    def isDetector(self): return _pybw_swig.UnitType_isDetector(self)
    def isResourceContainer(self): return _pybw_swig.UnitType_isResourceContainer(self)
    def isResourceDepot(self): return _pybw_swig.UnitType_isResourceDepot(self)
    def isRefinery(self): return _pybw_swig.UnitType_isRefinery(self)
    def isWorker(self): return _pybw_swig.UnitType_isWorker(self)
    def requiresPsi(self): return _pybw_swig.UnitType_requiresPsi(self)
    def requiresCreep(self): return _pybw_swig.UnitType_requiresCreep(self)
    def isTwoUnitsInOneEgg(self): return _pybw_swig.UnitType_isTwoUnitsInOneEgg(self)
    def isBurrowable(self): return _pybw_swig.UnitType_isBurrowable(self)
    def isCloakable(self): return _pybw_swig.UnitType_isCloakable(self)
    def isBuilding(self): return _pybw_swig.UnitType_isBuilding(self)
    def isAddon(self): return _pybw_swig.UnitType_isAddon(self)
    def isFlyingBuilding(self): return _pybw_swig.UnitType_isFlyingBuilding(self)
    def isNeutral(self): return _pybw_swig.UnitType_isNeutral(self)
    def isHero(self): return _pybw_swig.UnitType_isHero(self)
    def isPowerup(self): return _pybw_swig.UnitType_isPowerup(self)
    def isBeacon(self): return _pybw_swig.UnitType_isBeacon(self)
    def isFlagBeacon(self): return _pybw_swig.UnitType_isFlagBeacon(self)
    def isSpecialBuilding(self): return _pybw_swig.UnitType_isSpecialBuilding(self)
    def isSpell(self): return _pybw_swig.UnitType_isSpell(self)
    def producesLarva(self): return _pybw_swig.UnitType_producesLarva(self)
    def whatBuilds(self): return _pybw_swig.UnitType_whatBuilds(self)
    __swig_destroy__ = _pybw_swig.delete_UnitType
    __del__ = lambda self : None;
UnitType_swigregister = _pybw_swig.UnitType_swigregister
UnitType_swigregister(UnitType)
UnitSizeTypes_Independent = cvar.UnitSizeTypes_Independent
Small = cvar.Small
Medium = cvar.Medium
Large = cvar.Large
UnitSizeTypes_None = cvar.UnitSizeTypes_None
UnitSizeTypes_Unknown = cvar.UnitSizeTypes_Unknown


def getUnitType(*args):
  return _pybw_swig.getUnitType(*args)
getUnitType = _pybw_swig.getUnitType

def allUnitTypes():
  return _pybw_swig.allUnitTypes()
allUnitTypes = _pybw_swig.allUnitTypes
class UpgradeType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpgradeType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UpgradeType, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_UpgradeType(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _pybw_swig.UpgradeType___eq__(self, *args)
    def __ne__(self, *args): return _pybw_swig.UpgradeType___ne__(self, *args)
    def __lt__(self, *args): return _pybw_swig.UpgradeType___lt__(self, *args)
    def getID(self): return _pybw_swig.UpgradeType_getID(self)
    def getName(self): return _pybw_swig.UpgradeType_getName(self)
    def getRace(self): return _pybw_swig.UpgradeType_getRace(self)
    def mineralPriceBase(self): return _pybw_swig.UpgradeType_mineralPriceBase(self)
    def mineralPriceFactor(self): return _pybw_swig.UpgradeType_mineralPriceFactor(self)
    def gasPriceBase(self): return _pybw_swig.UpgradeType_gasPriceBase(self)
    def gasPriceFactor(self): return _pybw_swig.UpgradeType_gasPriceFactor(self)
    def upgradeTimeBase(self): return _pybw_swig.UpgradeType_upgradeTimeBase(self)
    def upgradeTimeFactor(self): return _pybw_swig.UpgradeType_upgradeTimeFactor(self)
    def maxRepeats(self): return _pybw_swig.UpgradeType_maxRepeats(self)
    def whatUpgrades(self): return _pybw_swig.UpgradeType_whatUpgrades(self)
    def whatUses(self): return _pybw_swig.UpgradeType_whatUses(self)
    __swig_destroy__ = _pybw_swig.delete_UpgradeType
    __del__ = lambda self : None;
UpgradeType_swigregister = _pybw_swig.UpgradeType_swigregister
UpgradeType_swigregister(UpgradeType)
Terran_Marine = cvar.Terran_Marine
Hero_Jim_Raynor_Marine = cvar.Hero_Jim_Raynor_Marine
Terran_Ghost = cvar.Terran_Ghost
Hero_Sarah_Kerrigan = cvar.Hero_Sarah_Kerrigan
Hero_Samir_Duran = cvar.Hero_Samir_Duran
Hero_Infested_Duran = cvar.Hero_Infested_Duran
Hero_Alexei_Stukov = cvar.Hero_Alexei_Stukov
Terran_Vulture = cvar.Terran_Vulture
Hero_Jim_Raynor_Vulture = cvar.Hero_Jim_Raynor_Vulture
Terran_Goliath = cvar.Terran_Goliath
Hero_Alan_Schezar = cvar.Hero_Alan_Schezar
Terran_Siege_Tank_Tank_Mode = cvar.Terran_Siege_Tank_Tank_Mode
Hero_Edmund_Duke_Tank_Mode = cvar.Hero_Edmund_Duke_Tank_Mode
Terran_SCV = cvar.Terran_SCV
Terran_Wraith = cvar.Terran_Wraith
Hero_Tom_Kazansky = cvar.Hero_Tom_Kazansky
Terran_Science_Vessel = cvar.Terran_Science_Vessel
Hero_Magellan = cvar.Hero_Magellan
Terran_Dropship = cvar.Terran_Dropship
Terran_Battlecruiser = cvar.Terran_Battlecruiser
Hero_Arcturus_Mengsk = cvar.Hero_Arcturus_Mengsk
Hero_Hyperion = cvar.Hero_Hyperion
Hero_Norad_II = cvar.Hero_Norad_II
Hero_Gerard_DuGalle = cvar.Hero_Gerard_DuGalle
Terran_Vulture_Spider_Mine = cvar.Terran_Vulture_Spider_Mine
Terran_Nuclear_Missile = cvar.Terran_Nuclear_Missile
Terran_Siege_Tank_Siege_Mode = cvar.Terran_Siege_Tank_Siege_Mode
Hero_Edmund_Duke_Siege_Mode = cvar.Hero_Edmund_Duke_Siege_Mode
Terran_Firebat = cvar.Terran_Firebat
Hero_Gui_Montag = cvar.Hero_Gui_Montag
Spell_Scanner_Sweep = cvar.Spell_Scanner_Sweep
Terran_Medic = cvar.Terran_Medic
Terran_Civilian = cvar.Terran_Civilian
Zerg_Larva = cvar.Zerg_Larva
Zerg_Egg = cvar.Zerg_Egg
Zerg_Zergling = cvar.Zerg_Zergling
Hero_Devouring_One = cvar.Hero_Devouring_One
Hero_Infested_Kerrigan = cvar.Hero_Infested_Kerrigan
Zerg_Hydralisk = cvar.Zerg_Hydralisk
Hero_Hunter_Killer = cvar.Hero_Hunter_Killer
Zerg_Ultralisk = cvar.Zerg_Ultralisk
Hero_Torrasque = cvar.Hero_Torrasque
Zerg_Broodling = cvar.Zerg_Broodling
Zerg_Drone = cvar.Zerg_Drone
Zerg_Overlord = cvar.Zerg_Overlord
Hero_Yggdrasill = cvar.Hero_Yggdrasill
Zerg_Mutalisk = cvar.Zerg_Mutalisk
Hero_Kukulza_Mutalisk = cvar.Hero_Kukulza_Mutalisk
Zerg_Guardian = cvar.Zerg_Guardian
Hero_Kukulza_Guardian = cvar.Hero_Kukulza_Guardian
Zerg_Queen = cvar.Zerg_Queen
Hero_Matriarch = cvar.Hero_Matriarch
Zerg_Defiler = cvar.Zerg_Defiler
Hero_Unclean_One = cvar.Hero_Unclean_One
Zerg_Scourge = cvar.Zerg_Scourge
Zerg_Infested_Terran = cvar.Zerg_Infested_Terran
Terran_Valkyrie = cvar.Terran_Valkyrie
Zerg_Cocoon = cvar.Zerg_Cocoon
Protoss_Corsair = cvar.Protoss_Corsair
Hero_Raszagal = cvar.Hero_Raszagal
Protoss_Dark_Templar = cvar.Protoss_Dark_Templar
Hero_Dark_Templar = cvar.Hero_Dark_Templar
Hero_Zeratul = cvar.Hero_Zeratul
Zerg_Devourer = cvar.Zerg_Devourer
Protoss_Dark_Archon = cvar.Protoss_Dark_Archon
Protoss_Probe = cvar.Protoss_Probe
Protoss_Zealot = cvar.Protoss_Zealot
Hero_Fenix_Zealot = cvar.Hero_Fenix_Zealot
Protoss_Dragoon = cvar.Protoss_Dragoon
Hero_Fenix_Dragoon = cvar.Hero_Fenix_Dragoon
Protoss_High_Templar = cvar.Protoss_High_Templar
Hero_Tassadar = cvar.Hero_Tassadar
Hero_Aldaris = cvar.Hero_Aldaris
Protoss_Archon = cvar.Protoss_Archon
Hero_Tassadar_Zeratul_Archon = cvar.Hero_Tassadar_Zeratul_Archon
Protoss_Shuttle = cvar.Protoss_Shuttle
Protoss_Scout = cvar.Protoss_Scout
Hero_Mojo = cvar.Hero_Mojo
Hero_Artanis = cvar.Hero_Artanis
Protoss_Arbiter = cvar.Protoss_Arbiter
Hero_Danimoth = cvar.Hero_Danimoth
Protoss_Carrier = cvar.Protoss_Carrier
Hero_Gantrithor = cvar.Hero_Gantrithor
Protoss_Interceptor = cvar.Protoss_Interceptor
Protoss_Reaver = cvar.Protoss_Reaver
Hero_Warbringer = cvar.Hero_Warbringer
Protoss_Observer = cvar.Protoss_Observer
Protoss_Scarab = cvar.Protoss_Scarab
Critter_Rhynadon = cvar.Critter_Rhynadon
Critter_Bengalaas = cvar.Critter_Bengalaas
Critter_Scantid = cvar.Critter_Scantid
Critter_Kakaru = cvar.Critter_Kakaru
Critter_Ragnasaur = cvar.Critter_Ragnasaur
Critter_Ursadon = cvar.Critter_Ursadon
Zerg_Lurker_Egg = cvar.Zerg_Lurker_Egg
Zerg_Lurker = cvar.Zerg_Lurker
Spell_Disruption_Web = cvar.Spell_Disruption_Web
Terran_Command_Center = cvar.Terran_Command_Center
Terran_Comsat_Station = cvar.Terran_Comsat_Station
Terran_Nuclear_Silo = cvar.Terran_Nuclear_Silo
Terran_Supply_Depot = cvar.Terran_Supply_Depot
Terran_Refinery = cvar.Terran_Refinery
Terran_Barracks = cvar.Terran_Barracks
Terran_Academy = cvar.Terran_Academy
Terran_Factory = cvar.Terran_Factory
Terran_Starport = cvar.Terran_Starport
Terran_Control_Tower = cvar.Terran_Control_Tower
Terran_Science_Facility = cvar.Terran_Science_Facility
Terran_Covert_Ops = cvar.Terran_Covert_Ops
Terran_Physics_Lab = cvar.Terran_Physics_Lab
Terran_Machine_Shop = cvar.Terran_Machine_Shop
Terran_Engineering_Bay = cvar.Terran_Engineering_Bay
Terran_Armory = cvar.Terran_Armory
Terran_Missile_Turret = cvar.Terran_Missile_Turret
Terran_Bunker = cvar.Terran_Bunker
Special_Crashed_Norad_II = cvar.Special_Crashed_Norad_II
Special_Ion_Cannon = cvar.Special_Ion_Cannon
Zerg_Infested_Command_Center = cvar.Zerg_Infested_Command_Center
Zerg_Hatchery = cvar.Zerg_Hatchery
Zerg_Lair = cvar.Zerg_Lair
Zerg_Hive = cvar.Zerg_Hive
Zerg_Nydus_Canal = cvar.Zerg_Nydus_Canal
Zerg_Hydralisk_Den = cvar.Zerg_Hydralisk_Den
Zerg_Defiler_Mound = cvar.Zerg_Defiler_Mound
Zerg_Greater_Spire = cvar.Zerg_Greater_Spire
Zerg_Queens_Nest = cvar.Zerg_Queens_Nest
Zerg_Evolution_Chamber = cvar.Zerg_Evolution_Chamber
Zerg_Ultralisk_Cavern = cvar.Zerg_Ultralisk_Cavern
Zerg_Spire = cvar.Zerg_Spire
Zerg_Spawning_Pool = cvar.Zerg_Spawning_Pool
Zerg_Creep_Colony = cvar.Zerg_Creep_Colony
Zerg_Spore_Colony = cvar.Zerg_Spore_Colony
Zerg_Sunken_Colony = cvar.Zerg_Sunken_Colony
Special_Overmind_With_Shell = cvar.Special_Overmind_With_Shell
Special_Overmind = cvar.Special_Overmind
Zerg_Extractor = cvar.Zerg_Extractor
Special_Mature_Chrysalis = cvar.Special_Mature_Chrysalis
Special_Cerebrate = cvar.Special_Cerebrate
Special_Cerebrate_Daggoth = cvar.Special_Cerebrate_Daggoth
Protoss_Nexus = cvar.Protoss_Nexus
Protoss_Robotics_Facility = cvar.Protoss_Robotics_Facility
Protoss_Pylon = cvar.Protoss_Pylon
Protoss_Assimilator = cvar.Protoss_Assimilator
Protoss_Observatory = cvar.Protoss_Observatory
Protoss_Gateway = cvar.Protoss_Gateway
Protoss_Photon_Cannon = cvar.Protoss_Photon_Cannon
Protoss_Citadel_of_Adun = cvar.Protoss_Citadel_of_Adun
Protoss_Cybernetics_Core = cvar.Protoss_Cybernetics_Core
Protoss_Templar_Archives = cvar.Protoss_Templar_Archives
Protoss_Forge = cvar.Protoss_Forge
Protoss_Stargate = cvar.Protoss_Stargate
Special_Stasis_Cell_Prison = cvar.Special_Stasis_Cell_Prison
Protoss_Fleet_Beacon = cvar.Protoss_Fleet_Beacon
Protoss_Arbiter_Tribunal = cvar.Protoss_Arbiter_Tribunal
Protoss_Robotics_Support_Bay = cvar.Protoss_Robotics_Support_Bay
Protoss_Shield_Battery = cvar.Protoss_Shield_Battery
Special_Khaydarin_Crystal_Form = cvar.Special_Khaydarin_Crystal_Form
Special_Protoss_Temple = cvar.Special_Protoss_Temple
Special_XelNaga_Temple = cvar.Special_XelNaga_Temple
Resource_Mineral_Field = cvar.Resource_Mineral_Field
Resource_Vespene_Geyser = cvar.Resource_Vespene_Geyser
Special_Warp_Gate = cvar.Special_Warp_Gate
Special_Psi_Disrupter = cvar.Special_Psi_Disrupter
Special_Power_Generator = cvar.Special_Power_Generator
Special_Overmind_Cocoon = cvar.Special_Overmind_Cocoon
Special_Zerg_Beacon = cvar.Special_Zerg_Beacon
Special_Terran_Beacon = cvar.Special_Terran_Beacon
Special_Protoss_Beacon = cvar.Special_Protoss_Beacon
Special_Zerg_Flag_Beacon = cvar.Special_Zerg_Flag_Beacon
Special_Terran_Flag_Beacon = cvar.Special_Terran_Flag_Beacon
Special_Protoss_Flag_Beacon = cvar.Special_Protoss_Flag_Beacon
Spell_Dark_Swarm = cvar.Spell_Dark_Swarm
Powerup_Uraj_Crystal = cvar.Powerup_Uraj_Crystal
Powerup_Khalis_Crystal = cvar.Powerup_Khalis_Crystal
Powerup_Flag = cvar.Powerup_Flag
Powerup_Young_Chrysalis = cvar.Powerup_Young_Chrysalis
Powerup_Psi_Emitter = cvar.Powerup_Psi_Emitter
Powerup_Data_Disk = cvar.Powerup_Data_Disk
Powerup_Khaydarin_Crystal = cvar.Powerup_Khaydarin_Crystal
UnitTypes_None = cvar.UnitTypes_None
UnitTypes_Unknown = cvar.UnitTypes_Unknown


def getUpgradeType(*args):
  return _pybw_swig.getUpgradeType(*args)
getUpgradeType = _pybw_swig.getUpgradeType

def allUpgradeTypes():
  return _pybw_swig.allUpgradeTypes()
allUpgradeTypes = _pybw_swig.allUpgradeTypes
class WeaponType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WeaponType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WeaponType, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_WeaponType(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _pybw_swig.WeaponType___eq__(self, *args)
    def __ne__(self, *args): return _pybw_swig.WeaponType___ne__(self, *args)
    def __lt__(self, *args): return _pybw_swig.WeaponType___lt__(self, *args)
    def getID(self): return _pybw_swig.WeaponType_getID(self)
    def getName(self): return _pybw_swig.WeaponType_getName(self)
    def getTech(self): return _pybw_swig.WeaponType_getTech(self)
    def whatUses(self): return _pybw_swig.WeaponType_whatUses(self)
    def damageAmount(self): return _pybw_swig.WeaponType_damageAmount(self)
    def damageBonus(self): return _pybw_swig.WeaponType_damageBonus(self)
    def damageCooldown(self): return _pybw_swig.WeaponType_damageCooldown(self)
    def damageFactor(self): return _pybw_swig.WeaponType_damageFactor(self)
    def upgradeType(self): return _pybw_swig.WeaponType_upgradeType(self)
    def damageType(self): return _pybw_swig.WeaponType_damageType(self)
    def explosionType(self): return _pybw_swig.WeaponType_explosionType(self)
    def minRange(self): return _pybw_swig.WeaponType_minRange(self)
    def maxRange(self): return _pybw_swig.WeaponType_maxRange(self)
    def innerSplashRadius(self): return _pybw_swig.WeaponType_innerSplashRadius(self)
    def medianSplashRadius(self): return _pybw_swig.WeaponType_medianSplashRadius(self)
    def outerSplashRadius(self): return _pybw_swig.WeaponType_outerSplashRadius(self)
    def targetsAir(self): return _pybw_swig.WeaponType_targetsAir(self)
    def targetsGround(self): return _pybw_swig.WeaponType_targetsGround(self)
    def targetsMechanical(self): return _pybw_swig.WeaponType_targetsMechanical(self)
    def targetsOrganic(self): return _pybw_swig.WeaponType_targetsOrganic(self)
    def targetsNonBuilding(self): return _pybw_swig.WeaponType_targetsNonBuilding(self)
    def targetsNonRobotic(self): return _pybw_swig.WeaponType_targetsNonRobotic(self)
    def targetsTerrain(self): return _pybw_swig.WeaponType_targetsTerrain(self)
    def targetsOrgOrMech(self): return _pybw_swig.WeaponType_targetsOrgOrMech(self)
    def targetsOwn(self): return _pybw_swig.WeaponType_targetsOwn(self)
    __swig_destroy__ = _pybw_swig.delete_WeaponType
    __del__ = lambda self : None;
WeaponType_swigregister = _pybw_swig.WeaponType_swigregister
WeaponType_swigregister(WeaponType)
Terran_Infantry_Armor = cvar.Terran_Infantry_Armor
Terran_Vehicle_Plating = cvar.Terran_Vehicle_Plating
Terran_Ship_Plating = cvar.Terran_Ship_Plating
Zerg_Carapace = cvar.Zerg_Carapace
Zerg_Flyer_Carapace = cvar.Zerg_Flyer_Carapace
Protoss_Ground_Armor = cvar.Protoss_Ground_Armor
Protoss_Air_Armor = cvar.Protoss_Air_Armor
Terran_Infantry_Weapons = cvar.Terran_Infantry_Weapons
Terran_Vehicle_Weapons = cvar.Terran_Vehicle_Weapons
Terran_Ship_Weapons = cvar.Terran_Ship_Weapons
Zerg_Melee_Attacks = cvar.Zerg_Melee_Attacks
Zerg_Missile_Attacks = cvar.Zerg_Missile_Attacks
Zerg_Flyer_Attacks = cvar.Zerg_Flyer_Attacks
Protoss_Ground_Weapons = cvar.Protoss_Ground_Weapons
Protoss_Air_Weapons = cvar.Protoss_Air_Weapons
Protoss_Plasma_Shields = cvar.Protoss_Plasma_Shields
U_238_Shells = cvar.U_238_Shells
Ion_Thrusters = cvar.Ion_Thrusters
Titan_Reactor = cvar.Titan_Reactor
Ocular_Implants = cvar.Ocular_Implants
Moebius_Reactor = cvar.Moebius_Reactor
Apollo_Reactor = cvar.Apollo_Reactor
Colossus_Reactor = cvar.Colossus_Reactor
Ventral_Sacs = cvar.Ventral_Sacs
Antennae = cvar.Antennae
Pneumatized_Carapace = cvar.Pneumatized_Carapace
Metabolic_Boost = cvar.Metabolic_Boost
Adrenal_Glands = cvar.Adrenal_Glands
Muscular_Augments = cvar.Muscular_Augments
Grooved_Spines = cvar.Grooved_Spines
Gamete_Meiosis = cvar.Gamete_Meiosis
Metasynaptic_Node = cvar.Metasynaptic_Node
Singularity_Charge = cvar.Singularity_Charge
Leg_Enhancements = cvar.Leg_Enhancements
Scarab_Damage = cvar.Scarab_Damage
Reaver_Capacity = cvar.Reaver_Capacity
Gravitic_Drive = cvar.Gravitic_Drive
Sensor_Array = cvar.Sensor_Array
Gravitic_Boosters = cvar.Gravitic_Boosters
Khaydarin_Amulet = cvar.Khaydarin_Amulet
Apial_Sensors = cvar.Apial_Sensors
Gravitic_Thrusters = cvar.Gravitic_Thrusters
Carrier_Capacity = cvar.Carrier_Capacity
Khaydarin_Core = cvar.Khaydarin_Core
Argus_Jewel = cvar.Argus_Jewel
Argus_Talisman = cvar.Argus_Talisman
Caduceus_Reactor = cvar.Caduceus_Reactor
Chitinous_Plating = cvar.Chitinous_Plating
Anabolic_Synthesis = cvar.Anabolic_Synthesis
Charon_Boosters = cvar.Charon_Boosters
UpgradeTypes_None = cvar.UpgradeTypes_None
UpgradeTypes_Unknown = cvar.UpgradeTypes_Unknown


def getWeaponType(*args):
  return _pybw_swig.getWeaponType(*args)
getWeaponType = _pybw_swig.getWeaponType

def allWeaponTypes():
  return _pybw_swig.allWeaponTypes()
allWeaponTypes = _pybw_swig.allWeaponTypes

def normalWeaponTypes():
  return _pybw_swig.normalWeaponTypes()
normalWeaponTypes = _pybw_swig.normalWeaponTypes

def specialWeaponTypes():
  return _pybw_swig.specialWeaponTypes()
specialWeaponTypes = _pybw_swig.specialWeaponTypes
class BaseLocation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseLocation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseLocation, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getPosition(self): return _pybw_swig.BaseLocation_getPosition(self)
    def getTilePosition(self): return _pybw_swig.BaseLocation_getTilePosition(self)
    def getRegion(self): return _pybw_swig.BaseLocation_getRegion(self)
    def minerals(self): return _pybw_swig.BaseLocation_minerals(self)
    def gas(self): return _pybw_swig.BaseLocation_gas(self)
    def getGroundDistance(self, *args): return _pybw_swig.BaseLocation_getGroundDistance(self, *args)
    def getAirDistance(self, *args): return _pybw_swig.BaseLocation_getAirDistance(self, *args)
    def isIsland(self): return _pybw_swig.BaseLocation_isIsland(self)
    def isMineralOnly(self): return _pybw_swig.BaseLocation_isMineralOnly(self)
    def isStartLocation(self): return _pybw_swig.BaseLocation_isStartLocation(self)
    def getMinerals(self): return _pybw_swig.BaseLocation_getMinerals(self)
    def getStaticMinerals(self): return _pybw_swig.BaseLocation_getStaticMinerals(self)
    def getGeysers(self): return _pybw_swig.BaseLocation_getGeysers(self)
    __swig_destroy__ = _pybw_swig.delete_BaseLocation
    __del__ = lambda self : None;
BaseLocation_swigregister = _pybw_swig.BaseLocation_swigregister
BaseLocation_swigregister(BaseLocation)
Gauss_Rifle = cvar.Gauss_Rifle
Gauss_Rifle_Jim_Raynor = cvar.Gauss_Rifle_Jim_Raynor
C_10_Canister_Rifle = cvar.C_10_Canister_Rifle
C_10_Canister_Rifle_Sarah_Kerrigan = cvar.C_10_Canister_Rifle_Sarah_Kerrigan
C_10_Canister_Rifle_Samir_Duran = cvar.C_10_Canister_Rifle_Samir_Duran
C_10_Canister_Rifle_Infested_Duran = cvar.C_10_Canister_Rifle_Infested_Duran
C_10_Canister_Rifle_Alexei_Stukov = cvar.C_10_Canister_Rifle_Alexei_Stukov
WeaponTypes_Fragmentation_Grenade = cvar.WeaponTypes_Fragmentation_Grenade
Fragmentation_Grenade_Jim_Raynor = cvar.Fragmentation_Grenade_Jim_Raynor
WeaponTypes_Spider_Mines = cvar.WeaponTypes_Spider_Mines
Twin_Autocannons = cvar.Twin_Autocannons
Twin_Autocannons_Alan_Schezar = cvar.Twin_Autocannons_Alan_Schezar
Hellfire_Missile_Pack = cvar.Hellfire_Missile_Pack
Hellfire_Missile_Pack_Alan_Schezar = cvar.Hellfire_Missile_Pack_Alan_Schezar
Arclite_Cannon = cvar.Arclite_Cannon
Arclite_Cannon_Edmund_Duke = cvar.Arclite_Cannon_Edmund_Duke
Fusion_Cutter = cvar.Fusion_Cutter
WeaponTypes_Gemini_Missiles = cvar.WeaponTypes_Gemini_Missiles
Gemini_Missiles_Tom_Kazansky = cvar.Gemini_Missiles_Tom_Kazansky
WeaponTypes_Burst_Lasers = cvar.WeaponTypes_Burst_Lasers
Burst_Lasers_Tom_Kazansky = cvar.Burst_Lasers_Tom_Kazansky
ATS_Laser_Battery = cvar.ATS_Laser_Battery
ATS_Laser_Battery_Hero = cvar.ATS_Laser_Battery_Hero
ATS_Laser_Battery_Hyperion = cvar.ATS_Laser_Battery_Hyperion
ATA_Laser_Battery = cvar.ATA_Laser_Battery
ATA_Laser_Battery_Hero = cvar.ATA_Laser_Battery_Hero
ATA_Laser_Battery_Hyperion = cvar.ATA_Laser_Battery_Hyperion
Flame_Thrower = cvar.Flame_Thrower
Flame_Thrower_Gui_Montag = cvar.Flame_Thrower_Gui_Montag
Arclite_Shock_Cannon = cvar.Arclite_Shock_Cannon
Arclite_Shock_Cannon_Edmund_Duke = cvar.Arclite_Shock_Cannon_Edmund_Duke
WeaponTypes_Longbolt_Missile = cvar.WeaponTypes_Longbolt_Missile
Claws = cvar.Claws
Claws_Devouring_One = cvar.Claws_Devouring_One
Claws_Infested_Kerrigan = cvar.Claws_Infested_Kerrigan
Needle_Spines = cvar.Needle_Spines
Needle_Spines_Hunter_Killer = cvar.Needle_Spines_Hunter_Killer
Kaiser_Blades = cvar.Kaiser_Blades
Kaiser_Blades_Torrasque = cvar.Kaiser_Blades_Torrasque
Toxic_Spores = cvar.Toxic_Spores
Spines = cvar.Spines
WeaponTypes_Acid_Spore = cvar.WeaponTypes_Acid_Spore
Acid_Spore_Kukulza = cvar.Acid_Spore_Kukulza
WeaponTypes_Glave_Wurm = cvar.WeaponTypes_Glave_Wurm
Glave_Wurm_Kukulza = cvar.Glave_Wurm_Kukulza
WeaponTypes_Seeker_Spores = cvar.WeaponTypes_Seeker_Spores
Subterranean_Tentacle = cvar.Subterranean_Tentacle
Suicide_Infested_Terran = cvar.Suicide_Infested_Terran
Suicide_Scourge = cvar.Suicide_Scourge
Particle_Beam = cvar.Particle_Beam
Psi_Blades = cvar.Psi_Blades
Psi_Blades_Fenix = cvar.Psi_Blades_Fenix
WeaponTypes_Phase_Disruptor = cvar.WeaponTypes_Phase_Disruptor
Phase_Disruptor_Fenix = cvar.Phase_Disruptor_Fenix
Psi_Assault = cvar.Psi_Assault
Psionic_Shockwave = cvar.Psionic_Shockwave
Psionic_Shockwave_TZ_Archon = cvar.Psionic_Shockwave_TZ_Archon
Dual_Photon_Blasters = cvar.Dual_Photon_Blasters
Dual_Photon_Blasters_Mojo = cvar.Dual_Photon_Blasters_Mojo
Dual_Photon_Blasters_Artanis = cvar.Dual_Photon_Blasters_Artanis
Anti_Matter_Missiles = cvar.Anti_Matter_Missiles
Anti_Matter_Missiles_Mojo = cvar.Anti_Matter_Missiles_Mojo
Anti_Matter_Missiles_Artanis = cvar.Anti_Matter_Missiles_Artanis
Phase_Disruptor_Cannon = cvar.Phase_Disruptor_Cannon
Phase_Disruptor_Cannon_Danimoth = cvar.Phase_Disruptor_Cannon_Danimoth
WeaponTypes_Pulse_Cannon = cvar.WeaponTypes_Pulse_Cannon
STS_Photon_Cannon = cvar.STS_Photon_Cannon
STA_Photon_Cannon = cvar.STA_Photon_Cannon
Scarab = cvar.Scarab
WeaponTypes_Neutron_Flare = cvar.WeaponTypes_Neutron_Flare
WeaponTypes_Halo_Rockets = cvar.WeaponTypes_Halo_Rockets
WeaponTypes_Corrosive_Acid = cvar.WeaponTypes_Corrosive_Acid
WeaponTypes_Subterranean_Spines = cvar.WeaponTypes_Subterranean_Spines
Warp_Blades = cvar.Warp_Blades
Warp_Blades_Hero = cvar.Warp_Blades_Hero
Warp_Blades_Zeratul = cvar.Warp_Blades_Zeratul
WeaponTypes_Yamato_Gun = cvar.WeaponTypes_Yamato_Gun
WeaponTypes_Nuclear_Strike = cvar.WeaponTypes_Nuclear_Strike
WeaponTypes_Lockdown = cvar.WeaponTypes_Lockdown
WeaponTypes_EMP_Shockwave = cvar.WeaponTypes_EMP_Shockwave
WeaponTypes_Irradiate = cvar.WeaponTypes_Irradiate
WeaponTypes_Parasite = cvar.WeaponTypes_Parasite
WeaponTypes_Spawn_Broodlings = cvar.WeaponTypes_Spawn_Broodlings
WeaponTypes_Ensnare = cvar.WeaponTypes_Ensnare
WeaponTypes_Dark_Swarm = cvar.WeaponTypes_Dark_Swarm
WeaponTypes_Plague = cvar.WeaponTypes_Plague
WeaponTypes_Consume = cvar.WeaponTypes_Consume
WeaponTypes_Stasis_Field = cvar.WeaponTypes_Stasis_Field
WeaponTypes_Psionic_Storm = cvar.WeaponTypes_Psionic_Storm
WeaponTypes_Disruption_Web = cvar.WeaponTypes_Disruption_Web
WeaponTypes_Restoration = cvar.WeaponTypes_Restoration
WeaponTypes_Mind_Control = cvar.WeaponTypes_Mind_Control
WeaponTypes_Feedback = cvar.WeaponTypes_Feedback
WeaponTypes_Optical_Flare = cvar.WeaponTypes_Optical_Flare
WeaponTypes_Maelstrom = cvar.WeaponTypes_Maelstrom
WeaponTypes_None = cvar.WeaponTypes_None
WeaponTypes_Unknown = cvar.WeaponTypes_Unknown

class Chokepoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Chokepoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Chokepoint, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getRegions(self): return _pybw_swig.Chokepoint_getRegions(self)
    def getSides(self): return _pybw_swig.Chokepoint_getSides(self)
    def getCenter(self): return _pybw_swig.Chokepoint_getCenter(self)
    def getWidth(self): return _pybw_swig.Chokepoint_getWidth(self)
    __swig_destroy__ = _pybw_swig.delete_Chokepoint
    __del__ = lambda self : None;
Chokepoint_swigregister = _pybw_swig.Chokepoint_swigregister
Chokepoint_swigregister(Chokepoint)

class TA_Polygon(PositionVector):
    __swig_setmethods__ = {}
    for _s in [PositionVector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TA_Polygon, name, value)
    __swig_getmethods__ = {}
    for _s in [PositionVector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TA_Polygon, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_TA_Polygon(*args)
        try: self.this.append(this)
        except: self.this = this
    def getArea(self): return _pybw_swig.TA_Polygon_getArea(self)
    def getPerimeter(self): return _pybw_swig.TA_Polygon_getPerimeter(self)
    def getCenter(self): return _pybw_swig.TA_Polygon_getCenter(self)
    def isInside(self, *args): return _pybw_swig.TA_Polygon_isInside(self, *args)
    def getNearestPoint(self, *args): return _pybw_swig.TA_Polygon_getNearestPoint(self, *args)
    def getHoles(self): return _pybw_swig.TA_Polygon_getHoles(self)
    __swig_setmethods__["holes"] = _pybw_swig.TA_Polygon_holes_set
    __swig_getmethods__["holes"] = _pybw_swig.TA_Polygon_holes_get
    if _newclass:holes = _swig_property(_pybw_swig.TA_Polygon_holes_get, _pybw_swig.TA_Polygon_holes_set)
    __swig_destroy__ = _pybw_swig.delete_TA_Polygon
    __del__ = lambda self : None;
TA_Polygon_swigregister = _pybw_swig.TA_Polygon_swigregister
TA_Polygon_swigregister(TA_Polygon)

class Region(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Region, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Region, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getPolygon(self): return _pybw_swig.Region_getPolygon(self)
    def getCenter(self): return _pybw_swig.Region_getCenter(self)
    def isReachable(self, *args): return _pybw_swig.Region_isReachable(self, *args)
    def getReachableRegions(self): return _pybw_swig.Region_getReachableRegions(self)
    def getChokepoints(self): return _pybw_swig.Region_getChokepoints(self)
    def getBaseLocations(self): return _pybw_swig.Region_getBaseLocations(self)
    __swig_destroy__ = _pybw_swig.delete_Region
    __del__ = lambda self : None;
Region_swigregister = _pybw_swig.Region_swigregister
Region_swigregister(Region)



