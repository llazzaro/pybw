# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pybw_swig', [dirname(__file__)])
        except ImportError:
            import _pybw_swig
            return _pybw_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_pybw_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pybw_swig = swig_import_helper()
    del swig_import_helper
else:
    import _pybw_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class UnitSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnitSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_UnitSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def __iter__(self): return _pybw_swig.UnitSet___iter__(self)
    def __len__(self): return _pybw_swig.UnitSet___len__(self)
    def next(self): return _pybw_swig.UnitSet_next(self)
    __swig_destroy__ = _pybw_swig.delete_UnitSet
    __del__ = lambda self : None;
UnitSet_swigregister = _pybw_swig.UnitSet_swigregister
UnitSet_swigregister(UnitSet)

class PlayerSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlayerSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PlayerSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_PlayerSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def __iter__(self): return _pybw_swig.PlayerSet___iter__(self)
    def __len__(self): return _pybw_swig.PlayerSet___len__(self)
    def next(self): return _pybw_swig.PlayerSet_next(self)
    __swig_destroy__ = _pybw_swig.delete_PlayerSet
    __del__ = lambda self : None;
PlayerSet_swigregister = _pybw_swig.PlayerSet_swigregister
PlayerSet_swigregister(PlayerSet)

class ForceSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForceSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ForceSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_ForceSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def __iter__(self): return _pybw_swig.ForceSet___iter__(self)
    def __len__(self): return _pybw_swig.ForceSet___len__(self)
    def next(self): return _pybw_swig.ForceSet_next(self)
    __swig_destroy__ = _pybw_swig.delete_ForceSet
    __del__ = lambda self : None;
ForceSet_swigregister = _pybw_swig.ForceSet_swigregister
ForceSet_swigregister(ForceSet)

class TilePositionSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TilePositionSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TilePositionSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_TilePositionSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def __iter__(self): return _pybw_swig.TilePositionSet___iter__(self)
    def __len__(self): return _pybw_swig.TilePositionSet___len__(self)
    def next(self): return _pybw_swig.TilePositionSet_next(self)
    __swig_destroy__ = _pybw_swig.delete_TilePositionSet
    __del__ = lambda self : None;
TilePositionSet_swigregister = _pybw_swig.TilePositionSet_swigregister
TilePositionSet_swigregister(TilePositionSet)

class AIModule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AIModule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AIModule, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pybw_swig.new_AIModule()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybw_swig.delete_AIModule
    __del__ = lambda self : None;
    def onStart(self): return _pybw_swig.AIModule_onStart(self)
    def onEnd(self, *args): return _pybw_swig.AIModule_onEnd(self, *args)
    def onFrame(self): return _pybw_swig.AIModule_onFrame(self)
    def onSendText(self, *args): return _pybw_swig.AIModule_onSendText(self, *args)
    def onPlayerLeft(self, *args): return _pybw_swig.AIModule_onPlayerLeft(self, *args)
    def onNukeDetect(self, *args): return _pybw_swig.AIModule_onNukeDetect(self, *args)
    def onUnitCreate(self, *args): return _pybw_swig.AIModule_onUnitCreate(self, *args)
    def onUnitDestroy(self, *args): return _pybw_swig.AIModule_onUnitDestroy(self, *args)
    def onUnitMorph(self, *args): return _pybw_swig.AIModule_onUnitMorph(self, *args)
    def onUnitShow(self, *args): return _pybw_swig.AIModule_onUnitShow(self, *args)
    def onUnitHide(self, *args): return _pybw_swig.AIModule_onUnitHide(self, *args)
    def onUnitRenegade(self, *args): return _pybw_swig.AIModule_onUnitRenegade(self, *args)
AIModule_swigregister = _pybw_swig.AIModule_swigregister
AIModule_swigregister(AIModule)

class Color(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Color, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Color, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_Color(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _pybw_swig.Color___eq__(self, *args)
    def __ne__(self, *args): return _pybw_swig.Color___ne__(self, *args)
    def __lt__(self, *args): return _pybw_swig.Color___lt__(self, *args)
    def getID(self): return _pybw_swig.Color_getID(self)
    def red(self): return _pybw_swig.Color_red(self)
    def green(self): return _pybw_swig.Color_green(self)
    def blue(self): return _pybw_swig.Color_blue(self)
    __swig_destroy__ = _pybw_swig.delete_Color
    __del__ = lambda self : None;
Color_swigregister = _pybw_swig.Color_swigregister
Color_swigregister(Color)

Screen = _pybw_swig.Screen
Map = _pybw_swig.Map
Mouse = _pybw_swig.Mouse
class DamageType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DamageType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DamageType, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_DamageType(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _pybw_swig.DamageType___eq__(self, *args)
    def __ne__(self, *args): return _pybw_swig.DamageType___ne__(self, *args)
    def __lt__(self, *args): return _pybw_swig.DamageType___lt__(self, *args)
    def getID(self): return _pybw_swig.DamageType_getID(self)
    def getName(self): return _pybw_swig.DamageType_getName(self)
    __swig_destroy__ = _pybw_swig.delete_DamageType
    __del__ = lambda self : None;
DamageType_swigregister = _pybw_swig.DamageType_swigregister
DamageType_swigregister(DamageType)
cvar = _pybw_swig.cvar
Red = cvar.Red
Green = cvar.Green
Blue = cvar.Blue
Yellow = cvar.Yellow
Cyan = cvar.Cyan
Purple = cvar.Purple
Orange = cvar.Orange
Black = cvar.Black
White = cvar.White
Grey = cvar.Grey
TILE_SIZE = cvar.TILE_SIZE
PYLON_X_RADIUS = cvar.PYLON_X_RADIUS
PYLON_Y_RADIUS = cvar.PYLON_Y_RADIUS


def getDamageType(*args):
  return _pybw_swig.getDamageType(*args)
getDamageType = _pybw_swig.getDamageType

def allDamageTypes():
  return _pybw_swig.allDamageTypes()
allDamageTypes = _pybw_swig.allDamageTypes
class Error(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Error, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Error, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_Error(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _pybw_swig.Error___eq__(self, *args)
    def __ne__(self, *args): return _pybw_swig.Error___ne__(self, *args)
    def __lt__(self, *args): return _pybw_swig.Error___lt__(self, *args)
    def getID(self): return _pybw_swig.Error_getID(self)
    def toString(self): return _pybw_swig.Error_toString(self)
    __swig_destroy__ = _pybw_swig.delete_Error
    __del__ = lambda self : None;
Error_swigregister = _pybw_swig.Error_swigregister
Error_swigregister(Error)
DamageTypes_Independent = cvar.DamageTypes_Independent
Explosive = cvar.Explosive
Concussive = cvar.Concussive
DamageTypes_Normal = cvar.DamageTypes_Normal
Ignore_Armor = cvar.Ignore_Armor
DamageTypes_None = cvar.DamageTypes_None
DamageTypes_Unknown = cvar.DamageTypes_Unknown


def getError(*args):
  return _pybw_swig.getError(*args)
getError = _pybw_swig.getError

def allErrors():
  return _pybw_swig.allErrors()
allErrors = _pybw_swig.allErrors
class ExplosionType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExplosionType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExplosionType, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_ExplosionType(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _pybw_swig.ExplosionType___eq__(self, *args)
    def __ne__(self, *args): return _pybw_swig.ExplosionType___ne__(self, *args)
    def __lt__(self, *args): return _pybw_swig.ExplosionType___lt__(self, *args)
    def getID(self): return _pybw_swig.ExplosionType_getID(self)
    def getName(self): return _pybw_swig.ExplosionType_getName(self)
    __swig_destroy__ = _pybw_swig.delete_ExplosionType
    __del__ = lambda self : None;
ExplosionType_swigregister = _pybw_swig.ExplosionType_swigregister
ExplosionType_swigregister(ExplosionType)
Unit_Does_Not_Exist = cvar.Unit_Does_Not_Exist
Unit_Not_Visible = cvar.Unit_Not_Visible
Unit_Not_Owned = cvar.Unit_Not_Owned
Unit_Busy = cvar.Unit_Busy
Incompatible_UnitType = cvar.Incompatible_UnitType
Incompatible_TechType = cvar.Incompatible_TechType
Already_Researched = cvar.Already_Researched
Fully_Upgraded = cvar.Fully_Upgraded
Insufficient_Minerals = cvar.Insufficient_Minerals
Insufficient_Gas = cvar.Insufficient_Gas
Insufficient_Supply = cvar.Insufficient_Supply
Insufficient_Energy = cvar.Insufficient_Energy
Insufficient_Tech = cvar.Insufficient_Tech
Insufficient_Ammo = cvar.Insufficient_Ammo
Insufficient_Space = cvar.Insufficient_Space
Unbuildable_Location = cvar.Unbuildable_Location
Out_Of_Range = cvar.Out_Of_Range
Unable_To_Hit = cvar.Unable_To_Hit
Access_Denied = cvar.Access_Denied
Errors_None = cvar.Errors_None
Errors_Unknown = cvar.Errors_Unknown


def getExplosionType(*args):
  return _pybw_swig.getExplosionType(*args)
getExplosionType = _pybw_swig.getExplosionType

def allExplosionTypes():
  return _pybw_swig.allExplosionTypes()
allExplosionTypes = _pybw_swig.allExplosionTypes
CompleteMapInformation = _pybw_swig.CompleteMapInformation
UserInput = _pybw_swig.UserInput
class Force(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Force, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Force, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getName(self): return _pybw_swig.Force_getName(self)
    def getPlayers(self): return _pybw_swig.Force_getPlayers(self)
    __swig_destroy__ = _pybw_swig.delete_Force
    __del__ = lambda self : None;
Force_swigregister = _pybw_swig.Force_swigregister
Force_swigregister(Force)
ExplosionTypes_None = cvar.ExplosionTypes_None
ExplosionTypes_Normal = cvar.ExplosionTypes_Normal
Radial_Splash = cvar.Radial_Splash
Enemy_Splash = cvar.Enemy_Splash
ExplosionTypes_Lockdown = cvar.ExplosionTypes_Lockdown
Nuclear_Missile = cvar.Nuclear_Missile
ExplosionTypes_Parasite = cvar.ExplosionTypes_Parasite
Broodlings = cvar.Broodlings
ExplosionTypes_EMP_Shockwave = cvar.ExplosionTypes_EMP_Shockwave
ExplosionTypes_Irradiate = cvar.ExplosionTypes_Irradiate
ExplosionTypes_Ensnare = cvar.ExplosionTypes_Ensnare
ExplosionTypes_Plague = cvar.ExplosionTypes_Plague
ExplosionTypes_Stasis_Field = cvar.ExplosionTypes_Stasis_Field
ExplosionTypes_Dark_Swarm = cvar.ExplosionTypes_Dark_Swarm
ExplosionTypes_Consume = cvar.ExplosionTypes_Consume
ExplosionTypes_Yamato_Gun = cvar.ExplosionTypes_Yamato_Gun
ExplosionTypes_Restoration = cvar.ExplosionTypes_Restoration
ExplosionTypes_Disruption_Web = cvar.ExplosionTypes_Disruption_Web
ExplosionTypes_Corrosive_Acid = cvar.ExplosionTypes_Corrosive_Acid
ExplosionTypes_Mind_Control = cvar.ExplosionTypes_Mind_Control
ExplosionTypes_Feedback = cvar.ExplosionTypes_Feedback
ExplosionTypes_Optical_Flare = cvar.ExplosionTypes_Optical_Flare
ExplosionTypes_Maelstrom = cvar.ExplosionTypes_Maelstrom
Air_Splash = cvar.Air_Splash
ExplosionTypes_Unknown = cvar.ExplosionTypes_Unknown
FLAG_COUNT = cvar.FLAG_COUNT

class Game(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Game, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Game, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getLatency(self): return _pybw_swig.Game_getLatency(self)
    def getFrameCount(self): return _pybw_swig.Game_getFrameCount(self)
    def getMouseX(self): return _pybw_swig.Game_getMouseX(self)
    def getMouseY(self): return _pybw_swig.Game_getMouseY(self)
    def getScreenX(self): return _pybw_swig.Game_getScreenX(self)
    def getScreenY(self): return _pybw_swig.Game_getScreenY(self)
    def isFlagEnabled(self, *args): return _pybw_swig.Game_isFlagEnabled(self, *args)
    def enableFlag(self, *args): return _pybw_swig.Game_enableFlag(self, *args)
    def getLastError(self): return _pybw_swig.Game_getLastError(self)
    def mapWidth(self): return _pybw_swig.Game_mapWidth(self)
    def mapHeight(self): return _pybw_swig.Game_mapHeight(self)
    def mapFilename(self): return _pybw_swig.Game_mapFilename(self)
    def mapName(self): return _pybw_swig.Game_mapName(self)
    def buildable(self, *args): return _pybw_swig.Game_buildable(self, *args)
    def walkable(self, *args): return _pybw_swig.Game_walkable(self, *args)
    def visible(self, *args): return _pybw_swig.Game_visible(self, *args)
    def hasCreep(self, *args): return _pybw_swig.Game_hasCreep(self, *args)
    def hasPower(self, *args): return _pybw_swig.Game_hasPower(self, *args)
    def canMake(self, *args): return _pybw_swig.Game_canMake(self, *args)
    def canResearch(self, *args): return _pybw_swig.Game_canResearch(self, *args)
    def canUpgrade(self, *args): return _pybw_swig.Game_canUpgrade(self, *args)
    def groundHeight(self, *args): return _pybw_swig.Game_groundHeight(self, *args)
    def getMapHash(self): return _pybw_swig.Game_getMapHash(self)
    def printf(self, *args): return _pybw_swig.Game_printf(self, *args)
    def sendText(self, *args): return _pybw_swig.Game_sendText(self, *args)
    def changeRace(self, *args): return _pybw_swig.Game_changeRace(self, *args)
    def isMultiplayer(self): return _pybw_swig.Game_isMultiplayer(self)
    def isPaused(self): return _pybw_swig.Game_isPaused(self)
    def isReplay(self): return _pybw_swig.Game_isReplay(self)
    def startGame(self): return _pybw_swig.Game_startGame(self)
    def pauseGame(self): return _pybw_swig.Game_pauseGame(self)
    def resumeGame(self): return _pybw_swig.Game_resumeGame(self)
    def leaveGame(self): return _pybw_swig.Game_leaveGame(self)
    def restartGame(self): return _pybw_swig.Game_restartGame(self)
    def setLocalSpeed(self, *args): return _pybw_swig.Game_setLocalSpeed(self, *args)
    def self(self): return _pybw_swig.Game_self(self)
    def enemy(self): return _pybw_swig.Game_enemy(self)
    def drawText(self, *args): return _pybw_swig.Game_drawText(self, *args)
    def drawTextMap(self, *args): return _pybw_swig.Game_drawTextMap(self, *args)
    def drawTextMouse(self, *args): return _pybw_swig.Game_drawTextMouse(self, *args)
    def drawTextScreen(self, *args): return _pybw_swig.Game_drawTextScreen(self, *args)
    def drawBox(self, *args): return _pybw_swig.Game_drawBox(self, *args)
    def drawBoxMap(self, *args): return _pybw_swig.Game_drawBoxMap(self, *args)
    def drawBoxMouse(self, *args): return _pybw_swig.Game_drawBoxMouse(self, *args)
    def drawBoxScreen(self, *args): return _pybw_swig.Game_drawBoxScreen(self, *args)
    def drawTriangle(self, *args): return _pybw_swig.Game_drawTriangle(self, *args)
    def drawTriangleMap(self, *args): return _pybw_swig.Game_drawTriangleMap(self, *args)
    def drawTriangleMouse(self, *args): return _pybw_swig.Game_drawTriangleMouse(self, *args)
    def drawTriangleScreen(self, *args): return _pybw_swig.Game_drawTriangleScreen(self, *args)
    def drawCircle(self, *args): return _pybw_swig.Game_drawCircle(self, *args)
    def drawCircleMap(self, *args): return _pybw_swig.Game_drawCircleMap(self, *args)
    def drawCircleMouse(self, *args): return _pybw_swig.Game_drawCircleMouse(self, *args)
    def drawCircleScreen(self, *args): return _pybw_swig.Game_drawCircleScreen(self, *args)
    def drawEllipse(self, *args): return _pybw_swig.Game_drawEllipse(self, *args)
    def drawEllipseMap(self, *args): return _pybw_swig.Game_drawEllipseMap(self, *args)
    def drawEllipseMouse(self, *args): return _pybw_swig.Game_drawEllipseMouse(self, *args)
    def drawEllipseScreen(self, *args): return _pybw_swig.Game_drawEllipseScreen(self, *args)
    def drawDot(self, *args): return _pybw_swig.Game_drawDot(self, *args)
    def drawDotMap(self, *args): return _pybw_swig.Game_drawDotMap(self, *args)
    def drawDotMouse(self, *args): return _pybw_swig.Game_drawDotMouse(self, *args)
    def drawDotScreen(self, *args): return _pybw_swig.Game_drawDotScreen(self, *args)
    def drawLine(self, *args): return _pybw_swig.Game_drawLine(self, *args)
    def drawLineMap(self, *args): return _pybw_swig.Game_drawLineMap(self, *args)
    def drawLineMouse(self, *args): return _pybw_swig.Game_drawLineMouse(self, *args)
    def drawLineScreen(self, *args): return _pybw_swig.Game_drawLineScreen(self, *args)
    def getAllUnits(self): return _pybw_swig.Game_getAllUnits(self)
    def getMinerals(self): return _pybw_swig.Game_getMinerals(self)
    def getGeysers(self): return _pybw_swig.Game_getGeysers(self)
    def getNeutralUnits(self): return _pybw_swig.Game_getNeutralUnits(self)
    def getStaticMinerals(self): return _pybw_swig.Game_getStaticMinerals(self)
    def getStaticGeysers(self): return _pybw_swig.Game_getStaticGeysers(self)
    def getStaticNeutralUnits(self): return _pybw_swig.Game_getStaticNeutralUnits(self)
    def getSelectedUnits(self): return _pybw_swig.Game_getSelectedUnits(self)
    def getPlayers(self): return _pybw_swig.Game_getPlayers(self)
    def getForces(self): return _pybw_swig.Game_getForces(self)
    def unitsOnTile(self, *args): return _pybw_swig.Game_unitsOnTile(self, *args)
    def getStartLocations(self): return _pybw_swig.Game_getStartLocations(self)
    def canBuildHere(self, *args): return _pybw_swig.Game_canBuildHere(self, *args)
    __swig_destroy__ = _pybw_swig.delete_Game
    __del__ = lambda self : None;
Game_swigregister = _pybw_swig.Game_swigregister
Game_swigregister(Game)

SinglePlayer = _pybw_swig.SinglePlayer
LanLow = _pybw_swig.LanLow
LanMedium = _pybw_swig.LanMedium
LanHigh = _pybw_swig.LanHigh
BattlenetLow = _pybw_swig.BattlenetLow
BattlenetMedium = _pybw_swig.BattlenetMedium
BattlenetHigh = _pybw_swig.BattlenetHigh
class Order(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Order, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Order, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_Order(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _pybw_swig.Order___eq__(self, *args)
    def __ne__(self, *args): return _pybw_swig.Order___ne__(self, *args)
    def __lt__(self, *args): return _pybw_swig.Order___lt__(self, *args)
    def getID(self): return _pybw_swig.Order_getID(self)
    def getName(self): return _pybw_swig.Order_getName(self)
    __swig_destroy__ = _pybw_swig.delete_Order
    __del__ = lambda self : None;
Order_swigregister = _pybw_swig.Order_swigregister
Order_swigregister(Order)


def getOrder(*args):
  return _pybw_swig.getOrder(*args)
getOrder = _pybw_swig.getOrder

def allOrders():
  return _pybw_swig.allOrders()
allOrders = _pybw_swig.allOrders
class Player(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Player, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Player, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getID(self): return _pybw_swig.Player_getID(self)
    def getName(self): return _pybw_swig.Player_getName(self)
    def getForce(self): return _pybw_swig.Player_getForce(self)
    def isAlly(self, *args): return _pybw_swig.Player_isAlly(self, *args)
    def isEnemy(self, *args): return _pybw_swig.Player_isEnemy(self, *args)
    def isNeutral(self): return _pybw_swig.Player_isNeutral(self)
    def leftGame(self): return _pybw_swig.Player_leftGame(self)
    def minerals(self): return _pybw_swig.Player_minerals(self)
    def gas(self): return _pybw_swig.Player_gas(self)
    def cumulativeMinerals(self): return _pybw_swig.Player_cumulativeMinerals(self)
    def cumulativeGas(self): return _pybw_swig.Player_cumulativeGas(self)
    def supplyTotal(self, *args): return _pybw_swig.Player_supplyTotal(self, *args)
    def supplyUsed(self, *args): return _pybw_swig.Player_supplyUsed(self, *args)
    def allUnitCount(self, *args): return _pybw_swig.Player_allUnitCount(self, *args)
    def completedUnitCount(self, *args): return _pybw_swig.Player_completedUnitCount(self, *args)
    def incompleteUnitCount(self, *args): return _pybw_swig.Player_incompleteUnitCount(self, *args)
    def deadUnitCount(self, *args): return _pybw_swig.Player_deadUnitCount(self, *args)
    def killedUnitCount(self, *args): return _pybw_swig.Player_killedUnitCount(self, *args)
    def getUpgradeLevel(self, *args): return _pybw_swig.Player_getUpgradeLevel(self, *args)
    def hasResearched(self, *args): return _pybw_swig.Player_hasResearched(self, *args)
    def isResearching(self, *args): return _pybw_swig.Player_isResearching(self, *args)
    def isUpgrading(self, *args): return _pybw_swig.Player_isUpgrading(self, *args)
    def getUnits(self): return _pybw_swig.Player_getUnits(self)
    def playerType(self): return _pybw_swig.Player_playerType(self)
    def getRace(self): return _pybw_swig.Player_getRace(self)
    def getStartLocation(self): return _pybw_swig.Player_getStartLocation(self)
    __swig_destroy__ = _pybw_swig.delete_Player
    __del__ = lambda self : None;
Player_swigregister = _pybw_swig.Player_swigregister
Player_swigregister(Player)
Die = cvar.Die
Stop = cvar.Stop
Guard = cvar.Guard
PlayerGuard = cvar.PlayerGuard
TurretGuard = cvar.TurretGuard
BunkerGuard = cvar.BunkerGuard
Move = cvar.Move
ReaverStop = cvar.ReaverStop
Attack1 = cvar.Attack1
Attack2 = cvar.Attack2
AttackUnit = cvar.AttackUnit
AttackFixedRange = cvar.AttackFixedRange
AttackTile = cvar.AttackTile
Hover = cvar.Hover
AttackMove = cvar.AttackMove
InfestMine1 = cvar.InfestMine1
Nothing1 = cvar.Nothing1
Powerup1 = cvar.Powerup1
TowerGuard = cvar.TowerGuard
TowerAttack = cvar.TowerAttack
VultureMine = cvar.VultureMine
StayinRange = cvar.StayinRange
TurretAttack = cvar.TurretAttack
Nothing2 = cvar.Nothing2
Nothing3 = cvar.Nothing3
DroneStartBuild = cvar.DroneStartBuild
DroneBuild = cvar.DroneBuild
InfestMine2 = cvar.InfestMine2
InfestMine3 = cvar.InfestMine3
InfestMine4 = cvar.InfestMine4
BuildTerran = cvar.BuildTerran
BuildProtoss1 = cvar.BuildProtoss1
BuildProtoss2 = cvar.BuildProtoss2
ConstructingBuilding = cvar.ConstructingBuilding
Repair1 = cvar.Repair1
Repair2 = cvar.Repair2
PlaceAddon = cvar.PlaceAddon
BuildAddon = cvar.BuildAddon
Train = cvar.Train
RallyPoint1 = cvar.RallyPoint1
RallyPoint2 = cvar.RallyPoint2
ZergBirth = cvar.ZergBirth
Morph1 = cvar.Morph1
Morph2 = cvar.Morph2
BuildSelf1 = cvar.BuildSelf1
ZergBuildSelf = cvar.ZergBuildSelf
Build5 = cvar.Build5
Enternyduscanal = cvar.Enternyduscanal
BuildSelf2 = cvar.BuildSelf2
Follow = cvar.Follow
Carrier = cvar.Carrier
CarrierIgnore1 = cvar.CarrierIgnore1
CarrierStop = cvar.CarrierStop
CarrierAttack1 = cvar.CarrierAttack1
CarrierAttack2 = cvar.CarrierAttack2
CarrierIgnore2 = cvar.CarrierIgnore2
CarrierFight = cvar.CarrierFight
HoldPosition1 = cvar.HoldPosition1
Reaver = cvar.Reaver
ReaverAttack1 = cvar.ReaverAttack1
ReaverAttack2 = cvar.ReaverAttack2
ReaverFight = cvar.ReaverFight
ReaverHold = cvar.ReaverHold
TrainFighter = cvar.TrainFighter
StrafeUnit1 = cvar.StrafeUnit1
StrafeUnit2 = cvar.StrafeUnit2
RechargeShields1 = cvar.RechargeShields1
Rechargeshields2 = cvar.Rechargeshields2
ShieldBattery = cvar.ShieldBattery
Return = cvar.Return
DroneLand = cvar.DroneLand
BuildingLand = cvar.BuildingLand
BuildingLiftoff = cvar.BuildingLiftoff
DroneLiftoff = cvar.DroneLiftoff
Liftoff = cvar.Liftoff
ResearchTech = cvar.ResearchTech
Upgrade = cvar.Upgrade
Larva = cvar.Larva
SpawningLarva = cvar.SpawningLarva
Harvest1 = cvar.Harvest1
Harvest2 = cvar.Harvest2
MoveToGas = cvar.MoveToGas
WaitForGas = cvar.WaitForGas
HarvestGas = cvar.HarvestGas
ReturnGas = cvar.ReturnGas
MoveToMinerals = cvar.MoveToMinerals
WaitForMinerals = cvar.WaitForMinerals
MiningMinerals = cvar.MiningMinerals
Harvest3 = cvar.Harvest3
Harvest4 = cvar.Harvest4
ReturnMinerals = cvar.ReturnMinerals
Harvest5 = cvar.Harvest5
EnterTransport = cvar.EnterTransport
Pickup1 = cvar.Pickup1
Pickup2 = cvar.Pickup2
Pickup3 = cvar.Pickup3
Pickup4 = cvar.Pickup4
Powerup2 = cvar.Powerup2
SiegeMode = cvar.SiegeMode
TankMode = cvar.TankMode
WatchTarget = cvar.WatchTarget
InitCreepGrowth = cvar.InitCreepGrowth
SpreadCreep = cvar.SpreadCreep
StoppingCreepGrowth = cvar.StoppingCreepGrowth
GuardianAspect = cvar.GuardianAspect
WarpingArchon = cvar.WarpingArchon
CompletingArchonsummon = cvar.CompletingArchonsummon
HoldPosition2 = cvar.HoldPosition2
HoldPosition3 = cvar.HoldPosition3
Cloak = cvar.Cloak
Decloak = cvar.Decloak
Unload = cvar.Unload
MoveUnload = cvar.MoveUnload
FireYamatoGun1 = cvar.FireYamatoGun1
FireYamatoGun2 = cvar.FireYamatoGun2
MagnaPulse = cvar.MagnaPulse
Burrow = cvar.Burrow
Burrowed = cvar.Burrowed
Unburrow = cvar.Unburrow
DarkSwarm = cvar.DarkSwarm
CastParasite = cvar.CastParasite
SummonBroodlings = cvar.SummonBroodlings
EmpShockwave = cvar.EmpShockwave
NukeWait = cvar.NukeWait
NukeTrain = cvar.NukeTrain
NukeLaunch = cvar.NukeLaunch
NukePaint = cvar.NukePaint
NukeUnit = cvar.NukeUnit
NukeGround = cvar.NukeGround
NukeTrack = cvar.NukeTrack
InitArbiter = cvar.InitArbiter
CloakNearbyUnits = cvar.CloakNearbyUnits
PlaceMine = cvar.PlaceMine
Rightclickaction = cvar.Rightclickaction
SapUnit = cvar.SapUnit
SapLocation = cvar.SapLocation
HoldPosition4 = cvar.HoldPosition4
Teleport = cvar.Teleport
TeleporttoLocation = cvar.TeleporttoLocation
PlaceScanner = cvar.PlaceScanner
Scanner = cvar.Scanner
DefensiveMatrix = cvar.DefensiveMatrix
PsiStorm = cvar.PsiStorm
Orders_Irradiate = cvar.Orders_Irradiate
Orders_Plague = cvar.Orders_Plague
Orders_Consume = cvar.Orders_Consume
Orders_Ensnare = cvar.Orders_Ensnare
StasisField = cvar.StasisField
Hallucination1 = cvar.Hallucination1
Hallucination2 = cvar.Hallucination2
ResetCollision1 = cvar.ResetCollision1
ResetCollision2 = cvar.ResetCollision2
Patrol = cvar.Patrol
CTFCOPInit = cvar.CTFCOPInit
CTFCOP1 = cvar.CTFCOP1
CTFCOP2 = cvar.CTFCOP2
ComputerAI = cvar.ComputerAI
AtkMoveEP = cvar.AtkMoveEP
HarassMove = cvar.HarassMove
AIPatrol = cvar.AIPatrol
GuardPost = cvar.GuardPost
RescuePassive = cvar.RescuePassive
Orders_Neutral = cvar.Orders_Neutral
ComputerReturn = cvar.ComputerReturn
InitPsiProvider = cvar.InitPsiProvider
SelfDestrucing = cvar.SelfDestrucing
Critter = cvar.Critter
HiddenGun = cvar.HiddenGun
OpenDoor = cvar.OpenDoor
CloseDoor = cvar.CloseDoor
HideTrap = cvar.HideTrap
RevealTrap = cvar.RevealTrap
Enabledoodad = cvar.Enabledoodad
Disabledoodad = cvar.Disabledoodad
Warpin = cvar.Warpin
Medic = cvar.Medic
MedicHeal1 = cvar.MedicHeal1
HealMove = cvar.HealMove
MedicHoldPosition = cvar.MedicHoldPosition
MedicHeal2 = cvar.MedicHeal2
Orders_Restoration = cvar.Orders_Restoration
CastDisruptionWeb = cvar.CastDisruptionWeb
CastMindControl = cvar.CastMindControl
WarpingDarkArchon = cvar.WarpingDarkArchon
CastFeedback = cvar.CastFeedback
CastOpticalFlare = cvar.CastOpticalFlare
CastMaelstrom = cvar.CastMaelstrom
JunkYardDog = cvar.JunkYardDog
Fatal = cvar.Fatal
Orders_None = cvar.Orders_None
Orders_Unknown = cvar.Orders_Unknown

class PlayerType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlayerType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PlayerType, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_PlayerType(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _pybw_swig.PlayerType___eq__(self, *args)
    def __ne__(self, *args): return _pybw_swig.PlayerType___ne__(self, *args)
    def __lt__(self, *args): return _pybw_swig.PlayerType___lt__(self, *args)
    def getID(self): return _pybw_swig.PlayerType_getID(self)
    def getName(self): return _pybw_swig.PlayerType_getName(self)
    __swig_destroy__ = _pybw_swig.delete_PlayerType
    __del__ = lambda self : None;
PlayerType_swigregister = _pybw_swig.PlayerType_swigregister
PlayerType_swigregister(PlayerType)


def getPlayerType(*args):
  return _pybw_swig.getPlayerType(*args)
getPlayerType = _pybw_swig.getPlayerType

def allPlayerTypes():
  return _pybw_swig.allPlayerTypes()
allPlayerTypes = _pybw_swig.allPlayerTypes
class Position(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Position, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Position, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_Position(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _pybw_swig.Position___eq__(self, *args)
    def __ne__(self, *args): return _pybw_swig.Position___ne__(self, *args)
    def __lt__(self, *args): return _pybw_swig.Position___lt__(self, *args)
    def __add__(self, *args): return _pybw_swig.Position___add__(self, *args)
    def __sub__(self, *args): return _pybw_swig.Position___sub__(self, *args)
    def __iadd__(self, *args): return _pybw_swig.Position___iadd__(self, *args)
    def __isub__(self, *args): return _pybw_swig.Position___isub__(self, *args)
    def getDistance(self, *args): return _pybw_swig.Position_getDistance(self, *args)
    def getLength(self): return _pybw_swig.Position_getLength(self)
    def getX(self): return _pybw_swig.Position_getX(self)
    def getY(self): return _pybw_swig.Position_getY(self)
    __swig_destroy__ = _pybw_swig.delete_Position
    __del__ = lambda self : None;
Position_swigregister = _pybw_swig.Position_swigregister
Position_swigregister(Position)
NotUsed = cvar.NotUsed
Computer = cvar.Computer
Human = cvar.Human
Rescuable = cvar.Rescuable
ComputerSlot = cvar.ComputerSlot
OpenSlot = cvar.OpenSlot
PlayerTypes_Neutral = cvar.PlayerTypes_Neutral
ClosedSlot = cvar.ClosedSlot
HumanDefeated = cvar.HumanDefeated
ComputerDefeated = cvar.ComputerDefeated
PlayerTypes_None = cvar.PlayerTypes_None
PlayerTypes_Unknown = cvar.PlayerTypes_Unknown

class Race(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Race, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Race, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_Race(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _pybw_swig.Race___eq__(self, *args)
    def __ne__(self, *args): return _pybw_swig.Race___ne__(self, *args)
    def __lt__(self, *args): return _pybw_swig.Race___lt__(self, *args)
    def getID(self): return _pybw_swig.Race_getID(self)
    def getName(self): return _pybw_swig.Race_getName(self)
    def getWorker(self): return _pybw_swig.Race_getWorker(self)
    def getCenter(self): return _pybw_swig.Race_getCenter(self)
    def getRefinery(self): return _pybw_swig.Race_getRefinery(self)
    def getTransport(self): return _pybw_swig.Race_getTransport(self)
    def getSupplyProvider(self): return _pybw_swig.Race_getSupplyProvider(self)
    __swig_destroy__ = _pybw_swig.delete_Race
    __del__ = lambda self : None;
Race_swigregister = _pybw_swig.Race_swigregister
Race_swigregister(Race)
Positions_Invalid = cvar.Positions_Invalid
Positions_None = cvar.Positions_None
Positions_Unknown = cvar.Positions_Unknown


def getRace(*args):
  return _pybw_swig.getRace(*args)
getRace = _pybw_swig.getRace

def allRaces():
  return _pybw_swig.allRaces()
allRaces = _pybw_swig.allRaces
class TechType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TechType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TechType, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_TechType(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _pybw_swig.TechType___eq__(self, *args)
    def __ne__(self, *args): return _pybw_swig.TechType___ne__(self, *args)
    def __lt__(self, *args): return _pybw_swig.TechType___lt__(self, *args)
    def getID(self): return _pybw_swig.TechType_getID(self)
    def getName(self): return _pybw_swig.TechType_getName(self)
    def mineralPrice(self): return _pybw_swig.TechType_mineralPrice(self)
    def gasPrice(self): return _pybw_swig.TechType_gasPrice(self)
    def energyUsed(self): return _pybw_swig.TechType_energyUsed(self)
    def whatResearches(self): return _pybw_swig.TechType_whatResearches(self)
    def getWeapon(self): return _pybw_swig.TechType_getWeapon(self)
    def whatUses(self): return _pybw_swig.TechType_whatUses(self)
    __swig_destroy__ = _pybw_swig.delete_TechType
    __del__ = lambda self : None;
TechType_swigregister = _pybw_swig.TechType_swigregister
TechType_swigregister(TechType)
Zerg = cvar.Zerg
Terran = cvar.Terran
Protoss = cvar.Protoss
Random = cvar.Random
Other = cvar.Other
Races_None = cvar.Races_None
Races_Unknown = cvar.Races_Unknown


def getTechType(*args):
  return _pybw_swig.getTechType(*args)
getTechType = _pybw_swig.getTechType

def allTechTypes():
  return _pybw_swig.allTechTypes()
allTechTypes = _pybw_swig.allTechTypes
class TilePosition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TilePosition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TilePosition, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_TilePosition(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _pybw_swig.TilePosition___eq__(self, *args)
    def __ne__(self, *args): return _pybw_swig.TilePosition___ne__(self, *args)
    def __lt__(self, *args): return _pybw_swig.TilePosition___lt__(self, *args)
    def __add__(self, *args): return _pybw_swig.TilePosition___add__(self, *args)
    def __sub__(self, *args): return _pybw_swig.TilePosition___sub__(self, *args)
    def __iadd__(self, *args): return _pybw_swig.TilePosition___iadd__(self, *args)
    def __isub__(self, *args): return _pybw_swig.TilePosition___isub__(self, *args)
    def getDistance(self, *args): return _pybw_swig.TilePosition_getDistance(self, *args)
    def getLength(self): return _pybw_swig.TilePosition_getLength(self)
    def isValid(self): return _pybw_swig.TilePosition_isValid(self)
    def getX(self): return _pybw_swig.TilePosition_getX(self)
    def getY(self): return _pybw_swig.TilePosition_getY(self)
    __swig_destroy__ = _pybw_swig.delete_TilePosition
    __del__ = lambda self : None;
TilePosition_swigregister = _pybw_swig.TilePosition_swigregister
TilePosition_swigregister(TilePosition)
Stim_Packs = cvar.Stim_Packs
TechTypes_Lockdown = cvar.TechTypes_Lockdown
TechTypes_EMP_Shockwave = cvar.TechTypes_EMP_Shockwave
TechTypes_Spider_Mines = cvar.TechTypes_Spider_Mines
Scanner_Sweep = cvar.Scanner_Sweep
Tank_Siege_Mode = cvar.Tank_Siege_Mode
Defensive_Matrix = cvar.Defensive_Matrix
TechTypes_Irradiate = cvar.TechTypes_Irradiate
TechTypes_Yamato_Gun = cvar.TechTypes_Yamato_Gun
Cloaking_Field = cvar.Cloaking_Field
Personnel_Cloaking = cvar.Personnel_Cloaking
Burrowing = cvar.Burrowing
Infestation = cvar.Infestation
TechTypes_Spawn_Broodlings = cvar.TechTypes_Spawn_Broodlings
TechTypes_Dark_Swarm = cvar.TechTypes_Dark_Swarm
TechTypes_Plague = cvar.TechTypes_Plague
TechTypes_Consume = cvar.TechTypes_Consume
TechTypes_Ensnare = cvar.TechTypes_Ensnare
TechTypes_Parasite = cvar.TechTypes_Parasite
TechTypes_Psionic_Storm = cvar.TechTypes_Psionic_Storm
Hallucination = cvar.Hallucination
Recall = cvar.Recall
TechTypes_Stasis_Field = cvar.TechTypes_Stasis_Field
Archon_Warp = cvar.Archon_Warp
TechTypes_Restoration = cvar.TechTypes_Restoration
TechTypes_Disruption_Web = cvar.TechTypes_Disruption_Web
TechTypes_Mind_Control = cvar.TechTypes_Mind_Control
Dark_Archon_Meld = cvar.Dark_Archon_Meld
TechTypes_Feedback = cvar.TechTypes_Feedback
TechTypes_Optical_Flare = cvar.TechTypes_Optical_Flare
TechTypes_Maelstrom = cvar.TechTypes_Maelstrom
Lurker_Aspect = cvar.Lurker_Aspect
Healing = cvar.Healing
TechTypes_None = cvar.TechTypes_None
TechTypes_Unknown = cvar.TechTypes_Unknown
TechTypes_Nuclear_Strike = cvar.TechTypes_Nuclear_Strike

class Unit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Unit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Unit, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getPlayer(self): return _pybw_swig.Unit_getPlayer(self)
    def getType(self): return _pybw_swig.Unit_getType(self)
    def getInitialType(self): return _pybw_swig.Unit_getInitialType(self)
    def getHitPoints(self): return _pybw_swig.Unit_getHitPoints(self)
    def getInitialHitPoints(self): return _pybw_swig.Unit_getInitialHitPoints(self)
    def getShields(self): return _pybw_swig.Unit_getShields(self)
    def getEnergy(self): return _pybw_swig.Unit_getEnergy(self)
    def getResources(self): return _pybw_swig.Unit_getResources(self)
    def getInitialResources(self): return _pybw_swig.Unit_getInitialResources(self)
    def getKillCount(self): return _pybw_swig.Unit_getKillCount(self)
    def getGroundWeaponCooldown(self): return _pybw_swig.Unit_getGroundWeaponCooldown(self)
    def getAirWeaponCooldown(self): return _pybw_swig.Unit_getAirWeaponCooldown(self)
    def getSpellCooldown(self): return _pybw_swig.Unit_getSpellCooldown(self)
    def getDefenseMatrixPoints(self): return _pybw_swig.Unit_getDefenseMatrixPoints(self)
    def getDefenseMatrixTimer(self): return _pybw_swig.Unit_getDefenseMatrixTimer(self)
    def getEnsnareTimer(self): return _pybw_swig.Unit_getEnsnareTimer(self)
    def getIrradiateTimer(self): return _pybw_swig.Unit_getIrradiateTimer(self)
    def getLockdownTimer(self): return _pybw_swig.Unit_getLockdownTimer(self)
    def getMaelstromTimer(self): return _pybw_swig.Unit_getMaelstromTimer(self)
    def getPlagueTimer(self): return _pybw_swig.Unit_getPlagueTimer(self)
    def getRemoveTimer(self): return _pybw_swig.Unit_getRemoveTimer(self)
    def getStasisTimer(self): return _pybw_swig.Unit_getStasisTimer(self)
    def getStimTimer(self): return _pybw_swig.Unit_getStimTimer(self)
    def getPosition(self): return _pybw_swig.Unit_getPosition(self)
    def getInitialPosition(self): return _pybw_swig.Unit_getInitialPosition(self)
    def getTilePosition(self): return _pybw_swig.Unit_getTilePosition(self)
    def getInitialTilePosition(self): return _pybw_swig.Unit_getInitialTilePosition(self)
    def getDistance(self, *args): return _pybw_swig.Unit_getDistance(self, *args)
    def getAngle(self): return _pybw_swig.Unit_getAngle(self)
    def getVelocityX(self): return _pybw_swig.Unit_getVelocityX(self)
    def getVelocityY(self): return _pybw_swig.Unit_getVelocityY(self)
    def getTarget(self): return _pybw_swig.Unit_getTarget(self)
    def getTargetPosition(self): return _pybw_swig.Unit_getTargetPosition(self)
    def getOrder(self): return _pybw_swig.Unit_getOrder(self)
    def getOrderTarget(self): return _pybw_swig.Unit_getOrderTarget(self)
    def getOrderTimer(self): return _pybw_swig.Unit_getOrderTimer(self)
    def getSecondaryOrder(self): return _pybw_swig.Unit_getSecondaryOrder(self)
    def getBuildUnit(self): return _pybw_swig.Unit_getBuildUnit(self)
    def getRemainingBuildTime(self): return _pybw_swig.Unit_getRemainingBuildTime(self)
    def getRemainingTrainTime(self): return _pybw_swig.Unit_getRemainingTrainTime(self)
    def getChild(self): return _pybw_swig.Unit_getChild(self)
    def getTrainingQueue(self): return _pybw_swig.Unit_getTrainingQueue(self)
    def getTransport(self): return _pybw_swig.Unit_getTransport(self)
    def getLoadedUnits(self): return _pybw_swig.Unit_getLoadedUnits(self)
    def getInterceptorCount(self): return _pybw_swig.Unit_getInterceptorCount(self)
    def getScarabCount(self): return _pybw_swig.Unit_getScarabCount(self)
    def getSpiderMineCount(self): return _pybw_swig.Unit_getSpiderMineCount(self)
    def getTech(self): return _pybw_swig.Unit_getTech(self)
    def getUpgrade(self): return _pybw_swig.Unit_getUpgrade(self)
    def getRemainingResearchTime(self): return _pybw_swig.Unit_getRemainingResearchTime(self)
    def getRemainingUpgradeTime(self): return _pybw_swig.Unit_getRemainingUpgradeTime(self)
    def getRallyPosition(self): return _pybw_swig.Unit_getRallyPosition(self)
    def getRallyUnit(self): return _pybw_swig.Unit_getRallyUnit(self)
    def getAddon(self): return _pybw_swig.Unit_getAddon(self)
    def getUpgradeLevel(self, *args): return _pybw_swig.Unit_getUpgradeLevel(self, *args)
    def exists(self): return _pybw_swig.Unit_exists(self)
    def isAccelerating(self): return _pybw_swig.Unit_isAccelerating(self)
    def isBeingConstructed(self): return _pybw_swig.Unit_isBeingConstructed(self)
    def isBeingHealed(self): return _pybw_swig.Unit_isBeingHealed(self)
    def isBlind(self): return _pybw_swig.Unit_isBlind(self)
    def isBraking(self): return _pybw_swig.Unit_isBraking(self)
    def isBurrowed(self): return _pybw_swig.Unit_isBurrowed(self)
    def isCarryingGas(self): return _pybw_swig.Unit_isCarryingGas(self)
    def isCarryingMinerals(self): return _pybw_swig.Unit_isCarryingMinerals(self)
    def isCloaked(self): return _pybw_swig.Unit_isCloaked(self)
    def isCompleted(self): return _pybw_swig.Unit_isCompleted(self)
    def isConstructing(self): return _pybw_swig.Unit_isConstructing(self)
    def isDefenseMatrixed(self): return _pybw_swig.Unit_isDefenseMatrixed(self)
    def isEnsnared(self): return _pybw_swig.Unit_isEnsnared(self)
    def isFollowing(self): return _pybw_swig.Unit_isFollowing(self)
    def isGatheringGas(self): return _pybw_swig.Unit_isGatheringGas(self)
    def isGatheringMinerals(self): return _pybw_swig.Unit_isGatheringMinerals(self)
    def isHallucination(self): return _pybw_swig.Unit_isHallucination(self)
    def isIdle(self): return _pybw_swig.Unit_isIdle(self)
    def isIrradiated(self): return _pybw_swig.Unit_isIrradiated(self)
    def isLifted(self): return _pybw_swig.Unit_isLifted(self)
    def isLoaded(self): return _pybw_swig.Unit_isLoaded(self)
    def isLockedDown(self): return _pybw_swig.Unit_isLockedDown(self)
    def isMaelstrommed(self): return _pybw_swig.Unit_isMaelstrommed(self)
    def isMorphing(self): return _pybw_swig.Unit_isMorphing(self)
    def isMoving(self): return _pybw_swig.Unit_isMoving(self)
    def isParasited(self): return _pybw_swig.Unit_isParasited(self)
    def isPatrolling(self): return _pybw_swig.Unit_isPatrolling(self)
    def isPlagued(self): return _pybw_swig.Unit_isPlagued(self)
    def isRepairing(self): return _pybw_swig.Unit_isRepairing(self)
    def isResearching(self): return _pybw_swig.Unit_isResearching(self)
    def isSelected(self): return _pybw_swig.Unit_isSelected(self)
    def isSieged(self): return _pybw_swig.Unit_isSieged(self)
    def isStartingAttack(self): return _pybw_swig.Unit_isStartingAttack(self)
    def isStasised(self): return _pybw_swig.Unit_isStasised(self)
    def isStimmed(self): return _pybw_swig.Unit_isStimmed(self)
    def isTraining(self): return _pybw_swig.Unit_isTraining(self)
    def isUnderStorm(self): return _pybw_swig.Unit_isUnderStorm(self)
    def isUnpowered(self): return _pybw_swig.Unit_isUnpowered(self)
    def isUpgrading(self): return _pybw_swig.Unit_isUpgrading(self)
    def isVisible(self): return _pybw_swig.Unit_isVisible(self)
    def attackMove(self, *args): return _pybw_swig.Unit_attackMove(self, *args)
    def attackUnit(self, *args): return _pybw_swig.Unit_attackUnit(self, *args)
    def rightClick(self, *args): return _pybw_swig.Unit_rightClick(self, *args)
    def train(self, *args): return _pybw_swig.Unit_train(self, *args)
    def build(self, *args): return _pybw_swig.Unit_build(self, *args)
    def buildAddon(self, *args): return _pybw_swig.Unit_buildAddon(self, *args)
    def research(self, *args): return _pybw_swig.Unit_research(self, *args)
    def upgrade(self, *args): return _pybw_swig.Unit_upgrade(self, *args)
    def stop(self): return _pybw_swig.Unit_stop(self)
    def holdPosition(self): return _pybw_swig.Unit_holdPosition(self)
    def patrol(self, *args): return _pybw_swig.Unit_patrol(self, *args)
    def follow(self, *args): return _pybw_swig.Unit_follow(self, *args)
    def setRallyPosition(self, *args): return _pybw_swig.Unit_setRallyPosition(self, *args)
    def setRallyUnit(self, *args): return _pybw_swig.Unit_setRallyUnit(self, *args)
    def repair(self, *args): return _pybw_swig.Unit_repair(self, *args)
    def morph(self, *args): return _pybw_swig.Unit_morph(self, *args)
    def burrow(self): return _pybw_swig.Unit_burrow(self)
    def unburrow(self): return _pybw_swig.Unit_unburrow(self)
    def siege(self): return _pybw_swig.Unit_siege(self)
    def unsiege(self): return _pybw_swig.Unit_unsiege(self)
    def cloak(self): return _pybw_swig.Unit_cloak(self)
    def decloak(self): return _pybw_swig.Unit_decloak(self)
    def lift(self): return _pybw_swig.Unit_lift(self)
    def land(self, *args): return _pybw_swig.Unit_land(self, *args)
    def load(self, *args): return _pybw_swig.Unit_load(self, *args)
    def unload(self, *args): return _pybw_swig.Unit_unload(self, *args)
    def unloadAll(self, *args): return _pybw_swig.Unit_unloadAll(self, *args)
    def cancelConstruction(self): return _pybw_swig.Unit_cancelConstruction(self)
    def haltConstruction(self): return _pybw_swig.Unit_haltConstruction(self)
    def cancelMorph(self): return _pybw_swig.Unit_cancelMorph(self)
    def cancelTrain(self, *args): return _pybw_swig.Unit_cancelTrain(self, *args)
    def cancelAddon(self): return _pybw_swig.Unit_cancelAddon(self)
    def cancelResearch(self): return _pybw_swig.Unit_cancelResearch(self)
    def cancelUpgrade(self): return _pybw_swig.Unit_cancelUpgrade(self)
    def useTech(self, *args): return _pybw_swig.Unit_useTech(self, *args)
    __swig_destroy__ = _pybw_swig.delete_Unit
    __del__ = lambda self : None;
Unit_swigregister = _pybw_swig.Unit_swigregister
Unit_swigregister(Unit)
TilePositions_Invalid = cvar.TilePositions_Invalid
TilePositions_None = cvar.TilePositions_None
TilePositions_Unknown = cvar.TilePositions_Unknown

class UnitSizeType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitSizeType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnitSizeType, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_UnitSizeType(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _pybw_swig.UnitSizeType___eq__(self, *args)
    def __ne__(self, *args): return _pybw_swig.UnitSizeType___ne__(self, *args)
    def __lt__(self, *args): return _pybw_swig.UnitSizeType___lt__(self, *args)
    def getID(self): return _pybw_swig.UnitSizeType_getID(self)
    def getName(self): return _pybw_swig.UnitSizeType_getName(self)
    __swig_destroy__ = _pybw_swig.delete_UnitSizeType
    __del__ = lambda self : None;
UnitSizeType_swigregister = _pybw_swig.UnitSizeType_swigregister
UnitSizeType_swigregister(UnitSizeType)


def getUnitSizeType(*args):
  return _pybw_swig.getUnitSizeType(*args)
getUnitSizeType = _pybw_swig.getUnitSizeType

def allUnitSizeTypes():
  return _pybw_swig.allUnitSizeTypes()
allUnitSizeTypes = _pybw_swig.allUnitSizeTypes
class UnitType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnitType, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_UnitType(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _pybw_swig.UnitType___eq__(self, *args)
    def __ne__(self, *args): return _pybw_swig.UnitType___ne__(self, *args)
    def __lt__(self, *args): return _pybw_swig.UnitType___lt__(self, *args)
    def getID(self): return _pybw_swig.UnitType_getID(self)
    def getName(self): return _pybw_swig.UnitType_getName(self)
    def getSubLabel(self): return _pybw_swig.UnitType_getSubLabel(self)
    def getRace(self): return _pybw_swig.UnitType_getRace(self)
    def whatBuilds(self): return _pybw_swig.UnitType_whatBuilds(self)
    def requiredUnits(self): return _pybw_swig.UnitType_requiredUnits(self)
    def requiredTech(self): return _pybw_swig.UnitType_requiredTech(self)
    def abilities(self): return _pybw_swig.UnitType_abilities(self)
    def upgrades(self): return _pybw_swig.UnitType_upgrades(self)
    def armorUpgrade(self): return _pybw_swig.UnitType_armorUpgrade(self)
    def maxHitPoints(self): return _pybw_swig.UnitType_maxHitPoints(self)
    def maxShields(self): return _pybw_swig.UnitType_maxShields(self)
    def maxEnergy(self): return _pybw_swig.UnitType_maxEnergy(self)
    def armor(self): return _pybw_swig.UnitType_armor(self)
    def mineralPrice(self): return _pybw_swig.UnitType_mineralPrice(self)
    def gasPrice(self): return _pybw_swig.UnitType_gasPrice(self)
    def buildTime(self): return _pybw_swig.UnitType_buildTime(self)
    def supplyRequired(self): return _pybw_swig.UnitType_supplyRequired(self)
    def supplyProvided(self): return _pybw_swig.UnitType_supplyProvided(self)
    def spaceRequired(self): return _pybw_swig.UnitType_spaceRequired(self)
    def spaceProvided(self): return _pybw_swig.UnitType_spaceProvided(self)
    def buildScore(self): return _pybw_swig.UnitType_buildScore(self)
    def destroyScore(self): return _pybw_swig.UnitType_destroyScore(self)
    def size(self): return _pybw_swig.UnitType_size(self)
    def tileWidth(self): return _pybw_swig.UnitType_tileWidth(self)
    def tileHeight(self): return _pybw_swig.UnitType_tileHeight(self)
    def dimensionLeft(self): return _pybw_swig.UnitType_dimensionLeft(self)
    def dimensionUp(self): return _pybw_swig.UnitType_dimensionUp(self)
    def dimensionRight(self): return _pybw_swig.UnitType_dimensionRight(self)
    def dimensionDown(self): return _pybw_swig.UnitType_dimensionDown(self)
    def seekRange(self): return _pybw_swig.UnitType_seekRange(self)
    def sightRange(self): return _pybw_swig.UnitType_sightRange(self)
    def groundWeapon(self): return _pybw_swig.UnitType_groundWeapon(self)
    def maxGroundHits(self): return _pybw_swig.UnitType_maxGroundHits(self)
    def airWeapon(self): return _pybw_swig.UnitType_airWeapon(self)
    def maxAirHits(self): return _pybw_swig.UnitType_maxAirHits(self)
    def topSpeed(self): return _pybw_swig.UnitType_topSpeed(self)
    def acceleration(self): return _pybw_swig.UnitType_acceleration(self)
    def haltDistance(self): return _pybw_swig.UnitType_haltDistance(self)
    def turnRadius(self): return _pybw_swig.UnitType_turnRadius(self)
    def canProduce(self): return _pybw_swig.UnitType_canProduce(self)
    def canAttack(self): return _pybw_swig.UnitType_canAttack(self)
    def canMove(self): return _pybw_swig.UnitType_canMove(self)
    def isFlyer(self): return _pybw_swig.UnitType_isFlyer(self)
    def regeneratesHP(self): return _pybw_swig.UnitType_regeneratesHP(self)
    def isSpellcaster(self): return _pybw_swig.UnitType_isSpellcaster(self)
    def hasPermanentCloak(self): return _pybw_swig.UnitType_hasPermanentCloak(self)
    def isInvincible(self): return _pybw_swig.UnitType_isInvincible(self)
    def isOrganic(self): return _pybw_swig.UnitType_isOrganic(self)
    def isMechanical(self): return _pybw_swig.UnitType_isMechanical(self)
    def isRobotic(self): return _pybw_swig.UnitType_isRobotic(self)
    def isDetector(self): return _pybw_swig.UnitType_isDetector(self)
    def isResourceContainer(self): return _pybw_swig.UnitType_isResourceContainer(self)
    def isResourceDepot(self): return _pybw_swig.UnitType_isResourceDepot(self)
    def isRefinery(self): return _pybw_swig.UnitType_isRefinery(self)
    def isWorker(self): return _pybw_swig.UnitType_isWorker(self)
    def requiresPsi(self): return _pybw_swig.UnitType_requiresPsi(self)
    def requiresCreep(self): return _pybw_swig.UnitType_requiresCreep(self)
    def isTwoUnitsInOneEgg(self): return _pybw_swig.UnitType_isTwoUnitsInOneEgg(self)
    def isBurrowable(self): return _pybw_swig.UnitType_isBurrowable(self)
    def isCloakable(self): return _pybw_swig.UnitType_isCloakable(self)
    def isBuilding(self): return _pybw_swig.UnitType_isBuilding(self)
    def isAddon(self): return _pybw_swig.UnitType_isAddon(self)
    def isFlyingBuilding(self): return _pybw_swig.UnitType_isFlyingBuilding(self)
    def isNeutral(self): return _pybw_swig.UnitType_isNeutral(self)
    __swig_destroy__ = _pybw_swig.delete_UnitType
    __del__ = lambda self : None;
UnitType_swigregister = _pybw_swig.UnitType_swigregister
UnitType_swigregister(UnitType)
UnitSizeTypes_Independent = cvar.UnitSizeTypes_Independent
Small = cvar.Small
Medium = cvar.Medium
Large = cvar.Large
UnitSizeTypes_None = cvar.UnitSizeTypes_None
UnitSizeTypes_Unknown = cvar.UnitSizeTypes_Unknown


def getUnitType(*args):
  return _pybw_swig.getUnitType(*args)
getUnitType = _pybw_swig.getUnitType

def allUnitTypes():
  return _pybw_swig.allUnitTypes()
allUnitTypes = _pybw_swig.allUnitTypes
class UpgradeType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpgradeType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UpgradeType, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_UpgradeType(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _pybw_swig.UpgradeType___eq__(self, *args)
    def __ne__(self, *args): return _pybw_swig.UpgradeType___ne__(self, *args)
    def __lt__(self, *args): return _pybw_swig.UpgradeType___lt__(self, *args)
    def getID(self): return _pybw_swig.UpgradeType_getID(self)
    def getName(self): return _pybw_swig.UpgradeType_getName(self)
    def getRace(self): return _pybw_swig.UpgradeType_getRace(self)
    def mineralPriceBase(self): return _pybw_swig.UpgradeType_mineralPriceBase(self)
    def mineralPriceFactor(self): return _pybw_swig.UpgradeType_mineralPriceFactor(self)
    def gasPriceBase(self): return _pybw_swig.UpgradeType_gasPriceBase(self)
    def gasPriceFactor(self): return _pybw_swig.UpgradeType_gasPriceFactor(self)
    def upgradeTimeBase(self): return _pybw_swig.UpgradeType_upgradeTimeBase(self)
    def upgradeTimeFactor(self): return _pybw_swig.UpgradeType_upgradeTimeFactor(self)
    def maxRepeats(self): return _pybw_swig.UpgradeType_maxRepeats(self)
    def whatUpgrades(self): return _pybw_swig.UpgradeType_whatUpgrades(self)
    def whatUses(self): return _pybw_swig.UpgradeType_whatUses(self)
    __swig_destroy__ = _pybw_swig.delete_UpgradeType
    __del__ = lambda self : None;
UpgradeType_swigregister = _pybw_swig.UpgradeType_swigregister
UpgradeType_swigregister(UpgradeType)
Terran_Marine = cvar.Terran_Marine
Terran_Ghost = cvar.Terran_Ghost
Terran_Vulture = cvar.Terran_Vulture
Terran_Goliath = cvar.Terran_Goliath
Terran_Siege_Tank_Tank_Mode = cvar.Terran_Siege_Tank_Tank_Mode
Terran_SCV = cvar.Terran_SCV
Terran_Wraith = cvar.Terran_Wraith
Terran_Science_Vessel = cvar.Terran_Science_Vessel
Terran_Dropship = cvar.Terran_Dropship
Terran_Battlecruiser = cvar.Terran_Battlecruiser
Terran_Vulture_Spider_Mine = cvar.Terran_Vulture_Spider_Mine
Terran_Nuclear_Missile = cvar.Terran_Nuclear_Missile
Terran_Siege_Tank_Siege_Mode = cvar.Terran_Siege_Tank_Siege_Mode
Terran_Firebat = cvar.Terran_Firebat
Spell_Scanner_Sweep = cvar.Spell_Scanner_Sweep
Terran_Medic = cvar.Terran_Medic
Zerg_Larva = cvar.Zerg_Larva
Zerg_Egg = cvar.Zerg_Egg
Zerg_Zergling = cvar.Zerg_Zergling
Zerg_Hydralisk = cvar.Zerg_Hydralisk
Zerg_Ultralisk = cvar.Zerg_Ultralisk
Zerg_Broodling = cvar.Zerg_Broodling
Zerg_Drone = cvar.Zerg_Drone
Zerg_Overlord = cvar.Zerg_Overlord
Zerg_Mutalisk = cvar.Zerg_Mutalisk
Zerg_Guardian = cvar.Zerg_Guardian
Zerg_Queen = cvar.Zerg_Queen
Zerg_Defiler = cvar.Zerg_Defiler
Zerg_Scourge = cvar.Zerg_Scourge
Zerg_Infested_Terran = cvar.Zerg_Infested_Terran
Terran_Valkyrie = cvar.Terran_Valkyrie
Zerg_Cocoon = cvar.Zerg_Cocoon
Protoss_Corsair = cvar.Protoss_Corsair
Protoss_Dark_Templar = cvar.Protoss_Dark_Templar
Zerg_Devourer = cvar.Zerg_Devourer
Protoss_Dark_Archon = cvar.Protoss_Dark_Archon
Protoss_Probe = cvar.Protoss_Probe
Protoss_Zealot = cvar.Protoss_Zealot
Protoss_Dragoon = cvar.Protoss_Dragoon
Protoss_High_Templar = cvar.Protoss_High_Templar
Protoss_Archon = cvar.Protoss_Archon
Protoss_Shuttle = cvar.Protoss_Shuttle
Protoss_Scout = cvar.Protoss_Scout
Protoss_Arbiter = cvar.Protoss_Arbiter
Protoss_Carrier = cvar.Protoss_Carrier
Protoss_Interceptor = cvar.Protoss_Interceptor
Protoss_Reaver = cvar.Protoss_Reaver
Protoss_Observer = cvar.Protoss_Observer
Protoss_Scarab = cvar.Protoss_Scarab
Critter_Rhynadon = cvar.Critter_Rhynadon
Critter_Bengalaas = cvar.Critter_Bengalaas
Critter_Scantid = cvar.Critter_Scantid
Critter_Kakaru = cvar.Critter_Kakaru
Critter_Ragnasaur = cvar.Critter_Ragnasaur
Critter_Ursadon = cvar.Critter_Ursadon
Zerg_Lurker_Egg = cvar.Zerg_Lurker_Egg
Zerg_Lurker = cvar.Zerg_Lurker
Spell_Disruption_Web = cvar.Spell_Disruption_Web
Terran_Command_Center = cvar.Terran_Command_Center
Terran_Comsat_Station = cvar.Terran_Comsat_Station
Terran_Nuclear_Silo = cvar.Terran_Nuclear_Silo
Terran_Supply_Depot = cvar.Terran_Supply_Depot
Terran_Refinery = cvar.Terran_Refinery
Terran_Barracks = cvar.Terran_Barracks
Terran_Academy = cvar.Terran_Academy
Terran_Factory = cvar.Terran_Factory
Terran_Starport = cvar.Terran_Starport
Terran_Control_Tower = cvar.Terran_Control_Tower
Terran_Science_Facility = cvar.Terran_Science_Facility
Terran_Covert_Ops = cvar.Terran_Covert_Ops
Terran_Physics_Lab = cvar.Terran_Physics_Lab
Terran_Machine_Shop = cvar.Terran_Machine_Shop
Terran_Engineering_Bay = cvar.Terran_Engineering_Bay
Terran_Armory = cvar.Terran_Armory
Terran_Missile_Turret = cvar.Terran_Missile_Turret
Terran_Bunker = cvar.Terran_Bunker
Special_Crashed_Norad_II = cvar.Special_Crashed_Norad_II
Special_Ion_Cannon = cvar.Special_Ion_Cannon
Zerg_Infested_Command_Center = cvar.Zerg_Infested_Command_Center
Zerg_Hatchery = cvar.Zerg_Hatchery
Zerg_Lair = cvar.Zerg_Lair
Zerg_Hive = cvar.Zerg_Hive
Zerg_Nydus_Canal = cvar.Zerg_Nydus_Canal
Zerg_Hydralisk_Den = cvar.Zerg_Hydralisk_Den
Zerg_Defiler_Mound = cvar.Zerg_Defiler_Mound
Zerg_Greater_Spire = cvar.Zerg_Greater_Spire
Zerg_Queens_Nest = cvar.Zerg_Queens_Nest
Zerg_Evolution_Chamber = cvar.Zerg_Evolution_Chamber
Zerg_Ultralisk_Cavern = cvar.Zerg_Ultralisk_Cavern
Zerg_Spire = cvar.Zerg_Spire
Zerg_Spawning_Pool = cvar.Zerg_Spawning_Pool
Zerg_Creep_Colony = cvar.Zerg_Creep_Colony
Zerg_Spore_Colony = cvar.Zerg_Spore_Colony
Zerg_Sunken_Colony = cvar.Zerg_Sunken_Colony
Special_Overmind_With_Shell = cvar.Special_Overmind_With_Shell
Special_Overmind = cvar.Special_Overmind
Zerg_Extractor = cvar.Zerg_Extractor
Special_Mature_Chrysalis = cvar.Special_Mature_Chrysalis
Special_Cerebrate = cvar.Special_Cerebrate
Special_Cerebrate_Daggoth = cvar.Special_Cerebrate_Daggoth
Protoss_Nexus = cvar.Protoss_Nexus
Protoss_Robotics_Facility = cvar.Protoss_Robotics_Facility
Protoss_Pylon = cvar.Protoss_Pylon
Protoss_Assimilator = cvar.Protoss_Assimilator
Protoss_Observatory = cvar.Protoss_Observatory
Protoss_Gateway = cvar.Protoss_Gateway
Protoss_Photon_Cannon = cvar.Protoss_Photon_Cannon
Protoss_Citadel_of_Adun = cvar.Protoss_Citadel_of_Adun
Protoss_Cybernetics_Core = cvar.Protoss_Cybernetics_Core
Protoss_Templar_Archives = cvar.Protoss_Templar_Archives
Protoss_Forge = cvar.Protoss_Forge
Protoss_Stargate = cvar.Protoss_Stargate
Special_Stasis_Cell_Prison = cvar.Special_Stasis_Cell_Prison
Protoss_Fleet_Beacon = cvar.Protoss_Fleet_Beacon
Protoss_Arbiter_Tribunal = cvar.Protoss_Arbiter_Tribunal
Protoss_Robotics_Support_Bay = cvar.Protoss_Robotics_Support_Bay
Protoss_Shield_Battery = cvar.Protoss_Shield_Battery
Special_Khaydarin_Crystal_Form = cvar.Special_Khaydarin_Crystal_Form
Special_Protoss_Temple = cvar.Special_Protoss_Temple
Special_XelNaga_Temple = cvar.Special_XelNaga_Temple
Resource_Mineral_Field = cvar.Resource_Mineral_Field
Resource_Vespene_Geyser = cvar.Resource_Vespene_Geyser
Special_Warp_Gate = cvar.Special_Warp_Gate
Special_Psi_Disrupter = cvar.Special_Psi_Disrupter
Special_Power_Generator = cvar.Special_Power_Generator
Special_Overmind_Cocoon = cvar.Special_Overmind_Cocoon
Spell_Dark_Swarm = cvar.Spell_Dark_Swarm
UnitTypes_None = cvar.UnitTypes_None
UnitTypes_Unknown = cvar.UnitTypes_Unknown


def getUpgradeType(*args):
  return _pybw_swig.getUpgradeType(*args)
getUpgradeType = _pybw_swig.getUpgradeType

def allUpgradeTypes():
  return _pybw_swig.allUpgradeTypes()
allUpgradeTypes = _pybw_swig.allUpgradeTypes
class WeaponType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WeaponType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WeaponType, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybw_swig.new_WeaponType(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _pybw_swig.WeaponType___eq__(self, *args)
    def __ne__(self, *args): return _pybw_swig.WeaponType___ne__(self, *args)
    def __lt__(self, *args): return _pybw_swig.WeaponType___lt__(self, *args)
    def getID(self): return _pybw_swig.WeaponType_getID(self)
    def getName(self): return _pybw_swig.WeaponType_getName(self)
    def getTech(self): return _pybw_swig.WeaponType_getTech(self)
    def whatUses(self): return _pybw_swig.WeaponType_whatUses(self)
    def damageAmount(self): return _pybw_swig.WeaponType_damageAmount(self)
    def damageBonus(self): return _pybw_swig.WeaponType_damageBonus(self)
    def damageCooldown(self): return _pybw_swig.WeaponType_damageCooldown(self)
    def damageFactor(self): return _pybw_swig.WeaponType_damageFactor(self)
    def upgradeType(self): return _pybw_swig.WeaponType_upgradeType(self)
    def damageType(self): return _pybw_swig.WeaponType_damageType(self)
    def explosionType(self): return _pybw_swig.WeaponType_explosionType(self)
    def minRange(self): return _pybw_swig.WeaponType_minRange(self)
    def maxRange(self): return _pybw_swig.WeaponType_maxRange(self)
    def innerSplashRadius(self): return _pybw_swig.WeaponType_innerSplashRadius(self)
    def medianSplashRadius(self): return _pybw_swig.WeaponType_medianSplashRadius(self)
    def outerSplashRadius(self): return _pybw_swig.WeaponType_outerSplashRadius(self)
    def targetsAir(self): return _pybw_swig.WeaponType_targetsAir(self)
    def targetsGround(self): return _pybw_swig.WeaponType_targetsGround(self)
    def targetsMechanical(self): return _pybw_swig.WeaponType_targetsMechanical(self)
    def targetsOrganic(self): return _pybw_swig.WeaponType_targetsOrganic(self)
    def targetsNonBuilding(self): return _pybw_swig.WeaponType_targetsNonBuilding(self)
    def targetsNonRobotic(self): return _pybw_swig.WeaponType_targetsNonRobotic(self)
    def targetsTerrain(self): return _pybw_swig.WeaponType_targetsTerrain(self)
    def targetsOrgOrMech(self): return _pybw_swig.WeaponType_targetsOrgOrMech(self)
    def targetsOwn(self): return _pybw_swig.WeaponType_targetsOwn(self)
    __swig_destroy__ = _pybw_swig.delete_WeaponType
    __del__ = lambda self : None;
WeaponType_swigregister = _pybw_swig.WeaponType_swigregister
WeaponType_swigregister(WeaponType)
Terran_Infantry_Armor = cvar.Terran_Infantry_Armor
Terran_Vehicle_Plating = cvar.Terran_Vehicle_Plating
Terran_Ship_Plating = cvar.Terran_Ship_Plating
Zerg_Carapace = cvar.Zerg_Carapace
Zerg_Flyer_Carapace = cvar.Zerg_Flyer_Carapace
Protoss_Armor = cvar.Protoss_Armor
Protoss_Plating = cvar.Protoss_Plating
Terran_Infantry_Weapons = cvar.Terran_Infantry_Weapons
Terran_Vehicle_Weapons = cvar.Terran_Vehicle_Weapons
Terran_Ship_Weapons = cvar.Terran_Ship_Weapons
Zerg_Melee_Attacks = cvar.Zerg_Melee_Attacks
Zerg_Missile_Attacks = cvar.Zerg_Missile_Attacks
Zerg_Flyer_Attacks = cvar.Zerg_Flyer_Attacks
Protoss_Ground_Weapons = cvar.Protoss_Ground_Weapons
Protoss_Air_Weapons = cvar.Protoss_Air_Weapons
Protoss_Plasma_Shields = cvar.Protoss_Plasma_Shields
U_238_Shells = cvar.U_238_Shells
Ion_Thrusters = cvar.Ion_Thrusters
Titan_Reactor = cvar.Titan_Reactor
Ocular_Implants = cvar.Ocular_Implants
Moebius_Reactor = cvar.Moebius_Reactor
Apollo_Reactor = cvar.Apollo_Reactor
Colossus_Reactor = cvar.Colossus_Reactor
Ventral_Sacs = cvar.Ventral_Sacs
Antennae = cvar.Antennae
Pneumatized_Carapace = cvar.Pneumatized_Carapace
Metabolic_Boost = cvar.Metabolic_Boost
Adrenal_Glands = cvar.Adrenal_Glands
Muscular_Augments = cvar.Muscular_Augments
Grooved_Spines = cvar.Grooved_Spines
Gamete_Meiosis = cvar.Gamete_Meiosis
Metasynaptic_Node = cvar.Metasynaptic_Node
Singularity_Charge = cvar.Singularity_Charge
Leg_Enhancements = cvar.Leg_Enhancements
Scarab_Damage = cvar.Scarab_Damage
Reaver_Capacity = cvar.Reaver_Capacity
Gravitic_Drive = cvar.Gravitic_Drive
Sensor_Array = cvar.Sensor_Array
Gravitic_Boosters = cvar.Gravitic_Boosters
Khaydarin_Amulet = cvar.Khaydarin_Amulet
Apial_Sensors = cvar.Apial_Sensors
Gravitic_Thrusters = cvar.Gravitic_Thrusters
Carrier_Capacity = cvar.Carrier_Capacity
Khaydarin_Core = cvar.Khaydarin_Core
Argus_Jewel = cvar.Argus_Jewel
Argus_Talisman = cvar.Argus_Talisman
Caduceus_Reactor = cvar.Caduceus_Reactor
Chitinous_Plating = cvar.Chitinous_Plating
Anabolic_Synthesis = cvar.Anabolic_Synthesis
Charon_Booster = cvar.Charon_Booster
UpgradeTypes_None = cvar.UpgradeTypes_None
UpgradeTypes_Unknown = cvar.UpgradeTypes_Unknown


def getWeaponType(*args):
  return _pybw_swig.getWeaponType(*args)
getWeaponType = _pybw_swig.getWeaponType

def allWeaponTypes():
  return _pybw_swig.allWeaponTypes()
allWeaponTypes = _pybw_swig.allWeaponTypes

def normalWeaponTypes():
  return _pybw_swig.normalWeaponTypes()
normalWeaponTypes = _pybw_swig.normalWeaponTypes

def specialWeaponTypes():
  return _pybw_swig.specialWeaponTypes()
specialWeaponTypes = _pybw_swig.specialWeaponTypes

def getBroodwar():
  return _pybw_swig.getBroodwar()
getBroodwar = _pybw_swig.getBroodwar

def _getSwigUnit(*args):
  return _pybw_swig._getSwigUnit(*args)
_getSwigUnit = _pybw_swig._getSwigUnit

def _getSwigPlayer(*args):
  return _pybw_swig._getSwigPlayer(*args)
_getSwigPlayer = _pybw_swig._getSwigPlayer

def _getSwigPosition(*args):
  return _pybw_swig._getSwigPosition(*args)
_getSwigPosition = _pybw_swig._getSwigPosition

Gauss_Rifle = cvar.Gauss_Rifle
C_10_Canister_Rifle = cvar.C_10_Canister_Rifle
Fragmentation_Grenade = cvar.Fragmentation_Grenade
WeaponTypes_Spider_Mines = cvar.WeaponTypes_Spider_Mines
Twin_Autocannons = cvar.Twin_Autocannons
Hellfire_Missile_Pack = cvar.Hellfire_Missile_Pack
Arclite_Cannon = cvar.Arclite_Cannon
Fusion_Cutter = cvar.Fusion_Cutter
Gemini_Missiles = cvar.Gemini_Missiles
Burst_Lasers = cvar.Burst_Lasers
ATS_Laser_Battery = cvar.ATS_Laser_Battery
ATA_Laser_Battery = cvar.ATA_Laser_Battery
Flame_Thrower = cvar.Flame_Thrower
Arclite_Shock_Cannon = cvar.Arclite_Shock_Cannon
Longbolt_Missile = cvar.Longbolt_Missile
Claws = cvar.Claws
Needle_Spines = cvar.Needle_Spines
Kaiser_Blades = cvar.Kaiser_Blades
Toxic_Spores = cvar.Toxic_Spores
Spines = cvar.Spines
Acid_Spore = cvar.Acid_Spore
Glave_Wurm = cvar.Glave_Wurm
Seeker_Spores = cvar.Seeker_Spores
Subterranean_Tentacle = cvar.Subterranean_Tentacle
Suicide_Infested_Terran = cvar.Suicide_Infested_Terran
Suicide_Scourge = cvar.Suicide_Scourge
Particle_Beam = cvar.Particle_Beam
Psi_Blades = cvar.Psi_Blades
Phase_Disruptor = cvar.Phase_Disruptor
Psionic_Shockwave = cvar.Psionic_Shockwave
Dual_Photon_Blasters = cvar.Dual_Photon_Blasters
Anti_matter_Missiles = cvar.Anti_matter_Missiles
Phase_Disruptor_Cannon = cvar.Phase_Disruptor_Cannon
Pulse_Cannon = cvar.Pulse_Cannon
STS_Photon_Cannon = cvar.STS_Photon_Cannon
STA_Photon_Cannon = cvar.STA_Photon_Cannon
Scarab = cvar.Scarab
Neutron_Flare = cvar.Neutron_Flare
Halo_Rockets = cvar.Halo_Rockets
WeaponTypes_Corrosive_Acid = cvar.WeaponTypes_Corrosive_Acid
Subterranean_Spines = cvar.Subterranean_Spines
Warp_Blades = cvar.Warp_Blades
WeaponTypes_Yamato_Gun = cvar.WeaponTypes_Yamato_Gun
WeaponTypes_Nuclear_Strike = cvar.WeaponTypes_Nuclear_Strike
WeaponTypes_Lockdown = cvar.WeaponTypes_Lockdown
WeaponTypes_EMP_Shockwave = cvar.WeaponTypes_EMP_Shockwave
WeaponTypes_Irradiate = cvar.WeaponTypes_Irradiate
WeaponTypes_Parasite = cvar.WeaponTypes_Parasite
WeaponTypes_Spawn_Broodlings = cvar.WeaponTypes_Spawn_Broodlings
WeaponTypes_Ensnare = cvar.WeaponTypes_Ensnare
WeaponTypes_Dark_Swarm = cvar.WeaponTypes_Dark_Swarm
WeaponTypes_Plague = cvar.WeaponTypes_Plague
WeaponTypes_Consume = cvar.WeaponTypes_Consume
WeaponTypes_Stasis_Field = cvar.WeaponTypes_Stasis_Field
WeaponTypes_Psionic_Storm = cvar.WeaponTypes_Psionic_Storm
WeaponTypes_Disruption_Web = cvar.WeaponTypes_Disruption_Web
WeaponTypes_Restoration = cvar.WeaponTypes_Restoration
WeaponTypes_Mind_Control = cvar.WeaponTypes_Mind_Control
WeaponTypes_Feedback = cvar.WeaponTypes_Feedback
WeaponTypes_Optical_Flare = cvar.WeaponTypes_Optical_Flare
WeaponTypes_Maelstrom = cvar.WeaponTypes_Maelstrom
WeaponTypes_None = cvar.WeaponTypes_None
WeaponTypes_Unknown = cvar.WeaponTypes_Unknown

